

--- Page 293 ---
计算机操作系统
入，从中找出由参数指定的模式，然后把所有包含该模式的行都打印出来。例如，MS-DOS
中用命令
find/N“erase”（路径名）
可对由路径名指定的输入文件逐行检索，把含有字符串“erase”的行输出。其中，N是选
择开关，表示输出含有指定字串的行。如果不用N而用C，则表示只输出含有指定字串的
行数；若用V，则表示输出不含指定字串的行。
（4）批命令。为了能连续地使用多条键盘命令，或多次反复地执行指定的若干条命令，
而又免去每次重敲这些命令的麻烦，可以提供一个特定文件。在MS-DOS中提供了一种特
殊文件，其后缀名用“BAT”；在UNIX系统中称为命令文件。它们都是利用一些键盘命令
构成一个程序，一次建立供多次使用。在MS-DOS中用batch命令去执行由指定或默认驱
动器的工作目录上指定文件中所包含的一些命令。
/9.2Shell命令语言
在Linux系统中，Shell是命令语言、命令解释器（程序）及程序设计语言的统称，其特
点如下：
（1）作为命令语言，它拥有自己内建的Shell命令集，可以为用户提供使用操作系统的
接口，用户利用该接口与机器交互。
（2）作为一种程序设计语言，它支持绝大多数在高级语言中能见到的程序元素，如函
数、变量、数组和程序控制结构。同时，Shell作为一种编程语言，还具有简单易学的特点，
任何在提示符中能键入的命令，都能放到一个可执行的Shell程序中，用户可利用多条Shell
命令构成一个文件（或称为Shell过程）。
（3）作为一个命令解释器（程序），Shell可对输入的命令解释执行。
下面对Shell命令语言做扼要的介绍。
9.2.1简单命令简介
在Shell命令语言中提供了许多不同形式的命令，并充许在一条命令行中有多个命令。
如果在一条命令行中仅有一个命令，就把它称为简单命令。实际上，一条简单命令便是一
个能完成某种功能的目标程序的名字。
1.简单命令的格式
简单命令的格式比较自由，包括命令名字符的个数及用于分隔命令名、选项、各参数
间的空格数等，都是任意的。在UNIX和Linux系统中都规定，命令由小写字母构成，命
令可带有参数表，用于给出执行命令时的附加信息，每个参数是一个单词。命令名与参数
表之间还可使用一种称为选项的自变量，用减号开始，后跟一个或多个字母、数字。一条
命令可有多个选项，用于改变命令执行动作的类型。命令的格式如下：
$ Command -option argument list
例如：
$ ls file1 file2
282

--- Page 294 ---
第九章操作系统接口
这是一条不带选项的列目录命令，$是系统提示符。该命令用于列出file1和file2两个
目录文件中所包含的目录项，并隐含地指出按英文字母顺序列表。若给出-tr选项，该命令
可表示成：
$ ls-trfile1 file 2
其中，选项t和r分别表示按最近修改次序及按反字母顺序列表。
通常，命令名与该程序的功能紧密相关，以便于记忆。命令参数可多可少，也可缺省。
例如：
$ls
表示自动以当前工作目录为缺省参数，打印出当前工作目录所包含的目录项。
2.简单命令的分类
在Linux或UNIX系统中，一般把简单命令分为两类：
（1）系统提供的标准命令，包括调用各种语言处理程序、实用程序等，其数量随系统
版本的不同而有所差异，系统管理员可以增添新的系统标准命令。
（2）用户自定义的命令。系统管理员和用户自行定义的命令的执行方式与系统标准命
令的执行方式相同。
对于简单命令，还可根据命令是否包含在Shell内部，即是否常驻内存，而分为内部命
令和外部命令两类：
（1）内部命令。Shell中少数标准命令，如改变工作目录命令cd等，是包含在Shell内
部的，作为内部命令常驻内存。
上，即每个命令是存在于文件系统中某个目录下的单独程序。这样做的好处在于，可以很
大程度地节省内存空间。
简单命令的数量易于扩充。Shell对命令的管理，对用户而言也是透明的，即用户在使
用时，不必关心一个命令是内部命令还是外部命令。当用户输入一个命令时，Shell首先检
查该命令是否是内部命令，若不是，则检查是否是外部命令。判断是否是外部命令则是通
过搜索路径（目录列表）里能否寻找到相应的应用程序进行确定的。如果用户键入的命令不
是一个内部命令，也不是外部命令，则返回显示一条错误信息。否则，如果能够成功找到
命令，则将命令分解为系统调用，并传给Linux内核进行处理。
3.Shell的种类
（1）BourneShell。在UNIX中，最初使用的Shell就是BourneShell，简称为BShell，
可以通用于多种UNIX上，用$作为提示符，在提示符之后，可以输入命令或回车键。BShe11
程序一样，BShell本身也是一个程序，它的名字是Sh。
BShell有多个版本，最著名的是BourneAgainShell（也称为Bash)，与BShell完全向
后兼容。它在BShell的基础上加以扩展，增加、增强了很多特性，可以提供如命令补全、
命令编辑和命令历史表等功能，它还包含了很多CShell和KornShell中的优点，有灵活和
强大的编程接口，同时又有很友好的用户界面，是Linux操作系统中缺省的Shell。
283

--- Page 295 ---
计算机操作系统
(2）CShell。CShell是一种比BShell更适于编程的Shell，是标准BSD(BerkeleySystem
Distribution）命令解释。它的名字是CSh，其语法与C语言很相似，用%作为提示符。随
着UNIX系统标准化的发展，使用UNIX作为操作系统的工作站，大都同时支持BShell
和 C Shell。
CShell不仅和BShell提示符兼容，而且还提供比BShell更多的提示符参数。例如，
CShell可以使用许多特殊的字符，当输入这类字符时，可以执行许多特殊的功能，例如，
惊叹号（！)表示重复执行命令，两个惊叹号（！)表示重复执行最后输入的命令。在Linux系
统中，与CShell对应的是Tcsh。Tcsh也是CShell的一个扩展版本，包括命令行编辑、可
编程单词补全、拼写校正、历史命令替换、作业控制等。
（3）KornShell。KornShell集合了CShell和BShell的优点，并且和BShell完全兼容，
它的名字是KSh。对应地，Linux系统提供了Pdksh，也是对KornShell的扩展，它支持任
务控制，可以在命令行上挂起、后台执行、唤醒或终止程序。
9.2.2简单命令的类型
根据简单命令功能的不同，可将它们分成如下五大类：
1.进入与退出系统
（1）进入系统，也称为注册。事先，用户须与系统管理员商定一个唯一的用户名。管
理员用该名字在系统文件树上为用户建立一个子目录树的根结点。当用户打开自己的终端
时，屏幕上会出现Login：提示，这时用户便可键入自己的注册名，并用回车符结束。然后，
系统又询问用户口令，用户可用回车符或事先约定的口令键入。在通过这两步检查后，才能
出现系统提示符，以提示用户可以使用系统。若任一步有错，系统均会提示要用户重新键入。
（2）退出系统。每当用户用完系统后，应向系统报告自己要退出。系统得知后，马上
为用户记账，清除用户的使用环境。如果用户使用的是多终端中的一个终端，为了退出，
新用户使用。用户的进入与退出过程是由系统直接调用Login及Logout程序完成的。
2.文件操作命令
（1）显示文件内容命令cat。如果用户想了解自已在当前目录中的某个或某几个指定文
件的内容时，便可使用下述格式的cat命令：！
$catfilename1 filename2
执行上述命令后，将按参数指定的顺序，依次把所列名字的文件内容送屏幕显示。若键入的
文件名有错，或该文件不在当前目录下，则该命令执行结果将显示指定文件不能打开的信息。
(2）复制文件副本的命令cp。其格式为：
cp source target
该命令用于对已存在的文件source建立一个名为target的副本。
(3）对已有文件改名的命令mV。其格式为：
mv oldnamenewname
用于把原来的老名字改成指定的新名字。
（4）撤消文件的命令rm。它给出一个参数表，是要撤消的文件名清单。
284

--- Page 296 ---
第九章操作系统接口
（5）确定文件类型的命令file。该命令带有一个参数表，用于给出想了解其（文件）类型
的文件名清单。命令执行的结果，将在屏幕上显示出各个文件的类型。
3.目录操作命令
（1）建立目录的命令mkdir（简称md)。用户可以自己的注册名作为根结点，建立一棵子
目录树。可用md命令来构建一个目录，参数是新创建目录的名字。但该命令的使用必须
在其父目录中有写许可。
下仍有文件，该命令将被认为是错误操作，这样可以防止因不慎而消除了一个想保留的文
件。命令的参数表给出了要撤消的目录文件清单。
当前目录的子目录名作参数，将把用户移到当前目录指定的下一级目录上。
4.系统询问命令
（1）访问当前日期和时间命令date。例如，使用命令
$date
屏幕上将给出当前的日期和时间，如为：
WedAng1409:27:20PDT2006
表示当前日期是2006年9月14日、星期三，还有时间信息。若在命令名后给出参数，则
date程序把参数作为重置系统时钟的时间。
（2）询问系统当前用户的命令who。who命令可列出当前每一个处在系统中的用户的注
册名、终端名和注册进入时间，并按终端标志的字母顺序排序。例如，报告有下列三用户：
Veronicabxo66Aug2713:28
Rathomas dz24 Aug2807:42
Jlyates tty5 Aug2807:39
统打印出当前的用户数目而不显示系统用户名等的完整清单，以得知当前用户数目。
（3）显示当前目录路径名的命令pwd。当前目录的路径名是从根结点开始。用户的当
前目录可能经常在树上移动。如果用户忘记了自己在哪里，便可用pwd确定自己的位置。
除了上述的命令外，还有许多较常用的命令。输入输出重定向命令、管道连接、通信
命令和后台命令等，分别在下面三小节中介绍。
9.2.3重定向与管道命令
1.重定向命令
在Linux系统中，由系统定义了三个文件。其中，有两个分别称为标准输入和标准输
出的文件，各对应于终端键盘输入和终端屏幕输出。它们是在用户注册时，由Login程序
打开的。这样，在用户程序执行时，隐含的标准输入是键盘输入，标准输出即屏幕（输出）
显示。但用户程序中可能不要求从键盘输入，而是从某个指定文件上读取信息供程序使用；
同样，用户可能希望把程序执行时所产生的结果数据写到某个指定文件中而非屏幕上。为此，
285

--- Page 297 ---
计算机操作系统
用户必须不使用标准输入、标准输出，而把另外的某个指定文件或设备作为输入或输出文件。
Shell向用户提供了这种用于改变输入、输出设备的手段，此即标准输入与标准输出
的重新定向。用重定向符“<”和“>”分别表示输入转向与输出转向。例如，对于命令
$ cat filel
表示将文件file1的内容在标准输出上打印出来。若改变其输出，用命令
$ cat file1>file2
表示把文件file1的内容打印输出到文件file2上。同理，对于命令
$wc
表示对标准输入中的行中字和字符进行计数。若改变其输入，用命令
$ wc<file3
则表示把从文件file3中读出的行中的字和字符进行计数。
须指明的是，在做输出转向时，若上述的文件file2并不存在，则先创建它；若已存在，
则认为它是空白的，执行上述输出转向命令时，是用命令的输出数据去重写该文件；如果
文件file2事先已有内容，则用文件file1的内容去更新文件file2的原有内容。现在，如果
又要求把file4的内容附加到现有的文件file2的末尾，则应使用另一个输出转向符“>>”，
即此时应再用命令
$ cat file4 >> file2
便可在文件file2中，除了上次复制的file1内容外，后面又附加上file4的内容。
此外，也可在一个命令行中同时改变输入与输出。例如，命令行
a.out<filel>file0
表示在可执行文件a.out执行时，将从文件file1中提取数据，而把a.out的执行结果数据输
出到文件fileO中。
2.管道命令
人们又进一步把重定向思想加以扩充，用符号“”来连接两条命令，使其前一条命令
的输出作为后一条命令的输入。即
$command1l command 2
例如，对于下述输入
cat fileIwc
将使命令cat把文件file中的数据作为wc命令的计数输入。
系统执行上述输入时，将为管道建立一个作为通信通道的pipe文件。这时，cat命令
道线所连接的命令之间实现单向、同步运行。其单向性表现在：只把管道线前面命令的输
出送入管道，而管道的输出数据仅供管道线后面的命令去读取。管道的同步特性则表现为：
当一条管道满时，其前一条命令停止执行；而当管道空时，则其后一条命令停止运行。除
此两种情况外，用管道所连接的两条命令“同时”运行。可见，利用管道功能，可以流水线
方式实现命令的流水线化，即在单一命令行下同时运行多条命令，以加速复杂任务的完成。
9.2.4通信命令
在Linux系统中为用户提供了实时和非实时两种通信方式，分别使用write及mail命令。
286

--- Page 298 ---
第九章操作系统接口
此外，联机用户还可根据自已的当前情况，决定是否接受其他用户与他进行通信的要求。
1.信箱通信命令mail
信箱通信是作为在UNIX的各用户之间进行非交互式通信的工具。发信者把要发送的
即它是目录usr/spool/mail中的一个文件，而文件名又是用接收者的注册名来命名的。信箱
中的信件可以一直保留到被信箱所有者消除为止。mail命令在用于发信时，把接收者的注
册名当做参数输入后，便可在新行开始键入信件正文，最后仍在一个新行上，用“”来结
束信件或用“D”退出mail程序（也可带选项，此处从略）。接收者也用mail命令读取信件，
可使用可选项r、q或p等。其命令格式为：
mail
分别表示：按先进先出顺序显示各信件的内容；在输入中断字符（DEL或RETURN)后，退
出mail程序而不改变信箱的内容；一次性地显示信箱全部内容而不带询问，把指定文件当
做信件来显示。在不使用-P选项时，表示在显示完一个信件后便出现“？”，以询问用户
是否继续显示下一条消息，或选读完最后一条消息后退出mail。
2.对话通信命令write
用这条命令可以使用户与当前在系统中的其他用户直接进行联机通信。由于UNIX系
统允许一个用户同时在几个终端上注册，故在用此命令前，要用who命令去查看目标用户
当前是否联机，或确定接收者所使用的终端名。命令格式为：
writeuser[ttyname]
当接收者只有一个终端时，终端名可缺省。当接收者的终端被充许接收消息时，屏幕提示
会通知接收者源用户名及其所用终端名。
3.允许或拒绝接收消息的mesg命令
其格式为：
选项n表示拒绝对方的写许可(即拒绝接收消息)；选项y指示恢复对方的写许可，仅在此
时双方才可联机通信。当用户正在联机编写一份资料而不愿被别人干扰时，常选用n选项
来拒绝对方的写许可。编辑完毕，再用带有y选项的mesg命令来恢复对方的写许可，不带
自变量的mesg命令只报告当前状态而不改变它。
9.2.5后台命令
有些命令需要执行很长的时间，这样，当用户键入该命令后，便会发现自已已无事可
做，要一直等到该命令执行完毕，方可再键入下一条命令。这时用户自然会想到应该利用
这段时间去做些别的事。UNIX系统提供了这种机制，用户可以在这种命令后面再加上
“&”号，以告诉Shell将该命令放在后台执行，以便用户能在前台继续键入其它命令，完
成其它工作。
在后台运行的程序仍然把终端作为它的标准输出和标准输入文件，除非对它们进行重
新定向。其标准输入文件是自动地被从终端定向到一个被称为“/dev/null”的空文件中。若
287

--- Page 299 ---
计算机操作系统
shell未重定向标准输入，则shell和后台进程将会同时从终端读入。这时，用户从终端键入
的字符可能被发送到一个进程或另一个进程，并不能预测哪个进程将得到该字符。因此，
对所有在后台运行的命令的标准输入，都必须加以重定向，从而使从终端键入的所有字符
都被送到Shell进程。用户可使用ps、wait及Kil命令去了解和控制后台进程的运行。
179.3联机命令接口的实现
为了实现人机交互，在系统中必须配置相应的软件来实现人机交互。首先需要在微机
或终端上配置相应的键盘终端处理程序，它的最基本功能是接收用户从终端键入的命令和
数据，将它们暂存在字符缓冲区中；其次需要配置的是命令解释程序，该软件最基本的功
能是对所键入的命令进行识别，然后再转入相应的命令处理程序去执行。
9.3.1键盘终端处理程序
-:
在微机或终端上所配置的键盘终端处理程序应具有下述几方面的功能：①接收用户从
终端上打入的字符；②字符缓冲，用于暂存所接收的字符；③回送显示；④屏幕编辑；
③特殊字符处理。
1.字符接收功能
为了实现人机交互，键盘终端处理程序必须能够接收从终端输入的字符，并将之传送
给用户程序。有两种方式可实现字符接收功能：
（1）面向字符方式。驱动程序只接收从终端打入的字符，并且不加修改地将它传送给
用户程序。这通常是一串未加工的ASCII码。但大多数的用户并不喜欢这种方式。
(2）面向行方式。终端处理程序将所接收的字符暂存在行缓冲中，并可对行内字符进
行编辑。仅在收到行结束符后，才将一行正确的信息送命令解释程序。在有的计算机中，
“30”放入IVO寄存器，此时，终端处理程序必须参照某种表格将键码转换成ASCII码。
2.字符缓冲功能
为了能暂存从终端键入的字符，以降低中断处理器的频率，在终端处理程序中，还必
须具有字符缓冲功能。字符缓冲可采用以下两种方式之一：
（1）专用缓冲方式。系统为每个终端设置一个缓冲区，暂存用户键入的一批字符。缓
100个终端时，要求有20KB的缓冲区。但专用缓冲方式可使终端处理程序简化。图9-1(a)
示出了专用缓冲方式。
（2）公用缓冲方式。系统只设置一个由多个缓冲区构成的公用缓冲池，而没有为每个
终端设置专用缓冲区。其中的每个缓冲区大小相同，如为20个字符，再将所有的空缓冲区
链接成一个空缓冲区链。当终端有数据输入时，可先向空缓冲区链申请一空缓冲区，来接
收输入字符；当该缓冲区装满后，再申请一空缓冲区。这样，直至全部输入完毕，并利用
链接指针将这些装有输入数据的缓冲区链接成一条输入链。每当该输入链中一个缓冲区内的
288
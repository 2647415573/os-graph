

--- Page 270 ---
第八章磁盘存储器的管理
文件不大于40KB时，便可直接从索引结点中读出该文件的全部盘块号。
(2）一次间接地址。对于大、中型文件，只采用直接地址是不现实的。为此，可再利
用索引|结点中的地址项i.addr（10)来提供一次间接地址（singleindirect)。这种方式的实质就是
一级索引分配方式。图中的一次间址块也就是索引块，系统将分配给文件的多个盘块号记
入其中。在一次间址块中可存放1K个盘块号，因而允许文件长达4MB。
（3）多次间接地址。当文件长度大于4MB+40KB时，使用一次间址与10个直接地
址项时地址空间仍不足，系统还需采用二次间址分配方式。这时，用地址项i.addr（11)提供
二次间接地址（doubleindirect)。该方式的实质是两级索引分配方式。系统此时是在二次间
址块中记入所有一次间址块的盘号。在采用二次间址方式时，文件最大长度可达4GB。同
理，地址项i.addr（12)作为三次间接地址（tripleindirect)，其所允许的文件最大长度可达4TB。
mode
owners (2)
time stamps (3)
size
data
block count
i.addr (0)
data
i.addr (1)
direct blocks
data
data
data
single indirect
data
data
doubleindirect
data
triple indirect
data
图8-8混合索引方式
8.2
文件存储空间的管理
为了实现前面任何一种文件组织方式，都需要为文件分配盘块，因此必须知道磁盘上
哪些盘块是可用于分配的。故在为文件分配磁盘时，除了需要文件分配表外，系统还应为
可分配存储空间设置相应的数据结构，即设置一个磁盘分配表（DiskAllocationTable)，用于
记住可供分配的存储空间情况。此外，还应提供对盘块进行分配和回收的手段。不论哪种
分配和回收方式，存储空间的基本分配单位都是磁盘块而非字节。下面介绍几种常用的文
件存储空间的管理方法。
8.2.1空闲表法和空闲链表法
1.空闲表法
1）空闲表
空闲表法属于连续分配方式，它与内存的动态分配方式雷同，它为每个文件分配一块
259

--- Page 271 ---
计算机操作系统
连续的存储空间。即系统也为外存上的所有空闲区建立一张空闲表，每个空闲区对应于一
个空闲表项，其中包括表项序号、该空闲区的第一个盘块号、该区的空闲盘块数等信息。
再将所有空闲区按其起始盘块号递增的次序排列，形成空闲盘块表，如图8-9所示。
序号
第一空闲盘块号
空闲盘块数
1
2
4
2
9
3
3
15
5
4
一
一
图8-9空闲盘块表
2）存储空间的分配与回收
空闲盘区的分配与内存的分区（动态）分配类似，同样是采用首次适应算法和最佳适应
算法等，它们对存储空间的利用率大体相当，都优于最坏适应算法。在系统为某新创建的
文件分配空闲盘块时，先顺序地检索空闲表的各表项，直至找到第一个其大小能满足要求
的空闲区，再将该盘区分配给用户（进程），同时修改空闲表。系统在对用户所释放的存储
空间进行回收时，也采取类似于内存回收的方法，即要考虑回收区是否与空闲表中插入点
的前区和后区相邻接，对相邻接者应予以合并。
应该说明，在内存分配上，虽然较少采用连续分配方式，然而在外存的管理中，由于
这种分配方式具有较高的分配速度，可减少访问磁盘的IO频率，故它在诸多分配方式中
仍占有一席之地。例如，在前面所介绍的对换方式中，对对换空间，一般都采用连续分配
邻接的几个盘块；当文件较大时，便采用离散分配方式。另外，对于多媒体文件，为了能
减少磁头的寻道时间，也采用连续分配方式。
2.空闲链表法
空闲链表法是将所有空闲盘区拉成一条空闲链。根据构成链所用基本元素的不同，可
把链表分成两种形式：空闲盘块链和空闲盘区链。
1）空闲盘块链
这是将磁盘上的所有空闲空间以盘块为单位拉成一条链，其中的每一个盘块都有指向
后继盘块的指针。当用户因创建文件而请求分配存储空间时，系统从链首开始，依次摘下
适当数目的空闲盘块分配给用户。当用户因删除文件而释放存储空间时，系统将回收的盘
块依次挂在空闲盘块链的末尾。这种方法的优点是用于分配和回收一个盘块的过程非常简
单，但在为一个文件分配盘块时，可能要重复操作多次，分配和回收的效率较低。又因为
它是以盘块为单位，相应的空闲盘块链会很长。
2)空闲盘区链
这是将磁盘上的所有空闲盘区(每个盘区可包含若干个盘块)拉成一条链。在每个盘区
上除含有用于指示下一个空闲盘区的指针外，还应有能指明本盘区大小(盘块数)的信息。
分配盘区的方法与内存的动态分区分配类似，通常采用首次适应算法。在回收盘区时，同
260

--- Page 272 ---
第八章磁盘存储器的管理
样也要将回收区与相邻接的空闲盘区相合并。在采用首次适应算法时，为了提高对空闲盘
区的检索速度，可以采用显式链接方法，亦即，在内存中为空闲盘区建立一张链表。这种
方法的优点和缺点刚好与前一种方法的优缺点相反，即分配与回收的过程比较复杂，但分
配和会收的效率可能较高，每次为文件分配多个连续的块，且空闲盘区链较短。
8.2.2位示图法
一
1.位示图
位示图是利用二进制的一位来表示磁盘中一个盘块的使用情况。当其值为“0”时，表
示对应的盘块空闲；为“1”时，表示已分配。有的系统把“0”作为盘块已分配的标志，
把“1”作为空闲标志。（它们在本质上是相同的，都是用一位的两种状态来标志空闲和已
分配两种情况。）磁盘上的所有盘块都有一个二进制位与之对应，这样，由所有盘块所对应
的位构成一个集合，称为位示图。通常可用mxn个位数来构成位示图，并使mxn等于磁
盘的总块数，如图8-10所示。位示图也可描述为一个二维数组map[m,n]:
12345678910111213141516
1
0
0
0
0
0
1
1
0
2
0
0
0
0
0
1
1
>
1
0
3
1
1
0
0
0
1
1
0
0
0
4
16
图8-10位示图
2.盘块的分配
根据位示图进行盘块分配时，可分三步进行：
（1）顺序扫描位示图，从中找出一个或一组其值为“0”的二进制位（“0”表示空闲时）。
的二进制位位于位示图的第i行、第i列，则其相应的盘块号应按下式计算：
b=n(i-1)+j
式中，n代表每行的位数。
(3）修改位示图，令map[i,j]=1。
3.盘块的回收
盘块的回收分两步：
(1）将回收盘块的盘块号转换成位示图中的行号和列号。转换公式为：
i=(b - 1)DIV n + 1
j= (b - 1)MOD n + 1
(2）修改位示图。令map[i,j]=0。
这种方法的主要优点是从位示图中很容易找到一个或一组相邻接的空闲盘块。例如，
我们需要找到6个相邻接的空闲盘块，这只需在位示图中找出6个其值连续为“0”的位即
261

--- Page 273 ---
计算机操作系统
可。此外，由于位示图很小，占用空间少，因而可将它保存在内存中，进而使在每次进行
盘区分配时，无需首先把盘区分配表读入内存，从而节省了许多磁盘的启动操作。因此，
位示图常用于微型机和小型机中，如CP/M、Apple-DOS等OS中。
8.2.3成组链接法
空闲表法和空闲链表法都不适用于大型文件系统，因为这会使空闲表或空闲链表太长。
在UNIX系统中采用的是成组链接法，这是将上述两种方法相结合而形成的一种空闲盘块
管理方法，它兼备了上述两种方法的优点而克服了两种方法均有的表太长的缺点。
1.空闲盘块的组织
（1）空闲盘块号栈，用来存放当前可用的一组空闲盘块的盘块号（最多含100个号），以
及栈中尚有的空闲盘块（号）数N。顺便指出，N还兼作栈顶指针用。例如，当N=100时，
它指向S.free（99)。由于栈是临界资源，每次只允许一个进程去访问，故系统为栈设置了一
把锁。图8-11左部示出了空闲盘块号栈的结构。其中，S.free(0)是栈底，栈满时的栈顶为
S.free(99)。
100
100
99
400
0
空闲盘
399
7999
块号栈
100
301
7901
S.free
100
300
0
300
400
7900
299
299
399
7899
7999
202
99
201
201
301
7801
7901
图8-11空闲盘块的成组链接法
(2）文件区中的所有空闲盘块被分成若干个组，比如，将每100个盘块作为一组。假
定盘上共有10000个盘块，每块大小为1KB，其中第201～7999号盘块用于存放文件，即
作为文件区，这样，该区的最末一组盘块号应为7901～7999；次末组为7801～7900，，
倒数第二组的盘块号为301～400；第一组为201～300，如图8-11所示。
(3）将每一组含有的盘块总数N和该组所有的盘块号记入其前一组的第一个盘块的
S.free(0)～S.free(99)中。这样，由各组的第一个盘块可链成一条链。
（4）将第一组的盘块总数和所有的盘块号记入空闲盘块号栈中，作为当前可供分配的
空闲盘块号。
(5）最末一组只有99个盘块，其盘块号分别记入其前一组的S.free(1)～S.free(99)中，
262

--- Page 274 ---
第八章磁盘存储器的管理
而在S.free(O)中则存放“0”，作为空闲盘块链的结束标志。（注：最后一组的盘块数应为
99，不应是100，因为这是指可供使用的空闲盘块。其编号应为(1～99)，0号中放空闲盘
块链的结尾标志。）
2.空闲盘块的分配与回收
当系统要为用户分配文件所需的盘块时，须调用盘块分配过程来完成。该过程首先检
查空闲盘块号栈是否上锁，如未上锁，便从栈顶取出一空闲盘块号，将与之对应的盘块分
配给用户，然后将栈顶指针下移一格。若该盘块号已是栈底，即S.free（O)，这是当前栈中
最后一个可分配的盘块号。由于在该盘块号所对应的盘块中记有下一组可用的盘块号，因
此，须调用磁盘读过程将栈底盘块号所对应盘块的内容读入栈中，作为新的盘块号栈的内
容，并把原栈底对应的盘块分配出去（其中的有用数据已读入栈中）。然后，再分配一相应
的缓冲区（作为该盘块的缓冲区）。最后，把栈中的空闲盘块数减1并返回。
在系统回收空闲盘块时，须调用盘块回收过程进行回收。它是将回收盘块的盘块号记
入空闲盘块号栈的顶部，并执行空闲盘块数加1操作。当栈中空闲盘块号数目已达100时，
表示栈已满，便将现有栈中的100个盘块号记入新回收的盘块中，再将其盘块号作为新栈底。
/8.3提高磁盘1/0速度的途径
文件系统的性能可表现在多个方面，其中至关重要的一个方面是对文件的访问速度。
为了提高对文件的访问速度，可从三方面着手：
（1）改进文件的目录结构以及检索目录的方法来减少对目录的查找时间；
(2）选取好的文件存储结构，以提高对文件的访问速度；
（3）提高磁盘的I/O速度，能将文件中的数据快速地从磁盘传送到内存中，或者相反。
速度作一简单介绍。
目前，磁盘的IO速度远低于对内存的访问速度，通常要低上4～6个数量级。因此，
磁盘的IO已成为计算机系统的瓶颈。于是，人们便干方百计地去提高磁盘I/O的速度，
其中最主要的技术便是采用磁盘高速缓存。
8.3.1磁盘高速缓存（DiskCache)
一一一一一一
在前面介绍的高速缓存，是指在内存和CPU之间所增设的一个小容量高速存储器。而
在这里所要介绍的磁盘高速缓存，是指在内存中为磁盘盘块设置的一个缓冲区，在缓冲区中
保存了某些盘块的副本。当出现一个访问磁盘的请求时，由核心先去查看磁盘高速缓冲器，
看所请求的盘块内容是否已在磁盘高速缓存中，如果在，便可从磁盘高速缓存中去获取，这
样就省去了启动磁盘操作，而且可使本次访问速度提高几个数量级；如果不在，才需要启动
磁盘将所需要的盘块内容读入，并把所需盘块内容送给磁盘高速缓存，以便以后又需要访问
该盘块的数据时，便可直接从高速缓存中提取。在设计磁盘高速缓存时需要考虑的问题有：
(1）如何将磁盘高速缓存中的数据传送给请求进程；
(2）采用什么样的置换策略；
263
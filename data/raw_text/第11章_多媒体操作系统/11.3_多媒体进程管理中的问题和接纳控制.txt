

--- Page 368 ---
第十一章多媒体操作系统
看到正常的图像。另外，如果电影中间没有I帧，也无法进行快进或倒带。当有了I帧后，
在快进时，向前跳过若干帧直到找到I帧，并播放该帧，即在快进时，只是播放I帧。
4.运动图像的压缩标准
MPEG算法被确定为运动图像压缩的国际标准，已在全世界范围得到广泛的应用，下
面是几种常用的MPEG标准：
（1）MPEG-I标准，它同时采用了顿内图像数据压缩和帧间图像数据压缩两种方法，
对视频信号进行压缩。对NTSC制式的分辨率为352×240，对PAL制式的分辨率为360×
288。其图像的质量适用于家用录像机和VCD。
(2）MPEG-ⅡI标准，它具有比MPEG-I更高的指标，对NTSC制式的分辨率为720×
480，对PAL制式的分辨率为720×576。其图像的质量适用于DVD和交互式多媒体应用等。
(3）MPEG-IV标准，这是最进几年流行起来的压缩标准，它可以获得多种视频格式，
具有很大的压缩比，它可将一部120分钟长的电影，压缩成300MB左右，供网上观看。
5.音频压缩标准
在多媒体应用中，最常用的音频压缩标准是MPEG的音频压缩算法。它是第一个高保
真音频数据压缩国际标准，该算法提供了3个独立的压缩层次。第一层（MPEGLayer1)音
频压缩算法主要用于数字录像机中的音频，压缩后的音频速率为384KB/s。第二层（MPEG
Layer2)音频压缩算法主要用于数字广播电视的音频、CD-ROM和VCD中的音频，压缩后
的音频速率为192KB/s。第三层(MPEGLayer3)音频压缩算法能获得较好的音质，当前最
流行的MP3便是在这一层进行压缩的音乐，在制作MP3时可选择不同的压缩比，一般选择
10倍左右的压缩比即能将一个40MB的WAV文件压缩为4MB左右的MP3格式的文件。
/11.3多媒体进程管理中的问题和接纳控制
由于目前尚无专门为多媒体系统设计的操作系统，因此对多媒体的处理还必须利用当
前的通用操作系统，适当增加有关多媒体方面的功能。事实上，现在比较流行的操作系统
都具备了对多媒体进行处理的能力，如广为流行的Windows2000/XP和Linux等。
11.3.1实时任务的处理需求和描述
多媒体进程（线程）与通常的进程（线程）之间有许多相似之处，比如它们需要一定数量的
资源，具有三个基本运行状态等。但它们也各有自己的特点，因此，在对多媒体进程进行
管理时，必须考虑多媒体数据应遵循的时序需求。为此，应为系统配置接纳机制，来控制
同时运行的进程的数目，并选用适当的调度算法，来满足进程对截止时间的要求。
1.实时任务的处理需求
在通常的多媒体系统中，必须按照严格的时间间隔对实时任务进行处理。或者说，必
须周期性地对数据进行处理，并在一规定的截止时间前完成。
而且是在每一个周期里都提供这样的保证，否则会引起难以预料的后果。
357

--- Page 369 ---
计算机操作系统
（2）对在系统中运行的软实时SRT任务，进程管理应当保证它们的大多数截止时间要
求，仅对极少数的截止时间要求，进程管理如不能保证，其所引发的后果并不会十分严重。
(3）当系统中有硬实时任务时，决不允许出现优先级倒置的情况，这样才能保证硬实
时任务的截止时间需求。如果系统中仅有软实时任务，则只允许很少出现优先级倒置的情
况，以便能保证软实时任务的大多数截止时间。
（4）实时任务的处理时间，不仅包含每个周期对实时任务本身的处理时间，还应包含
为调度每一个任务所花费的时间，因此，应尽量减少实时调度所付出的开销。
2.软实时任务的时间特性描述
在多媒体系统中，是对连续媒体数据流进行处理。在播放数字电影时，媒体服务器将
周期性地（对于PAL制式为40ms）逐帧送出数据。相应地，媒体服务器中的处理机必须在规
定的时间内对它进行处理后送给用户。可见播放数字电影将联系着一个截止时间或称为最
后时限。这说明数字电影是一个要求比较严格的周期性软实时任务。
为了对它们进行描述，应给出它们的时序限制，其中包含有开始时间s、截止时间d
和周期时间p三个时间指标，以及所需要的CPU处理时间e。这样我们对周期性任务T的
时间限制可以用(s,e,d,p)来描述，由此可以算出T的速率为r=1/p。图11-1示出了T的时
须在s+（k-1)p+d之前完成。
周期任务T
图11-1周期任务的时间特性
11.3.2多媒体进程管理中必须解决的问题
一
由于多媒体任务一般是运行在具有多媒体功能的通用操作系统平台上的，故系统中不
仅有软实时任务，而且还可能有一般任务，相应的进程管理必须解决如下问题：
1.同时运行不同类型的软实时任务
通常媒体服务器可向众多的用户提供各种多媒体服务，如数字电影和电视服务。在系
统中，每一部数字电影都是作为一个软实时任务运行的，彼此间相互独立。不同的软实时
们有不同的开始时间、截止时间、周期时间和CPU处理时间。简而言之，多媒体进程管理
必须具有能支持多种不同类型的软实时任务同时运行的能力。
2.支持软实时任务和非实时任务同时运行
一个具有多媒体功能的通用操作系统，它既应面向软实时任务的用户，又需面向非实
358

--- Page 370 ---
时任务的用户，如交互型作业的用户。因此，在系统中，应当允许多种类型的SRT任务和
不同类型的非实时任务并存。相应的进程管理应具备以下两方面的功能：一方面需要满足
SRT任务对截止时间的需求；另一方面又应使非实时任务的用户满意，并能很好地协调多
种任务的并发运行。
3.提供适当的进程接纳机制
在多道程序环境下，如果在系统中同时运行的SRT任务太多，将难以保证实时任务的
截止时间需求。反之，若在系统中的SRT任务太少，CPU又会得不到充分利用。为解决此
矛盾而引入了对进程的接纳控制机制，目前常用的是基于预留的进程接纳机制。当新进入
的SRT任务提出接纳请求时，接纳机制将计算是否有足够的CPU时间片（带宽）来接纳该进
程，如果有足够的CPU带宽，便接纳它，并为每一个被接纳的SRT任务预留它在运行时
所需要的CPU带宽，如果已无足够的带宽，便拒绝接纳。
4.采用实时调度算法
实时调度在保证SRT任务的实时性方面起着至关重要的作用。在具有多媒体功能的操作
系统中，一个好的实时调度算法应能向每个SRT任务提供可以接受的截止时间保证，即能满
足每一个SRT任务绝大多数的截止时间需求。在SRT系统中，使用最多的两种调度算法是：
（1）速率单调算法，该算法简单有效，比较适用于周期性任务，现已被广泛应用于多
媒体系统中。
11.3.3软实时任务的接纳控制
1
为了能在任何负载情况（包含过载）下，都可以基本上保证软实时任务的截止时间要求，
需要在进程管理中新增两个重要的功能和机制：一是CPU带宽预留功能和机制：二是CPU
带宽调度功能和机制。为此，在进程管理中应配置两个重要的组件：①CPU代理（broker)
实体，它的主要功能是根据新进入系统进程的请求，确定是否接纳它作为SRT任务；②软
实时任务CPU调度实体，这是用于对SRT任务进行实时调度的程序。
1.SRT任务带宽和尽力而为任务带宽
为了能确保SRT任务的实时性，并适当考虑非实时任务的运行，将CPU的带宽分为
两部分：
（1）SRT任务带宽。把CPU的一部分带宽分配给SRT任务运行。如果SRT任务被接
纳了，它将获得（分配到）一部分SRT任务带宽，进程管理便会尽可能地保证它们的实时性。
（2）尽力而为任务带宽。如果SRT任务未能被接纳，系统则有可能将该SRT任务分配到
尽力而为任务带宽中运行，此时系统只是尽可能地让它们得到运行的机会，但不做任何保证。
这两种带宽的分配比例可视具体情况而定，如果系统中的SRT任务较多，尽力而为任
务带宽的比例将可能很小，反之则可（稍）大些。例如，两种带宽的比例可以是70%和30%，
即用70%的时间来保证SRT任务的运行。带宽比例的划分可视情况而改变，如软实时任务
带宽未能被充分使用，便可将其中的一部分重新分配给尽力而为的任务运行。
2.接纳控制
SRT任务在进入系统后，必需向CPU代理给定其定时服务质量参数，其中包含SRT
359

--- Page 371 ---
计算机操作系统
任务的运行周期(p)、每一周期中的运行时间(t)和CPU占有率u。当CPU代理收到请求后，
首先执行接纳控制。它根据一定的调度策略计算，确定是否可以接纳该任务。如果在接纳
后，不仅能够保证它所要求的截止时间需求，而且还不会影响到原有SRT任务的运行，则
CPU代理便可以接纳该进程，将它插入到进程就绪队列中等待调度。如果不能保证，将拒
绝接纳。此时请求进程可有两个选择：
（1）等待以后再次申请接纳控制，直到被接纳为止。
（2）由系统将该进程放入到尽力而为任务队列中运行。
3.CPU代理进程
CPU代理的主要任务是，接收应用程序的接纳请求，根据接纳策略，做出是否接纳的
决定，并将被接纳的进程放入就绪队列。至于应调度哪一个进程运行，则应由进程调度程
序确定。通常，系统把CPU代理进程作为一个守护进程，平时它处于睡眠状态，一旦有新
的应用程序发来接纳请求时，代理进程将被唤醒，并根据该任务的请求来确定系统是否接
纳它。如果接纳了该进程，CPU代理将为它预留足够的CPU带宽，以调度时间的形式写入
到预留表（也就是供实时调度程序使用的调度表）中。
CPU代理进程必须拥有超级用户特权，以便能够根据需要，修改被接纳进程的优先级，
固定的实时优先级。需要说明的是，接纳控制没有必要实时运行，因为对进程的接纳并不
要求实时处理，因此，CPU代理进程可采取动态优先级方式运行。然而任何SRT任务的调
度，都是通过实时进程调度程序来完成的，显然实时调度程序必须是实时进程。
4.预留策略
在基于预留策略的进程管理中，如何为SRT任务预留CPU带宽是至关重要的，涉及
到多个方面的事情。预留策略所需考虑的问题较多，下面介绍较为重要的几个问题：
1）预留模式
有两种预留模式：
（1）立即预留，一旦预留请求到达，CPU代理立刻为之服务，如果被接纳，便立即将
它放入就绪队列。
(2）高级预留，在这种预留模式中，请求进程不仅要给出进程的运行周期和利用率，
还需给出任务处理的开始时间和结束时间，CPU代理需要保留当前和未来的许多预留信息，
并考虑到调度情况，做好接纳控制。这样才有可能准确地估算出可以同时运行的SRT任务。
2）基于服务质量参数范围的预留
通常服务质量是有一定范围的，由此形成三种预留策略：
（1）最小预留策略，基于最小的服务质量参数所产生的接纳控制，该策略比较适合于
数据率比较稳定的进程，如动画。
(2）平均预留策略，基于平均的服务质量参数所产生的接纳控制，该策略比较适合于
数据偶尔出现差错的多媒体任务。
(3）最大预留策略，基于最高的服务质量参数所产生的接纳控制，该策略可以保证所
有实时任务的截止时间，即它可以获得最好的实时性保证。
360

--- Page 372 ---
第十一章多媒体操作系统
3）预留排序
应如何确定对预留的排序。有两种预留排序策略：
（1）按先来先服务策略排序，先到达的请求进程优先获得服务。
(2）按优先级排序，根据进程的优先级大小依次为所有请求进程进行服务。
111.4多媒体实时调度
的特性，如数据量大、数据速率高、要求能保证SRT任务的截止时间等，对多媒体实时调
度算法做进一步的介绍。
11.4.1最简单的实时调度方法
在多媒体服务器中，将为所播放的每一部数字电影建立一个进程。其主要任务是，不
断接收从硬盘上传送来的帧，经适当处理后，便送往屏幕。最简单的实时调度方法是，假
定所要播放的电影都具有相同的类型，如都是采用相同的制式、分辨率和压缩比的彩色数
字电影。这样，为这些电影所建立的进程可具有相同的周期和处理时间。因此，可将它们
按FCFS原则排成一个进程就绪队列，并采用定时轮转的策略来调度和运行它们。
在这样的情况下，进程调度的实现十分简单。设置系统中的定时器，每隔40ms嘀嗒
一次，让所有的进程在此时间内依次运行一次。首先选择就绪队列的队首进程运行，当它
只要系统中的进程数目不超过规定值，便能使所有进程在40ms内都执行一次。等到下一
次嘀嗒时，又重新调度队首进程运行，如此不断地循环执行。这样就能保证每部电影一帧
接一帧地正常播放。
事实上，这种最简单的实时调度方法只能用于要求不高的场合，即所播放的电影具有
相同的类型。但现实情况要复杂得多，电影的类型不同，每部电影可能采用了不同的制式、
色彩、分辨率和压缩比等。这将使不同电影的每一帧其大小相差甚多，进而导致每个进程
用于处理每部电影时，所需要的CPU时间会相差很大。此外，点播数字电影的用户数目经
常发生变化，而且还可能有许多用户点播同一部电影。这种简单的调度方法是很难满足实
际需要的。显然，此时需要一种能用于同时播放多部不同数字电影和动画的实时调度方法。
下面我们先介绍在多媒体中用得较多的速率单调调度算法。
11.4.2速率单调调度（RateMonotonicScheduling，RMS）算法
RMS算法是一个静态的、优先级驱动的算法，适用于抢占式优先级调度方式以及实时
任务是周期性的情况。在采用该算法时，系统中的进程应满足如下条件：
(1）在系统中允许同时存在周期性进程和非周期性进程，所有周期性任务具有固定的
周期。
(2）所有的进程之间相互独立，互不依赖。
(3）对于周期性进程而言，所有进程在一个周期中，所需完成的工作量是相同的，而
361


--- Page 379 ---
计算机操作系统
1.媒体服务器的服务质量
不同的SRT任务，所要求的服务质量并不完全相同。因此，一个媒体服务器应当能够
提供几种服务质量，以满足不同用户的需要。通常，可以提供如下三种服务质量保证：
（1）确定型的保证。这是最高的服务质量保证，它能完全保证SRT任务的所有截止时
间。为实现这样的保证，在接纳控制的算法中必须假定系统与实现实时性有关所有部分都
是处于最坏的情况，如磁盘的寻道时间最长、磁盘旋转延迟时间最长等。
（2）统计型的保证。它能以较高概率保证SRT任务的所有截止时间。为了实现这样的
保证，在接纳控制的算法中将假定系统与实现实时性有关所有部分都处于一般情况。
（3）尽力而为型保证。没有为SRT任务的截止时间提供任何保证，只是在完成对所有
确定型和统计型的服务之后，如果处理机还有剩余时间，才会调度这类任务运行。
2.接纳控制
对于不同的服务质量保证和不同的服务所采用的接纳控制条件是不一样的，在这里只
是讨论接纳控制条件中最基本的问题。
由磁盘送出的。在每一个周期中，每部电影都将播放一帧。每一帧包含了Ki个盘块，这样
处理机在每个周期将处理K、K2、、K、""、K序列盘块中的数据。我们必须了解媒体
服务器的传送速率能否保证SRT任务播放的实时性，为此需要进行两方面的计算：①计算
播放一帧时需要的总时间。②计算媒体服务器传送每一帧数据所需的时间，进而计算出每
一个周期需要的总时间。如果每一个周期都播放一顿时所需的总服务时间都能大于媒体服务
器在相应周期传送相关数据所需的总时间，那么就可以保证所有任务的实时性，反之则不能。
对于确定型的保证和统计型的保证，在计算方法上是完全相同的，差别仅在于所使用
的参数有所不同。对于确定型的保证，在计算中所采用的应当是最坏情况下的参数，如磁
盘的寻道时间最长，而对于统计型的保证所用的应当是统计性参数。
/11.6多媒体存储器的分配方法
在媒体服务器中，为多媒体文件分配存储空间主要考虑的问题是，如何能使磁盘上的
数据快速地传送到输出设备上，以保证SRT任务的实时性。为此采取了与传统文件服务器
截然不同的文件分配方法。
11.6.1交叉连续存放方式
1.多媒体文件存放中的问题
多媒体文件存放最重要的要求是，存放在硬盘上的数据如何能快速地传送到输出设备
上，不会发生因送出数据不及时而使屏幕上的画面发生颤动。在采用离散分配方式时，在
磁盘传输速率足够高的情况下，送出数据不够及时最主要的原因是在传输一帧的过程中需
要进行多次寻道，由于寻道和磁盘旋转延迟通常都需要数十毫秒，很难及时将数据送出。
因此，多媒体文件都采用连续文件。
368

--- Page 380 ---
第十一章多媒体操作系统
通常在一部数字电影中，每一帧中都同时包含了视频、音频和文字信息，即使其中的
每一种媒体文件都是连续文件，但如果这些文件之间未连续存储，在传输一帧信息时，还
需要从视频文件跳到音频文件，再从音频文件跳到文本文件的多次寻道。换言之，传送每
一帧信息仍然需要进行多次寻道，因而仍不能满足多媒体播放的要求。
2.交叉连续存放方式
在该方式中，不仅要求多媒体中的每个文件是连续文件，而且还需在不同文件间采取
按帧交叉的方式存放。首先存放第一帧中的视频数据，紧靠着它存放第一帧中的各种音频数
据，然后是存放第一帧中的多个文字数据，如图11-7所示。在从磁盘读出时，最简单的方法
是将每一帧中所有数据全部读出到内存的缓冲区中，然后只将用户所需之部分传送给用户。
这种存放方式的明显优点是，每一帧信息只读一次，不会发生多次寻道，因此能保证
硬盘上的数据快速传送到输出设备上，图像不会发生颤动。其缺点是，每次读出的数据中
有许多是用户并不需要的，例如，通常用户只需要一条音频和一种文字字幕，其它的音频
和文字字幕都是不需要的。这不仅增加了磁盘I/O的负担，也占用了更多的内存缓冲区。
此外，交叉连续存放方式还不能实现随机访问、快进和快退等功能。因此该方式只适用于
不要求随机访问和快进快退的简单播放方式。
第1帧
第2帧
第3帧
人
人
V
视频AAATT视频AAATT视频AAATT
音频
文本
轨迹
轨迹
图11-7交叉连续存放方式
11.6.2顿索引存放方式
：一
为了克服交叉连续存放方式的缺点，即在每一部数字电影中所包含的视频文件、音频
文件和多个文本文件都需要连续存放，而引入了索引存放方式。该方式又可分为两种：
(1）帧索引存放方式，又称为小盘块法。
(2）块索引存放方式，又称为大盘块法。
1.帧索引存放方式的基本原理
在小盘块法中，所选定的盘块大小应远小于顿的大小。对于每秒30顿的MPEG-ⅡI而
言，帧的平均大小为16KB，通常选定盘块大小仅为1KB或2KB，故将它又称为小盘块
法。这样，电影中的每一帧信息需要存放在一连串的连续盘块中。和前面一样，在这一串
连续的盘块中，仍是包含了一个视频、多个音频和多个文本文件的数据。
在系统中，为每部电影建立一个帧索引表。其中的每一个表项至少应有两个字段，一
个是地址字段，它用于存放相应帧所在盘块的始址，如第i个帧索引表项中的地址字段指
向第i帧所在盘块的始址。另一个是帧长字段，用于存放该帧的盘块数目，如11-8（a)所示。
在播放电影时，首先从帧索引表的第一帧索引表项中找到第一帧的盘块始址，从中将该帧
的内容全部读出。然后再从帧索引表的第二个帧索引表项中找到第二帧的盘块始址，再将
369

--- Page 381 ---
计算机操作系统
第二帧的内容全部读出。
帧索引
磁盘块大小
块索引
小于顿的大小
磁盘块大小
大于顿的大小
1
音频
111111111114 11E
文本
帧
P帧
未用
(a)小磁盘块
(b)大磁盘块
图11-8索引存放方式
2.帧索引存放方式的性能分析
（1）支持随机访问。由于采用了帧索引表，该方式能很好地支持随机访问。例如当我
们要读第i帧时，可以直接依据索引号i值，从帧索引表中找到相应的表项，从该表项中的
地址字段便可找到第i帧所在盘块的始址，接着将该帧读出。
（2）关于快进、快退问题。帧索引存放方式可以支持快进，但效果不一定好。为了达
到好的效果，可以专门制作一个快进文件。如果文件没有经过压缩，只要每10帧显示一帧，
便可以10倍的速度快速前进，如果希望以20倍的速度快进，只须每20顿显示一帧。当需
要快进时，系统必须能够找到快进文件，然后跳到该文件的正确地方进行播放。
（3）磁盘碎片较小。在采取帧索引存放方式时，对每一顿采用连续存放方式，最后一
个盘块可能会有一些空闲空间。但由于盘块较小，相应的磁盘碎片也较小。如果某数字电
影有N帧，每个盘块的大小为1KB，由此引I起的磁盘碎片平均为N×1/2KB。对于一部
70分钟的电影，如果每秒钟25帧，整个电影约有100K帧，其所产生的磁盘碎片平均大
约是50MB(70×60×25/2)。
（4）顿索引表大。在小盘块法中，需要为每一帧设置一个表项，由于一部电影需要很
多的帧，对于一部2小时的电影，如果每秒钟30帧，大约有216K帧（120×30×60)。因
地址为4个字节），由此可以算出帧索引表大约为1MB。帧索引表不仅要占用磁盘空间，
而且在播放时还需将它调入内存，这样又会占用很大的内存空间。
（5）缓冲管理简单。在小盘块法中由于每次操作都是读出一帧，为了提高磁盘的输出
速度，可以采用双缓冲方式，一个缓冲用于播放当前帧，另一个缓冲用于存放下一帧。当
一帧播放完后，可以立即播放另一个缓冲中的内容。
（6）存储管理复杂。由于在小盘块法中，要求为每一帧都分配一连串连续的盘块，以
使磁盘上的数据能更快地传输。此时，磁盘空闲空间的组织就不能再采用传统OS中的位
示图、链表法等，而需要用一种较为复杂的方法。
11.6.3块索引存放方式
一一一←
1.块索引存放方式的基本原理
在块索引存放方式中所选定的盘块较大，其大小应远大于一帧的大小，如256KB，以
370

--- Page 382 ---
第十一章多媒体操作系统
便在一个盘块中可以存放多个帧，故将它称为大盘块法。由于在大盘块法中每个数据块的
大小是相同的，故把这种组织称为恒定数据长度。
在大盘块法中，所配置的索引表采用的是块索引，它是以盘块号为索引，而不是以帧
号为索引。在每一个索引表项中同样需要两个字段，一个帧号字段用来存放在该块中的第
一个帧的帧号，另一个字段存放该块中所存放的帧数。另外还需要几个地址字段，用于存
放在本盘块中每一帧的盘块始址。这样通过查找盘块号，就可以找到含有指定帧的大盘块，
然后再从相应地址项中找到指定帧的盘块始址。大盘块法如图11-8(b)所示。
2.块索引存放方式的性能分析
（1）支持随机访问。块索引存放方式虽然可以实现随机访问，但要比帧索引存放方式
复杂些。例如，当我们要读第i帧时，可以直接根据索引号i，找到包含了指定帧的块索引
表项，然后，从该表项中的地址字段中，找到指定顿的盘块始址，最后便可将该顿读出。
(2）磁盘碎片较大。在采取块索引存放方式时，在一个大盘块中可以存储多个帧，当
盘块中的存储空间不足以装下后面一顿时，可采取两种处理方法：①一帧跨越两个盘块，
该方法是继续装入下一帧，直到大盘块全部装满，剩余部分再装入下一个盘块。该方法的
主要问题是，通常会发生再次寻道，影响播放质量。②让剩余部分空闲，只要不能装下后
面一帧，便让剩余的空间空着，由此会形成磁盘空间的浪费，我们把它称为内部碎片。大
盘块法可能造成比小盘块法更大的碎片。
（3）块索引表小。在采取大盘块方式时，需要为每一块设置一个块索引表项。由于每
均能存放16个帧，因此块索引表要比帧索引表小得多(1/16)。如上所述，对于一部2小时
的电影，大约有216K帧，相应地，在块索引表中只有13500个索引项，而每个表项需要
8个字节（帧的大小字段用1个字节，磁盘地址为4个字节，3个字节为帧的盘块始址），块
索引表的大小仅为100KB左右，它比帧索引表小了约90%。这不仅可明显减小所占用的
磁盘空间，而且在播放时，还可明显减小占用的内存空间。
（4）缓冲管理复杂。在大盘块法中，虽然也可以采用双缓冲方式，但两个大缓冲需占
完全不用一次将一个大盘块中的内容全部读出。对此可采用循环缓冲方式，即在系统中设
置多个缓冲，每个缓冲稍大于磁盘块的大小，将这些缓冲组成循环缓冲器，整个循环缓冲
器的容量应大于一帧的容量再加上一个盘块的容量。
11.6.4近似视频点播的文件存放
对于视频点播，用户可使用遥控器选择自己想看的电影或电视节目。但视频点播的实
现是有相当难度的，因为如果有100个用户在观看同一部新电影，而通常他们的进度都不
太可能完全相同，由此需要100个同样的新电影的数据流，这将需要大量的系统资源。而
近似视频点播则可以大大减少对系统资源的需求。
1.近似视频点播（nearvideoondemand)
近似视频点播是视频点播的一种近似，它是每隔一定时间开始一次播放。例如，从晚
8点开始第1次播出，到晚8:05开始第2次播出，8:10开始第3次播出，。如果某用户
371

--- Page 383 ---
计算机操作系统
想在8:08时看该电影，那他只须等2分钟，到8:10时便可看到。图11-9示出了近似视频
点播的数据流图。在8:05，第一个数据流处于第9000帧时，便开始第二个数据，在8:10，第
间到9:55时，开始第24个数据流。到10:00整时，第一个数据流终止，又重新从第0帧开始。
数据流
0090001800027000360004500054000630007200081000
0900018000270003600045000540006300072000
2
09000180002700036000450005400063000
3
0000000900070008100060
4
第3个数据流中
090001800020003600
5
的第9000帧数据
在8:20送出
090001800027000
6
7
0900018000
。
8
9
8:00
8:05
8:10
8:15
8:20
8:25
8:30
8:35
8:40
8:45
时间—
图11-9近似视频点播的数据流图
这样做的最大好处是，对于一部两个小时的电影，只需要24个数据流（每5分钟一个）
就能满足所有用户的需要，而用户数量基本上不受限制。如果说视频点播是出租汽车，一
招手它就来，非常方便，但需要很多的出租车才能满足要求，那么近似视频点播就像是公
共汽车，每隔一定时间就开一班车，它就能满足非常多的人的需要。在采用近似视频点播
时需要考虑两个问题：
(1）间隔时间大小。数据流之间的间隔时间应选择多长？间隔时间越小，用户的等待时
间越少，但一部电影需要的数据流也就越多。例如间隔2分钟，此时用户的最大等待时间
只有2分钟，但对于2小时的一部电影就需要60个数据流。反之，间隔时间越大，用户的
最大等待时间就越长，但一部电影需要的数据流也就越少。
(2）用户数的多少。就像是否要开通一路公交车一样，只有当需要乘这一路车的人数
达到一定数量时，才会开通该路公交车，而且人数越多，开出的班车的间隔时间也就越短。
类似地，只有当需要观看某部电影的人数达到一定数量时，才需要开通该电影的近似视频
点播，而且人数越多，间隔时间越小。
2.近似视频点播的文件存放
在近似视频点播中，即使电影文件是连续文件，但在它以24个数据流错时送出时，由
于每两个相邻的数据流都相差9000帧，因此从一条数据流转至下一个数据流时就需要进行
372

--- Page 384 ---
第十一章多媒体操作系统
寻道。但如果能采用如图11-10所示的方法，则几乎可以完全消除寻道操作。其基本思想
是，将24路数据流中的在同一时间播放的24帧依次放在一起，作为一个记录写入磁盘。
在播放时，也将它们一起读出，这样就避免了寻道。例如，在某个时刻，24路数据流刚好
开始，需要播放第0帧，23路数据流需要播放第9000帧，22路数据流需要播放第18000
帧，而21路数据流需要播放第27000帧，“，直到1路数据流需要播放第207000帧。由
于这24帧已被一起读入内存，故不存在寻道问题。
磁盘块从磁盘读出的顺序
数据流：数据流！
数据流！
数据流！
24
23
15
1
1
1
磁道1
9000
18000
27000
36000
4500054000630007200081000
207000
磁道2
9001
18001
27001
3600145001
54001
163001
81001
207001
磁道3
2
9002
18002
27002
36002
45002
254002
63002
72002
81002
.
207002
第27002顿（大约为电影的第15分钟）
图11-10近似视频点播的文件存放
11.6.5多部电影的存储方法
1.单个磁盘的情况
前面所考虑的只是在视频服务器上存储了单部电影，但实际情况往往是视频服务器上
存储了多部电影。如果这些电影被随机地存放在磁盘的各个地方，那么当多个用户需要同
时观看这些电影时，必然会造成磁头的频繁来回摆动。应如何在磁盘上存储多部电影呢？
通常，每一部电影的点击率是不同的。我们在将这些电影存储在磁盘上时，应当将电
影的流行因素考虑进去，使越流行的电影越容易被访问到。事实上，有许多流行的事物，
如流行电影、流行音乐、访问Web网页等，大体上都遵循一种可预测模式，该模式又被称
为Zipf定律。该定律可描述为：
1°2*3*4*
N
其中，C是一个常数，其值可由上式算出，当N为10、100或1000时，C值分别为0.341、
0.193和0.134。上式中的1、2、3、4等分别可以表示第1流行的电影、第2流行的电影等。
当系统中存储了1000部电影时，第1流行的电影被点击的概率为0.134，第2、3、4流行
的电影被点击的概率分别为：0.067、0.045、0.034。由此产生了一个管风琴算法(organ-pipe
algorithm)。该算法规定，将第1流行的电影存储在磁盘的中央，第2、3流行的电影存储
在第1流行的电影的两边，第4、5流行的电影又存储在第2、3流行的电影的外面两边，
如图11-11所示。
373

--- Page 385 ---
计算机操作系统
使用
频率
电影
电影
电影
电影电影电影电影电影
电影
电影
电影
10
8
6
5
7
9
11.
柱面—
图11-11多部电影按管风琴算法分布
不难看出，该算法是试图把磁头保持在磁盘的中央。当服务器上装有1000部电影时，
根据Zipf定律，排在前5名的流行电影被点播的概率之和将达到0.307。这意味着有30%
的时间，磁头是位于前五部电影的磁道上，而它们都是处于磁盘的中间部分。实践证明，
如果每一部电影都是如图11-11所示的连续文件，按管风琴算法分布的方式会工作的很好。
2.多个磁盘情况
为了满足众多用户的需要，配置在视频服务器上的磁盘系统通常都需要很大的存储容
量，因此在视频服务器上的磁盘系统，大都采用许多个磁盘来扩大磁盘系统的容量，如采
用RAID磁盘阵列。
为简单起见，假定系统中有四个磁盘，将第一部电影A全部放在磁盘1上，电影B、
C和D分别全部放在磁盘2、3和4上，如图11-12（a）所示。这种存放方式实现简单，故障
特性简单明了，如果某一个磁盘发生故障，在该盘上的电影信息可能丢失，问题并不严重，
因为还可从DVD再装入到另一个盘中。这种存放方式的缺点是，各个磁盘上的负荷与电
影的流行程度有关，可能会很不均衡。另一种存放方式是将一部电影分为几部分，分别存
入一个磁盘中，这样在磁盘1上同时存放了A、B、C、D四部电影的一部分。同样，在磁
盘2上也同时存放了A、B、C、D四部电影的一部分，如图11-12(b）所示。由于每部电影
都是从头开始的，故该方式可能会引起磁盘1的负荷增加。进一步改进是采取交叉存放，
25
3
4
2
3
4
磁盘
A0
BO
CO
A1
A2B45
A7
D4
D5
D7
(a)无条带
(b)采用相同的条带模式
2
④
26日6048
D1
D2
D3
D5
D6
D7
D4
D6
D5
D4
D7
(c)交错条带
(d)随机条带
图11-12在多个磁盘上的存放方式
374

--- Page 386 ---
第十一章多媒体操作系统
将每一部电影的起始部分放入不同的盘中，如图11-12(c)所示。第四种存放方式是采取随
机存放，如图 11-12(d)所示。
/11.7高速缓存与磁盘调度
NE
与传统OS一样，在多媒体系统中，同样需要在内存中设置高速缓存，以解决因磁盘
速度低而影响系统性能的问题。但在多媒体系统中，高速缓存的作用已与传统的操作系统
有很大的不同。另外，多媒体系统对磁盘调度提出的要求，也与传统的OS有很大的差异。
本节将对多媒体系统中高速缓存和磁盘调度做扼要阐述。
11.7.1高速缓存
一
对于传统的OS，在内存中设置高速缓存的主要目的，是为了减少对磁盘的访问时间。
所采取的方法是将那些在不久之后可能会被访问的盘块数据放入到高速缓存中，以便以后
需要时，可直接从高速缓存中读取，这样就节省了对磁盘的访问时间。然而在播放一部电
影时，通常是从头到尾顺序访问，除了某些特殊情况，如重看等，一个盘块一般不会使用
两次，因此传统高速缓存技术是不可取的。但高速缓存在多媒体系统中仍有其可用之处。
1.块高速缓存
虽说当一个用户在看一部电影时，刚放过的盘块不会被重用，但如果是有多个用户几
乎同时在看一部电影，刚放过的盘块则可能会被多次重用。例如，第一个用户于晚8点开
始观看，第二个用户8：01开始看，这样第一个用户看过的内容在1分钟后，就要被第二个
用户使用。换言之，当有多个用户几乎同时在看一部电影时，将已看过的部分放入高速缓
存是非常有效的方法。为了管理上的方便，应该在那些有多个用户几乎同时观看的电影上
标上“可高速缓存”的标记，而其它的电影就不需要高速缓存了。
2.将两条视频流合并
如果两条视频流在时间上相差很少，我们可以对两条视频流进行合并。例如，第一个
用户在晚8点观看一部电影，第二个用户在过了10秒后观看同一部电影。虽说我们可以利
用高速缓存来保留10秒钟已放过的电影，但这会要求占据很大的存储空间。一个行之有效
的方法是通过改变两部电影的播放频率，将两条视频数据流进行合并，使其成为一条视频
数据流，如图11-13所示。
图中，两部电影均以每分钟1800帧的速度播放，用户1所看电影的视频流在前，用户
2所看电影的视频流在后，为了能将这两个视频流合并，可以放慢用户1电影视频流的速
度，从每分钟1800帧降为1750帧，反之加快用户2电影视频流的速度，从每分钟1800帧
升为1850帧。在3分钟后，它们都处在第5550帧。此时可以将两个视频流合并为一个视
频流，以每分钟1800帧的正常速度播放。在此期间用户1的视频流速度放慢了2.8%，用
户2的视频流速度加快了2.8%，通常用户是感觉不出来的。
另外一个合并视频流的方法是，在用户1所播放的电影中适当地插播一些广告，用户
2仍以正常速度播放电影，经过一段时间后用户2的视频流就会赶上用户1的视频流，以
后就可以只播放一条视频流。
375


--- Page 403 ---
计算机操作系统
(2）注册部分。系统中配置一张注册表，每个注册用户在表中都有一个记录，记录中
至少有两项，其中一项用于存放用户姓名，另一项用于存放用户特征样本。
（3）识别部分。第一步是要求用户输入用户登录名；第二步是把用户的生物特征与用
户记录中的用户特征样本信息进行比较，若相同便允许用户登录，否则拒绝登录。
3.指纹识别系统
20世纪80年代指纹自动识别系统虽已在许多国家使用，但体积较大。直至90年代中
期，随着VLSI的迅速发展，才使指纹识别系统小型化，使该技术进入了广泛应用的阶段。
（1）指纹采集传感器。实现指纹采集的硬件是指纹传感器，它是指纹识别系统的重要
组成部分。对指纹采集传感器的主要要求是，成像质量好，防伪能力强，体积小，价格便
宜。指纹图像采集质量的好坏，将会直接影响到所形成的指纹图像的质量。目前市场上的
指纹采集传感器有多种类型。其中光学式和压感式指纹采集传感器应用较广。
（2）指纹识别系统。随着微处理器和各种电子元器件成本的迅速下降，我国已开发出
芯片进行图像处理，并可将指纹的录入、指纹的匹配等处理功能全部集成在其大小还不到
半张名片的电路板上。指纹录入的数量可达数干至数方枚，而搜索数干枚指纹的时间还不
到一分钟。指纹识别系统已经在我国不少单位获得应用。
/12.4来自系统内部的攻击
攻击者对计算机系统进行攻击的方法有多种，可将之分为两大类：内部攻击和外部攻
击。内部攻击一般是指攻击来自系统内部。它又可进一步分为两类：
（1）以合法用户身份直接进行攻击。攻击者通过各种途径先进入系统内部，窃取合法
所拥有的权限，读取、修改、删除系统中的文件，或对系统中的其它资源进行破坏。
(2）通过代理功能进行间接攻击。攻击者将一个代理程序置入被攻击系统的一个应用
程序中。当应用程序执行并调用到代理程序时，它就会执行攻击者预先设计的破坏任务。
12.4.1早期常采用的攻击方式
我们先介绍常用的内部攻击方式。在设计操作系统时必须了解这些攻击方式，并采取
必要的防范措施。
(1）窃取尚未清除的有用信息。在许多OS中，在进程结束归还资源时，在有的资源中
可能还留存了非常有用的信息，但系统并未清除它们。攻击者为了窃取这些信息，会请求
调用许多内存页面和大量的磁盘空间或磁带，以读取其中的有用信息。
(2）通过非法的系统调用搅乱系统。攻击者尝试利用非法系统调用，或者在合法的系
统调用中使用非法参数，还可能使用虽是合法、但不合理的参数来进行系统调用，以达到
搅乱系统的目的。
(3）使系统自己封杀校验口令程序。通常每个用户要进入系统时，必须输入口令，攻
击者为了逃避校验口令，登录过程中他会按DEL或者BREAK键等。在这种情况下，有的
392

--- Page 404 ---
第十二章保护和安全
系统便会封杀掉校验口令的程序，即用户无需再输入口令便成功登录。
（4）尝试许多在明文规定中不允许做的操作。为了保证系统的正常运行，在OS手册中
会告知用户，有哪些操作不允许用户去做。然而攻击者恰反其道而行之，专门去执行这些
不允许做的操作，企图破坏系统的正常运行。
（5）在OS中增添陷阱门。攻击者通过软硬兼施的手段，要求某个系统程序员在OS中
陷阱门作详细介绍。
帮助查出某个用户的口令。在必要时攻击者还可通过贿赂的方法，来获取多个用户的口令。
一旦获得这些用户的口令后，便可用合法用户的身份进入系统。
12.4.2逻辑炸弹和陷阱门
近年来更流行利用恶意软件进行攻击的攻击方式。所谓恶意软件（malware)，是指攻击
者专门编制的一种程序，用来造成破坏。它们通常伪装成合法软件，或隐藏在合法软件中，
使人们难以发现。有些恶意软件还可以通过各种方式传播到其它计算机中。依据恶意软件
是否能独立运行可将它分为两类：
（1）独立运行类：它可以通过OS调度执行。这类恶意软件有蠕虫、僵户等。
(2）寄生类：它本身不能独立运行，经常是寄生在某个应用程序中。下面即将介绍的
逻辑炸弹、特洛伊木马、病毒等就属于寄生类恶意软件。
1.逻辑炸弹（logicbomb)
1）逻辑炸弹实例
逻辑炸弹是较早出现的一种恶意软件，它最初出自于某公司的程序员，是为了应对他
口令，该程序就不会发作。但如果程序员在事前未被警告，就突然被解雇时，在第二天（或
第二周）由于得不到口令，逻辑炸弹就会引爆一执行一段带破坏性的程序，这段程序通常会
使正常运行的程序中断，随机删除文件，或破坏硬盘上的所有文件，甚至于引发系统崩溃。
2）逻辑炸弹爆炸的条件
每当所寄生的应用程序运行时，就会运行逻辑炸弹程序，它会检查所设置的爆炸条件是
否满足，如满足就引发爆炸；否则继续等待。触发逻辑炸弹爆炸的条件有很多，较常用的有：
（1）时间触发，即规定在一年中或一个星期中的某个特定的日期爆炸；
(2）事件触发，当所设置的事件发生时即引发爆炸，比如发现了所寻找的某些文件；
(3）计数器触发，计数值达到所设置的值时都会引发爆炸。恶意软件是一种极具破坏
性的软件，但它不能进行自我复制，也不会感染其它程序。
2.陷阱门（trapdoor)
1）陷阱门的基本概念
通常，当程序员在开发一个程序时，都要通过一个验证过程。为了方便对程序的调试，
程序员希望获得特殊的权限，以避免必需的验证。陷阱门其实就是一段代码，是进入一个
程序的隐蔽入口点。有此陷阱门，程序员可以不经过安全检查即可对程序进行访问，也就
393

--- Page 405 ---
计算机操作系统
是说，程序员通过陷阱门可跳过正常的验证过程。长期以来，程序员一直利用陷阱门来调
试程序并未出现什么问题。但如果被怀有恶意的人用于未授权的访问，陷阱门便构成了对
系统安全的严重威胁。
2）陷阱门实例
我们通过一个简单的例子来说明陷阱门。正常的登录程序代码如图12-6(a)所示，该程
序最后两句的含意是，仅当输入的用户名和口令都正确时，才算用户登录成功。但如果我
们将该程序的最后一条语句稍作修改，得到如图12-6(b)所示的登录程序代码，此时最后两
句的含意已改变为：当输入的用户名和口令都正确时，或者使用登录名为“zzzzz”时，无
论用什么口令，都能成功登录上机。
while(TRUE)
while(TRUE)
printf(“login:”);
printf(“login: ” );
get_string(name):
get _string(name);
disable_echoingO;
disable_echoingO:
printf( “password:”);
printf( “password: " ):
get_string(password);
get_string(password);
enable_echoingO:
enable_echoingO:
v=check_validity(name, password):
v=check_validity(name,password);
if(v)break:
if (vlstrcmp(name,“zzzzz”)=0 break;
execute_shell(name);
execute_shell(name);
(a)正常的登录程序代码
(b)插入了陷阱门后的代码
图12-6陷阱门实例
通过使用陷阱门，极大地方便了程序员。程序员在调试多台计算机时，若按正常方法，
必须先在每台计算机上进行注册，然后再输入自已的用户名和口令。如果需要调试的机器
非常多，对程序员而言，显然是不方便的。因此，如果程序员将陷阱门放入到某公司生产
的所有计算机中，并随之一起交付给用户，那么，以后该程序员不用再进行注册，即可成
功登录到该公司生产的任一台机器上。
12.4.3特洛伊木马和登录欺骗
1.特洛伊木马(trojanhorses)的基本概念
特洛伊木马是指一种恶意软件，它是一个嵌入到有用程序中的、隐蔽的、危害安全的
程序。当该程序执行时会引发隐蔽代码执行，产生难以预期的后果。由于特洛伊木马程序
可以继承它所依附的应用程序标识符、存取权限以及某些特权，因此它能在合法的情况下
执行非法操作，如修改、删除文件，或者将文件复制到某个指定的地方。又如特洛伊木马
程序可以改变所寄存文件的存取控制属性，若将属性由只读改为读/写，便可使那些未授权
用户对该文件进行读/写，即改写该文件。特洛伊木马本身是一个代理程序，它是在系统内
部进行间接攻击的一个典型例子，其宿主完全可以不在被攻击的系统中。为了避免被发现，
特洛伊木马对所寄生程序的正常运行不会产生明显的影响，因此用户很难发现它的存在。
2.特洛伊木马实例
编写特洛伊木马程序的人，将其隐藏在一个新游戏程序中，并将该游戏程序送给某计
394

--- Page 406 ---
第十二章保护和安全
算机系统的系统操作员。操作员在玩新游戏程序时，前台确实是在玩游戏，但隐藏在后台
运行的特洛伊木马程序却将系统中的口令文件复制到该骇客的文件中。虽然口令文件是系
统中非常保密的文件，但操作员在游戏时是在高特权模式下运行的，特洛伊木马就继承了
系统操作员的高特权，因此它就能够访问口令文件。又如在文本编辑程序中隐蔽的特洛伊
木马，会把用户正在前台编辑的文件悄悄地复制到预先设定的某个地方，以便以后能访问它。
但并不会过分影响用户所进行的文本编辑工作，使用户很难发现自己的文件已被复制。
3.登录欺骗（loginspoofing）
我们以UNIX系统为例来说明登录欺骗。攻击者为了进行登录欺骗，写了一个欺骗登
录程序，该程序同样会在屏幕显示Login：，用于欺骗其他用户进行登录。当有一用户输入
登录名后，欺骗登录程序也要求它输入口令。然后却把刚输入的登录名和口令写入一份事
先准备好的文件中，并发出信号以请求结束shell程序，于是欺骗登录程序退出登录，同时
也去触发真正的登录程序。在屏幕上又显示出“Login：”，此时真正的登录程序开始工作。
对用户而言，他自然以为是自已输入发生了错误，系统要求重新输入。在用户重新输入后
系统开始正常工作，因此用户认为一切正常。但用户的登录名和口令已被人窃取。窃取者
可用同样的方法收集到许多用户的登录名和口令。
12.4.4
缓冲区溢出
由于C语言编译器存在着某些漏洞，如它对数组不进行边界检查。例如下面的代码是
不合法的，数组范围是1024，而所包含的数字却有12000个。然而在编译时却未对此检查，
攻击者可以利用此漏洞来进行攻击。
int i;
char C[1024];
i=12000;
c[i]=0;
上述错误会造成有10976个字节超出了数组C所定义的范围，由此可能导致难以预测
的后果。由图12-7(a)可以看到，主程序运行时它的局部变量是存放在堆栈中的。当系统调
用过程A，将返回地址放入堆栈后，便将控制权交于A。假定A的任务是请求获得文件的
路径名，为能存放文件路径名，系统为A分配一个固定大小的缓冲区B，如图12-7(b）所示。
虚拟地址空间
虚拟地址空间
虚拟地址空间
OxFFFF..
主程序的
主程序的
主程序的
堆栈
局部变量
局部变量
局部变量
堆栈
返回地址
返回地址
指针
A的局部
A的局部
变量
变量
SP
SP
缓冲区B
缓冲区B
程序
程序
程序
(a)最初情况
(b)调用A后的情况
(c)缓冲区溢出后的情况
图12-7缓冲区溢出前后的情况
395

--- Page 407 ---
计算机操作系统
超过1024个，就会发生缓冲区溢出，所溢出的部分将会覆盖图12-7（c)所示的灰色区域，
并有可能进一步将返回地址覆盖掉，由此产生一个随机地址。一旦发生这样的情况，程序
返回时将跳到随机地址继续执行，通常会在几条指令内引起崩溃。一种更为严重的情况是，
攻击者经过精心计算，将它所设计的恶意软件的起始地址覆盖在原来在栈中存放的返回地
址上，把恶意软件本身也推入栈中。这样当从A返回时，便会去执行恶意软件。
产生该漏洞的原因是，C语言缺乏对用户输入字符长度的检查。因此最基本的有效方
法是对源代码进行修改，增加一些以显式方式检查用户输入的所有字符串长度的代码，以
避免将超长的字符串存入到缓冲区中，该方法对用户是不方便的。还有一种非常有效的方
法是，修改处理溢出的子程序，对返回地址和将要执行的代码进行检查，如果它们同时都
在栈中，就发出一个程序异常信号，并中止该程序的运行。上述方法已在最新推出的某些
操作系统中采用。顺便说明，缓冲区溢出也被用做系统外部的攻击手段，如在下一节中将
介绍的蠕虫，就是利用了缓冲区溢出这一漏洞。
/12.5来自系统外部的攻击
近年来随着Intermet应用的迅速普及，来自系统外部的威胁亦日趋严重，使联网机器很
容易受到远在万里之外发起的攻击。常用的外部攻击方式是将一段带有破坏性的代码通过
网络传输到目标主机，在那里等待时机，时机一到便执行该段代码进行破坏。
12.5.1病毒、蠕虫和移动代码
当前最严重的外来威胁是病毒、蠕虫和移动代码等。其中尤其是病毒和蠕虫，天天都
在威胁着系统的安全，以致在广播、电视中，都不得不经常发布病毒和蠕虫的警告消息。
1.病毒（viruses)
计算机病毒是一段程序，它能把自己附加在其它程序之中，并不断地自我复制，然后
去感染其它程序，它能由被感染的程序和系统传播出去。一般的病毒程序并不长，用C语
言编写的病毒程序通常不超过一页。称这段程序为病毒，是因为它非常像生物学上的病毒：
它能自我生成成千上万的与原始病毒相同的复制品，并将它们传播到各处。计算机病毒也
可在系统中复制出千千万万个与它自身一样的病毒，并把它传播到各个系统中去。
2.蠕虫（worms)
蠕虫与病毒相似，也能进行自我复制，并可传染给其它程序，给系统带来有害的影响，
都属于恶意软件。但它与病毒有所区别，其一是：蠕虫本身是一个完整的程序，能作为一
个独立的进程运行，因而它不需要寄生在其它程序上。再者，蠕虫的传播性没有病毒的强。
网络蠕虫由两部分组成，即引导程序和蠕虫本身，这两部分是可以分开独立运行的。
为了能感染网络中的其它系统，需要借助于网络工具作为载体，如电子邮件功能。蠕虫可
396


--- Page 407 ---
计算机操作系统
超过1024个，就会发生缓冲区溢出，所溢出的部分将会覆盖图12-7（c)所示的灰色区域，
并有可能进一步将返回地址覆盖掉，由此产生一个随机地址。一旦发生这样的情况，程序
返回时将跳到随机地址继续执行，通常会在几条指令内引起崩溃。一种更为严重的情况是，
攻击者经过精心计算，将它所设计的恶意软件的起始地址覆盖在原来在栈中存放的返回地
址上，把恶意软件本身也推入栈中。这样当从A返回时，便会去执行恶意软件。
产生该漏洞的原因是，C语言缺乏对用户输入字符长度的检查。因此最基本的有效方
法是对源代码进行修改，增加一些以显式方式检查用户输入的所有字符串长度的代码，以
避免将超长的字符串存入到缓冲区中，该方法对用户是不方便的。还有一种非常有效的方
法是，修改处理溢出的子程序，对返回地址和将要执行的代码进行检查，如果它们同时都
在栈中，就发出一个程序异常信号，并中止该程序的运行。上述方法已在最新推出的某些
操作系统中采用。顺便说明，缓冲区溢出也被用做系统外部的攻击手段，如在下一节中将
介绍的蠕虫，就是利用了缓冲区溢出这一漏洞。
/12.5来自系统外部的攻击
近年来随着Intermet应用的迅速普及，来自系统外部的威胁亦日趋严重，使联网机器很
容易受到远在万里之外发起的攻击。常用的外部攻击方式是将一段带有破坏性的代码通过
网络传输到目标主机，在那里等待时机，时机一到便执行该段代码进行破坏。
12.5.1病毒、蠕虫和移动代码
当前最严重的外来威胁是病毒、蠕虫和移动代码等。其中尤其是病毒和蠕虫，天天都
在威胁着系统的安全，以致在广播、电视中，都不得不经常发布病毒和蠕虫的警告消息。
1.病毒（viruses)
计算机病毒是一段程序，它能把自己附加在其它程序之中，并不断地自我复制，然后
去感染其它程序，它能由被感染的程序和系统传播出去。一般的病毒程序并不长，用C语
言编写的病毒程序通常不超过一页。称这段程序为病毒，是因为它非常像生物学上的病毒：
它能自我生成成千上万的与原始病毒相同的复制品，并将它们传播到各处。计算机病毒也
可在系统中复制出千千万万个与它自身一样的病毒，并把它传播到各个系统中去。
2.蠕虫（worms)
蠕虫与病毒相似，也能进行自我复制，并可传染给其它程序，给系统带来有害的影响，
都属于恶意软件。但它与病毒有所区别，其一是：蠕虫本身是一个完整的程序，能作为一
个独立的进程运行，因而它不需要寄生在其它程序上。再者，蠕虫的传播性没有病毒的强。
网络蠕虫由两部分组成，即引导程序和蠕虫本身，这两部分是可以分开独立运行的。
为了能感染网络中的其它系统，需要借助于网络工具作为载体，如电子邮件功能。蠕虫可
396

--- Page 408 ---
第十二章保护和安全
向网络中其它系统发送一份电子邮件，在附件中带上蠕虫引导程序的副本；又如远程登录
功能，蠕虫可作为一个用户到远程系统上登录，在此过程中便将蠕虫引导程序的副本从一
个系统复制到远程系统，蠕虫的新副本便在远程系统上运行。
当蠕虫引导程序的副本由源计算机进入被攻击的计算机中，并开始运行时，它会在源
计算机和被攻击的计算机之间建立连接，然后上载蠕虫本身，在蠕虫找到隐身处后，就开
始查看被攻击计算机上的路由表，以期再将引导程序副本通过电子邮件等方式传播到相连
接的另一台机器上，开始新一轮的感染。
3.移动代码
1）移动代码简述
在因特网上，如果能在远程计算机上执行代码，便认为系统具有远程执行功能。如果
一个程序在运行时，能在不同机器之间来回迁移，那么该程序就被称为移动代码。在现在
的网页中，有越来越多的网页包含了小应用程序。当人们下载包含有小应用程序的网页时，
小应用程序也会一起进入自己的系统。这种能在计算机系统之间移动的小应用程序就是一
种移动代码。另外，为了适应电子商务的需要还出现了一种移动代码。移动代码是一段代
表用户的程序，用户利用它到指定计算机上去执行某任务，然后返回报告执行情况。
2）移动代码的安全运行
占用该进程的内存空间，并作为合法用户的一部分运行，拥有用户的访问权限。这样显然
不能保证系统安全。因为别有用心的人完全可以借助于移动代码的帮助进入到其它系统，
以合法用户的身份进行窃取和破坏。为此，必须采取相应措施来保证移动代码的安全运行。
3）防范移动代码的方法———沙盒法
沙盒法的基本思想是采用隔离方法。具体做法是把虚拟地址空间，分为若干个相同大
小的区域，每个区域称为一个沙盒。例如对于32位的地址空间，可将它分为512个沙盒，
每个大小为8MB。将不可信程序放入一个沙盒中运行，如果发现盒内程序要访问盒外的数
据，或者有跳转到盒外某个地址去运行的任何企图，系统将停止该程序的运行。
可采取类似于分页的方法来实现沙盒。把虚地址分为两部分(b，w)，其中w的位数表示
一个沙盒的大小，而b用于表示沙盒的编号。当把一个沙盒S(b，w)分配给某程序A后，由
A所生成的任何地址，都将检查其高位是否与b相同，若相同，则表示地址有效；否则说
明该地址已超出指定沙盒的范围，便立即终止它的运行。
4）防范移动代码的方法—解释法
解释法是对移动代码的运行采取解释执行方式。解释执行的好处是，每一条语句在执
行前都经解释器检查，特别是对移动代码所发出的系统调用进行检查。若移动代码是可信
的(来自本地硬盘)，就按正常情况进行处理；否则(如来自因特网)，就将它放入沙盒中来限
制它的运行。现在Web浏览器就是采用该方法。
12.5.2计算机病毒特征和类型
当前对计算机威胁最大的要算是病毒和蠕虫。由于它们有着相似的特性，我们在以后
就不再把它们分开介绍，都称之为病毒。
397

--- Page 409 ---
计算机操作系统
1.计算机病毒的特征
计算机病毒与一般的程序相比，显现出以下四个明显的特征：
（1）寄生性。早期病毒覆盖在正常程序上，这样程序将无法运行，病毒很快就会被用
户发现。现在大多数病毒都采用寄生方法，只是附着在正常程序上，在病毒发作时原来程
序仍能正常运行，以致用户不能及时发现。
(2）传染性。为了能给系统带来更大的危害，病毒将不断地进行自我复制，以增加病
毒的数量。病毒的复制品被放置在其它文件中，这些文件便含有了该病毒的一个克隆，而
它也同样会再传染给其它的文件，如此不断地传染使病毒迅速蔓延开来。
(3）隐蔽性。为了避免被系统管理员和用户发现，以及逃避反病毒软件的检测，病毒
的设计者通过多种手段来隐藏病毒，使病毒能在系统中长期生存。主要隐藏方法有：①伪
装成正常程序；②隐藏在正常程序中或程序不太去访问的地方；③病毒自身不断地改变
状态或产生成千上万种状态等。
（4）破坏性。如前所述，病毒的破坏性可表现在占用系统空间和处理机时间，对系统
中文件造成破坏，使机器运行发生异常情况。
2.计算机病毒的类型
（1）文件型病毒。我们把寄生于文件中的病毒称为文件型病毒。病毒程序依附在可执
行文件的前面或后面，但要从文件的前端装入病毒，会涉及到文件头中的许多选项，有一
定难度，故大多数病毒是从程序的后面装入，再把文件头中的起始地址指向病毒的始端。
情况。当受感染的程序执行时，病毒将寻找其它可执行文件继续散播。病毒在感染其它文
件时，通常是有针对性的，有的病毒是针对com文件，或是针对exe文件等。
病毒
病毒
病毒
可执行
病毒
程序
可执行
可执行
程序
病毒
程序
病毒
起始地址
头
头
头
头
(a)
(a)
(a)
(a)
图12-8病毒附加在文件中的情况
(2）内存驻留病毒。这原本也是一种文件型病毒，但它一旦执行便占据内存驻留区，通常
选择在内存的上端或下端的中断变量位置中不会使用的部分。有的病毒为避免其所占据的内
存被其它程序覆盖，还会改变操作系统的RAM位图，给系统一个错觉，认为相应部分内存已
分配，便不再分配。为能使自己频繁执行，通常内存驻留病毒会把陷阱或中断向量的内容复
制到其它地方去，而把自己的地址放入其中，使中断或陷阱指向病毒程序的入口。
(3）引导扇区病毒。病毒也会寄生于磁盘中，用于引导系统的引导区。当系统开机时
病毒便借助于引导过程进入系统。引导型病毒又可分为两种：①迁移型病毒，会把真正的
398

--- Page 410 ---
第十二章保护和安全
引导扇区复制到磁盘的安全区域，以便在完成操作后仍能正常引导操作系统；②替代型病
毒，会取消被入侵扇区的原有内容，而将磁盘必须用到的程序段和数据融入到病毒程序中。
（4）宏病毒。许多软件都允许用户把一串命令写入宏文件，以便用户可以按一次键就
能执行多条命令。宏病毒便是利用软件所提供的宏功能，将病毒插入到带宏的doc文件或
dot文件。由于宏允许包含任何程序，因此也就可以做任何事情，这样宏病毒也就可以肆意
妄为，导致系统中的其它各部分被破坏等。
(5）电子邮件病毒。第一个电子邮件病毒是嵌入在邮件附件中的Word宏病毒。只要接
收者打开邮件中的附件，Word宏病毒就会被激活，它将把自身发送给该用户邮件列表中的
每个人，然后进行某种破坏活动。后来出现的电子邮件病毒被直接嵌入到邮件中，只要接
收者打开含有该病毒的邮件，病毒就会被激活。由于电子邮件病毒是通过网络传播的，因
此使病毒的传播速度显著地加快。
12.5.3病毒的隐藏方式
一---←
病毒和反病毒技术是“李生兄弟”。为使病毒能长期生存，病毒设计者采取了多种隐藏
方式让病毒逃避检测。反病毒专家必须了解病毒的隐藏方式，才能更快地找到病毒。
1.伪装
当病毒附加到正常文件后会使被感染文件发生变化，为了逃避检测，病毒将把自已伪
装起来，使被感染过的文件与原有文件一样。常见的伪装方式有两种：
（1）通过压缩法伪装。当病毒被附加到某个文件上后，会使文件长度变长，因此人们
可通过文件长度的改变来发现病毒。病毒设计者为了伪装病毒，必然通过压缩技术使被感
染病毒的文件长度与原有文件的长度一致。在使用压缩方法时，在病毒程序中应包含压缩
程序和解压缩程序，如图12-9所示。
文件变长
病毒
原有长度
未使用
可执行
可执行
程序
程序
解压缩过程
压缩过程
被压缩的
可执行
程序
文件头
文件头
文件头
(b)被感染的程序
(c)已被压缩的被感染程序
(a)一段程序
图12-9病毒伪装示意图
(2）通过修改日期或时间来伪装。被感染病毒的文件在文件的日期和时间上自然会有
399

--- Page 411 ---
计算机操作系统
所改变，因此，从反病毒的角度上，可通过检测文件的修改日期和时间有无变化，来确定
该文件是否感染上病毒；反之，病毒程序的设计者也会修改被感染病毒文件的日期和时间，
使之与原文件相同，以伪装病毒。
2.隐藏
的隐藏方法有以下几种：
（1）隐藏于目录和注册表空间。在OS的根目录区和注册表区通常会留有不小的剩余空
间，这些都是病毒隐藏的好地方。
(2）隐藏于程序的页内零头里。一个程序段和数据段可被装入若干个页面中，通常在
最后一页会有页内零头，病毒就隐藏在这些零头中，当病毒占用多个零头时，可用指针将
它们链接起来。该隐藏方式不会改变被感染文件的长度。
（3）更改用于磁盘分配的数据结构。病毒程序可为真正的引导记录扇区和病毒自身重
会被发现也不会被覆盖。
(4）更改坏扇区列表。病毒程序把真正的引导记录扇区和病毒程序分配到磁盘的任意
空闲扇区，然后就把这些扇区作为坏扇区，相应地修改磁盘的坏扇区列表。这样也就可逃
避反病毒软件的检测。
3.多形态
多形态病毒在进行病毒复制时采用了较为复杂的技术，使所产生的病毒在功能上是相
同的，但形态各异，病毒的形态少者数十种，多则成干上万，然后将这些病毒附加到其它
尚未感染的文件上。常用的产生多态病毒的方法有：
（1）插入多余的指令。病毒程序可以在它所生成的病毒中随意地插入多条多余的指令，
或改变指令的执行顺序，使所复制的病毒程序发生变异。
(2）对病毒程序进行加密。在病毒程序中设置一个变量引擎来生成一个随机的密钥，
用来加密病毒程序，随着每次加密时密钥的不同，使所生成的病毒形态各异。
12.5.4病毒的预防和检测
对于病毒最好的解决方法是预防，不让病毒侵入系统。但要完全做到这一点是困难的，
特别是对于连接到互联网上的系统几乎是不可能的。因此还需要非常有效的反病毒软件来
检测病毒，将它们消除。
1.病毒的预防
用户可用哪些方法来预防病毒呢？下面列出若干方法和建议供参考。
(1）对于重要的软件和数据，应当定期备份到外部存储介质上，这是确保数据不丢失
的最佳方法，当发现病毒后可用该备份来取代被感染的文件。
(2）使用具有高安全性的OS，这样的OS具有许多安全保护措施来保障系统的安全，
使病毒不能感染到系统代码。
(3）使用正版软件，应当知道，从网上Web站点下载软件的做法是十分冒险的，即使
是必须下载的，也要使用最新的防病毒软件，防范病毒的入侵。
400

--- Page 412 ---
第十二章保护和安全
(4）购买性能优良的反病毒软件，按照规定要求使用，并定期升级。
（5）对于来历不明的电子邮件不要轻易打开。
(6）要定期检查硬盘及U盘，用反病毒软件来清除其中的病毒。
2.基于病毒数据库的病毒检测方法
通过被感染文件的长度或者日期和时间的改变来发现病毒的方法在早期还可奏效，而
现在这种检测方法虽然很难再有效，但伪装病毒还是难于逃避基于病毒数据库的病毒检测
方法的检查，该方法描述如下：
（1）建立病毒数据库。为了建立病毒数据库，首先应采集病毒的样本。为此，设计了
病毒数据库中所收集病毒样本的种类越多，用此方法去检测病毒的成功率也就越高。
（2）扫描硬盘上的可执行文件。将反病毒软件安装到计算机后，便可对硬盘上的可执
行文件进行扫描检查，看是否有与病毒数据库中样本相同的病毒，若发现有便将它清除。
但这种用可执行文件与病毒数据库中的病毒样本严格匹配的方式进行检测，却可能会漏掉
其它多种形态的病毒。
解决的方法是采用模糊查询软件，即使病毒有所变化，只要变化不是太大（如不超过三个
字节），都可以将它们检测出来。但模糊查询方法不仅使查询速度减慢，而且还会导致病毒扩
大化，以致使人们会把某些正常程序也误认为是病毒。一个比较完善的方法是使扫描软件能
3.完整性检测方法
完整性检测程序首先扫描硬盘，检查是否有病毒，当确信硬盘“干净”时，才正式工
作。这种方法首先计算每个文件的检查和，然后再计算目录中所有相关文件的检查和，将
所有检查和写入一个检查和文件中。在检测病毒时，完整性检测程序将重新计算所有文件
的检查和，并分别与原来文件的检查和进行比较，若不匹配，就表明该文件已被感染上病
查和文件中的正常值。为保证检查和文件中数据不被更改，应将检查和文件隐藏起来，更
好的方法是对检查和文件进行加密，而且把加密密钥直接做在芯片上。
112.6可信系统（TrustedSystem)
20 世纪70年代初，AndersonJP首先提出可信系统概念。当时对可信系统的研究主要
集中在OS的自身安全机制和支撑它的硬件环境上。为了能促成新一代可信硬件运算平台
的早日诞生，1999年10月由Intel、IBM、HP、Microsoft等公司成立了一个“可信计算平
台联盟”（TCPA)组织。该组织提出可信系统应包括可用性、可靠性、安全性、可维护性、
健壮性等多个方面。2003年4月，TCPA又重组为“可信计算组”TCG。
12.6.1访问矩阵模型和信息流控制模型
一一一一一一一
建立可信系统的最佳途径是保持系统的简单性。然而系统设计者认为，用户总是希望
401
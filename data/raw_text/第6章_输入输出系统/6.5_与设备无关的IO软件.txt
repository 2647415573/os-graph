

--- Page 209 ---
计算机操作系统
域，或者相反时，则须由CPU分别发出多条IVO指令及进行多次中断处理才能完成。
IO通道方式是DMA方式的发展，它可进一步减少CPU的干预，即把对一个数据块
的读(或写)为单位的干预，减少为对一组数据块的读(或写)及有关的控制和管理为单位的干
预。同时，又可实现CPU、通道和IVO设备三者的并行操作，从而更有效地提高整个系统
的资源利用率。例如，当CPU要完成一组相关的读（或写)操作及有关控制时，只需向I/O
通道发送一条IO指令，以给出其所要执行的通道程序的首址和要访问的IO设备，通道
接到该指令后，通过执行通道程序便可完成CPU指定的IVO任务。
2）通道程序
通道是通过执行通道程序并与设备控制器共同实现对IO设备的控制的。通道程序是
由一系列通道指令（或称为通道命令）所构成的。通道指令与一般的机器指令不同，在它的
每条指令中都包含下列诸信息：
（1）操作码，它规定了指令所执行的操作，如读、写、控制等操作。
(2）内存地址，标明字符送入内存(读操作)和从内存取出(写操作)时的内存首址。
（3）计数，表示本条指令所要读（或写）数据的字节数。
（4）通道程序结束位P，用于表示通道程序是否结束。P=1表示本条指令是通道程序的
最后一条指令。
（5）记录结束标志R，R=0表示本通道指令与下一条指令所处理的数据是同属于一个记
录；R=1表示这是处理某记录的最后一条指令。
下面示出了一个由六条通道指令所构成的简单的通道程序。该程序的功能是将内存中
不同地址的数据写成多个记录。其中，前三条指令是分别将813～892单元中的80个字符
操作
P
R
计数
内存地址
WRITE
0
0
80
813
WRITE
0
0
140
1034
WRITE
0
1
60
5830
0
1
300
WRITE
2000
WRITE
0
0
50
1650
WRITE
1
1
250
2720
76.5
5与设备无关的I/O软件
为了方便用户和提高OS的可适应性与可扩展性，在现代OS的IVO系统中，都无一例
外地增加了与设备无关的IO软件，以实现设备独立性，也称为设备无关性。其基本含义
备驱动程序是与硬件紧密相关的软件。为了实现设备独立性，必须再在设备驱动程序之上
198

--- Page 210 ---
第六章输入输出系统
设置一层软件，称为与设备无关的I/O软件，或设备独立性软件。
6.5.1与设备无关(DeviceIndependence)软件的基本概念
1.以物理设备名使用设备
在早期OS中，应用程序在使用IVO设备时，都使用设备的物理名称，这使应用程序与
系统中的物理设备直接相关。当应用进程运行时，如果所请求的物理设备（独占设备类型）
已分配给其它进程，而此时尽管还有几台其它的相同设备空闲可用，但系统只能根据设备
的物理名来分配，无法将另外相同的设备(但具有不同的物理设备名)分配给它，致使该应
用进程请求I/O失败而被阻塞。特别是，当应用程序所需要的设备在系统中已经被更新时，
该应用程序将再也无法在该系统上运行。可见，应用程序直接与物理设备相关是非常不灵
活的，给用户带来了很大的不便，且对提高IO设备的利用率也很不利。
2.引入了逻辑设备名
为了实现与设备的无关性而引入了逻辑设备和物理设备两个概念。逻辑设备是抽象的
设备名。如/dev/printer，该设备名只是说明用户需要使用打印机来打印输出，但并没有指
定具体是哪一台打印机。这样，如果在应用程序中，使用逻辑设备名称请求使用某类设备，
系统在对它进行设备分配时，先查找该类设备中的第一台，如它已被分配，系统可立即去
查找该类设备中第二台，若又被分配，系统接着去找第三台，若它尚未分配，便可将这台
设备分配给进程。事实上，只要系统中有一台该类设备未被分配，进程就不会被阻塞。仅
当所请求的此类设备已全部分配完毕时，进程才会因请求失败而阻塞。所以，应用进程就
不会由于某台指定设备退役而无法在本系统上运行。
与设备的无关软件还可实现IVO重定向。所谓I/O重定向，是指用于I/O操作的设备可
以更换（即重定向），而不必改变应用程序。例如，我们在调试一个应用程序时，可将程序
的所有输出送往屏幕显示。而在程序调试完后，若须正式将程序的运行结果打印出来，此
时便须将I/O重定向的数据结构一—逻辑设备表中的显示终端改为打印机即可，而不必修
改应用程序。I/O重定向功能具有很大的实用价值，现已被广泛地引入到各类OS中。
3.逻辑设备名称到物理设备名称的转换
在应用程序中，用逻辑设备名称使用设备虽然方便了用户，但系统却只识别物理设备
名称，因此在实际执行时，还必须使用物理名称。为此，在系统中，必须具有将逻辑设备
名称转换为某物理设备名称的功能。关于逻辑设备名称和物理设备名称的概念，与存储器
管理中所介绍的逻辑地址和物理地址的概念非常类似，在应用程序中所使用的是逻辑地址，
而系统在分配和使用内存时，必须使用物理地址。在程序执行时，必须先将逻辑地址转换
为物理地址。类似地，为实现从逻辑设备名称和物理设备名称，在系统中需要配置一张逻
辑设备表。转换的详细情况将在后面介绍。
6.5.2与设备无关的软件
一
与设备无关的软件是I/O系统的最高层软件，在它下面的是设备驱动程序，其间的界
限，因操作系统和设备的不同而有所差异。比如，对于一些本应由设备独立性软件实现的
功能，却放在设备驱动程序中实现。这样的差异主要是出于对操作系统、设备独立性和设
199

--- Page 211 ---
计算机操作系统
备驱动程序运行效率等多方面因素的权衡和考虑。总的来说，在与设备无关的软件中，包
括了执行所有设备公有操作的软件，具体有如下几项。
1.设备驱动程序的统一接口
为了使所有的设备驱动程序有着统一的接口，一方面，要求每个设备驱动程序与OS
之间都有着相同的接口，或者相近的接口，这样会使添加一个新的设备驱动程序变得很容
易，同时在很大程度上方便了开发人员对设备驱动程序的编制。另一方面，要将抽象的设
备名映射到适当的驱动程序上，或者说，将抽象的设备名转换为具体的物理设备名，并进
一步可以找到相应物理设备的驱动程序入口。此外，还应对设备进行保护，禁止用户直接
访问设备，以防止无权访问的用户使用。
2.缓冲管理
无论是字符设备还是块设备，它们的运行速度都远低于CPU的速度。为了缓和CPU
和IVO设备之间的矛盾、提高CPU的利用率，在现代OS中都无一例外地分别为字符设备
和块设备配置了相应的缓冲区。缓冲区有着多种形式，如单缓冲区、双缓冲区、循环缓冲
区、公用缓冲池等，以满足不同情况的需要。由于这部分的内容较多，故我们将它作为独
立的一节，在6.7节中对它进行详细介绍。
3.差错控制
由于设备中有着许多的机械和电气部分，因此，它们比主机更容易出现故障，这就导
致I/O操作中的绝大多数错误都与设备有关。错误可分为如下两类：
（1）暂时性错误。暂时性错误是因发生暂时性事件引起的，如电源的波动。它可以通
过重试操作来纠正。例如，在网络传输中，由于传输路途较远、缓冲区数量暂时不足等因
素，会经常发生在网络中传输的数据包丢失或延误性的暂时性错误。当网络传输软件检测
到这种情况后，可以通过重新传送来纠正错误。又如，当磁盘传送发生错误后，开始驱动
程序并不立即认为传送出错，而是令磁盘重传，只有连续多次（如10次）出错，才认为磁盘
出错，并向上层报告。一般地，设备出现故障后，主要由设备驱动程序处理，而设备独立
性软件只处理那些设备驱动程序无法处理的错误。
(2）持久性错误。持久性错误是由持久性故障引起的，如电源掉电、磁盘上有一条划
痕或者在计算中发生除以零的情况等。持久性错误容易发现，有些错误是只要重复执行相
同的程序就会再现的错误。要排除持久性错误，通常需要查清发生错误的原因。但也有某
些持久性硬件错误可由操作系统进行有效的处理，而不用涉及高层软件。如磁盘上的少数
盘块遭到破坏而失效，此时无需更换磁盘，而只需将它们作为坏的盘块记录下来，并放入
一张坏盘块表中，以后不再使用这些坏块即可。
4.对独立设备的分配与回收
在系统中有两类设备：独占设备和共享设备。对于独占设备，为了避免诸进程对独占
设备的争夺，必须由系统来统一分配，不允许进程自行使用。每当进程需要使用某（独占）
设备时，必须先提出申请。OS接到对设备的请求后，先对进程所请求的独占设备进行检查，
看该设备是否空闲。若空闲，才把该设备分配给请求进程。否则，进程将被阻塞，放入该
设备的请求队列中等待。等到其它进程释放该设备时，再将队列中的第一个进程唤醒，该
进程得到设备后继续运行。
200

--- Page 212 ---
第六章输入输出系统
5.独立于设备的逻辑数据块
不同类型的设备，其数据交换单位是不同的，读
设备驱动程序的统一接口
取和传输速率也各不相同，如字符型设备以单个字符
缓冲
（字）为单位，块设备是以一个数据块为单位。即使同
一类型的设备，其数据交换单位的大小也是有差异的，
错误报告
如不同磁盘由于扇区大小的不同，可能造成数据块大
分配与释放专用设备
小的不一致。设备独立性软件应能够隐藏这些差异而
提供与设备无关的块大小
被逻辑设备使用，并向高层软件提供大小统一的逻辑
数据块。与设备无关软件的功能如图6-16所示。
图6-16与设备无关软件的功能层次
6.5.3设备分配
一一→
系统为实现对独占设备的分配，必须在系统中配置相应的数据结构。
1.设备分配中的数据结构
在用于设备分配的数据结构中，记录了对设备或控制器进行控制所需的信息。在进行
设备分配时需要如下的数据结构。
1）设备控制表DCT
系统为每一个设备都配置了一张设备控制表，用于记录设备的情况，如图6-17所示。
DCT1
设备类型：type
设
备
设备标识符：deviceid
控
设备状态：等待/不等待忙/闲
制
DCT2
表
指向控制器表的指针
集
合
重复执行次数或时间
设备队列的队首指针
DCTn
图6-17设备控制表
设备控制表中，除了有用于指示设备类型的字段type和设备标识字段deviceid外，还
应含有下列字段：
（1）设备队列队首指针，凡因请求本设备而未得到满足的进程，应将其PCB按照一定
的策略排成一个设备请求队列，其队首指针指向队首PCB；
（2）忙闲标志，用于表示当前设备的状态是忙或闲；
（3）与设备连接的控制器表指针，该指针指向该设备所连接的控制器的控制表；
（4）重复执行次数，由于外部设备在传送数据时较易发生数据传送错误，因而在许多
系统中规定了设备在工作中发生错误时应重复执行的次数，在重复执行时，若能恢复正常
传送，则仍认为传送成功，仅当重复执行次数达到规定值仍不成功时，才认为传送失败。
2）控制器控制表、通道控制表和系统设备表
（1）控制器控制表（COCT）。系统为每一个控制器都设置了用于记录控制器情况的控制
201

--- Page 213 ---
计算机操作系统
器控制表，如图6-18（a)所示。
(2）通道控制表（CHCT)。每个通道都有一张通道控制表，如图6-18(b）所示。
(3）系统设备表（SDT)。这是系统范围的数据结构，记录了系统中全部设备的情况，每
个设备占一个表目，其中包括有设备类型、设备标识符、设备控制表及设备驱动程序的入
口等项，如图6-18(c)所示。
控制器标识符：controllerid
表目1
通道标识符：channelid
控制器状态：忙/闲
通道状态：忙/闲
设备类
与控制器连接的通道表指针
与通道连接的控制器表首址
设备标识符
表目
控制器队列的队首指针
通道队列的队首指针
DCT
控制器队列的队尾指针
通道队列的队尾指针
：
驱动程序入口
（a)控制器控制表（COCT）
(b)通道控制表（CHCT)
(c)系统设备表（SDT)
图6-18COCT、CHCT 和SDT表
2.设备分配时应考虑的因素
系统在分配设备时，应考虑如下几个因素：
1）设备的固有属性
设备的固有属性可分成三种，对它们应采取不同的分配策略：
(1）独占设备的分配策略。将一个设备分配给某进程后，便由该进程独占，直至该进
程完成或释放该设备。
(2）共享设备的分配策略。对于共享设备，可同时分配给多个进程使用，此时须注意
对这些进程访问该设备的先后次序进行合理的调度。
（3）虚拟设备的分配策略，虚拟设备属于可共享的设备，可以将它同时分配给多个进
程使用。
2）设备分配算法
对设备分配的算法，通常只采用以下两种分配算法：
（1）先来先服务。该算法是根据诸进程对某设备提出请求的先后次序，将这些进程排
成一个设备请求队列，设备分配程序总是把设备首先分配给队首进程。
（2）优先级高者优先。在利用该算法形成设备队列时，将优先级高的进程排在设备队
列前面，而对于优先级相同的IVO请求，则按先来先服务原则排队。
3）设备分配中的安全性
从进程运行的安全性上考虑，设备分配有以下两种方式：
（1）安全分配方式。每当进程发出IVO请求后，便进入阻塞状态，直到其IO操作完成
时才被唤醒。在采用该策略时，一旦进程已经获得某种设备后便阻塞，不能再请求任何资
源，而在它阻塞时又不保持任何资源。因此，摒弃了造成死锁的四个必要条件之一的“请
求和保持”条件，故设备分配是安全的。其缺点是CPU与IVO设备是顺序工作的。
(2）不安全分配方式。在这种分配方式中，进程在发出IVO请求后仍继续运行，需要时
又发出第二个I/O请求、第三个IVO请求等。仅当进程所请求的设备已被另一进程占用时，
才进入阻塞状态。该策略的优点是，一个进程可同时操作多个设备，使进程推进迅速。其
202

--- Page 214 ---
第六章输入输出系统
缺点是分配不安全，因为它可能具备“请求和保持”条件，从而可能造成死锁。因此，在
明分配是安全的情况下，才进行设备分配。
3.独占设备的分配程序
1）基本的设备分配程序
我们通过一个例子来介绍设备分配过程。当某进程提出I/O请求后，系统的设备分配
程序可按下述步骤进行设备分配：
（1）分配设备。首先根据IVO请求中的物理设备名查找系统设备表SDT，从中找出该
设备的DCT，再根据DCT中的设备状态字段，可知该设备是否正忙。若忙，便将请求I/O
的进程的PCB挂在设备队列上；否则，便按照一定的算法，计算本次设备分配的安全性。
如果不会导致系统进入不安全状态，便将设备分配给请求进程；否则，仍将其PCB插入设
备等待队列。
（2）分配控制器。在系统把设备分配给请求IVO的进程后，再到其DCT中找出与该设
备连接的控制器的COCT，从COCT的状态字段中可知该控制器是否忙碌。若忙，便将请
求IO进程的PCB，挂在该控制器的等待队列上。否则，便将该控制器分配给进程。
（3）分配通道。在该COCT中又可找到与该控制器连接的通道的CHCT，再根据CHCT
内的状态信息可知该通道是否忙碌。若忙，便将请求I/O的进程挂在该通道的等待队列上；
否则，将该通道分配给进程。只有在设备、控制器和通道三者都分配成功时，这次的设备
分配才算成功。然后，便可启动该I/O设备进行数据传送。
2）设备分配程序的改进
在上面的例子中，进程是以物理设备名提出IO请求的。如果所指定的设备已分配给
其它进程，则分配失败。或者说上面的设备分配程序不具有与设备无关性。为获得设备的
独立性，进程应使用逻辑设备名请求IVO。这样，系统首先从SDT中找出第一个该类设备
的DCT。若该设备忙，又查找第二个该类设备的DCT，仅当所有该类设备都忙时，才把进
程挂在该类设备的等待队列上。而只要有一个该类设备可用，系统便进一步计算分配该设
备的安全性。如安全，便可把设备分配给它。
6.5.4逻辑设备名到物理设备名映射的实现
为了实现与设备的无关性，当应用程序请求使用IO设备时，应当用逻辑设备名。但
系统只识别物理设备名，因此在系统中需要配置一张逻辑设备表，用于将逻辑设备名映射
为物理设备名。
1.逻辑设备表LUT（LogicalUnitTable)
在逻辑设备表的每个表目中包含了三项：逻辑设备名、物理设备名和设备驱动程序的
入口地址，如图6-19（a）所示。当进程用逻辑设备名请求分配IVO设备时，系统根据当时的
具体情况，为它分配一台相应的物理设备。与此同时，在逻辑设备表上建立一个表目，填
上应用程序中使用的逻辑设备名和系统分配的物理设备名，以及该设备驱动程序的入口地
址。当以后进程再利用该逻辑设备名请求IVO操作时，系统通过查找LUT，便可找到该逻
辑设备所对应的物理设备和该设备的驱动程序。
203

--- Page 215 ---
计算机操作系统
驱动程序
逻辑设备名
物理设备名
逻辑设备名
系统设备表指针
入口地址
/dev/tty
1024
/dev/tty
3
/dev/printer
5
2046
/dev/printer
5
：
(a)表一
(b)表二
图6-19逻辑设备表
2.逻辑设备表的设置问题
在系统中可采取两种方式设置逻辑设备表：
第一种方式，是在整个系统中只设置一张LUT。由于系统中所有进程的设备分配情况
都记录在同一张LUT中，因而不允许在LUT中具有相同的逻辑设备名，这就要求所有用
户都不使用相同的逻辑设备名。在多用户环境下这通常是难以做到的，因而这种方式主要
用于单用户系统中。
第二种方式，是为每个用户设置一张LUT。每当用户登录时，系统便为该用户建立一
个进程，同时也为之建立一张LUT，并将该表放入进程的PCB中。由于通常在多用户系统
中都配置了系统设备表，故此时的逻辑设备表可以采用图6-19(b)中的格式。
用户层的I/O软件
6.6
一般而言，大部分的I/O软件都放在操作系统内部，但仍有一小部分在用户层，其中
包括与用户程序链接在一起的库函数，以及完全运行于内核之外的假脱机系统等。
6.6.1系统调用与库函数
1.系统调用
一方面，为使诸进程能有条不素地使用IVO设备，且能保护设备的安全性，不允许运
行在用户态的应用进程去直接调用运行在核心态(系统态)的OS过程。但另一方面，应用进
程在运行时，又必须取得OS所提供的服务，否则，应用程序几乎无法运行。为了解决此
矛盾，OS在用户层中引I入了一个中介过程一系统调用，应用程序可以通过它间接调用
OS中的IO过程，对IO设备进行操作。
系统中会有许多系统调用，它们的实现方法
用户态
内核态
是基本相同的。下面简单说明系统调用的执行过
用户程序
程。当应用程序需要执行某种IVO操作时，在应
系统调用
系统调用
用程序中必须使用相应的系统调用。当OS捕获
调用
命令
到应用程序中的该系统调用后，便将CPU的状
态从用户态转换到核心态，然后转向操作系统中
相应过程，由该过程完成所需的IO操作。执行
返回
完成后，系统又将CPU状态从核心态转换到用
户态，返回到应用程序继续执行。图6-20示出
图6-20系统调用的执行过程
204
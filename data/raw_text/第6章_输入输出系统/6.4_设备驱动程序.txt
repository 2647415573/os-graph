

--- Page 203 ---
计算机操作系统
字PSW，以及各通用寄存器和段寄存器的内容。这样，当处理机再执行本程序时，便从
N+1处开始，最终返回到被中断的程序。
中断的处理流程如图6-11所示。
中断请求信号
唤醒被阻塞的
驱动程序进程
对被中断进程的
CPU环境进行保护
分析中断原因，转入
相应的中断处理程序
终端中断
终端中断
终端中断
处理程序
处理程序
处理程序
恢复被中断
进程的现场
返回被中断的进
程，继续执行
图6-11中断处理流程
IO操作完成后，驱动程序必须检查本次I/O操作中是否发生了错误，并向上层软件报
告，最终向调用者报告本次I/O的执行情况。除了上述的第4步外，其它各步骤对所有I/O
设备都是相同的，因而对于某种操作系统，例如UNIX系统，是把这些共同的部分集中起
来，形成中断总控程序。每当要进行中断处理时，都要首先进入中断总控程序。而对于第
4步，则对不同设备须采用不同的设备中断处理程序继续执行。
设备驱动程序
4
设备处理程序通常又称为设备驱动程序，它是IVO系统的高层与设备控制器之间的通
信程序，其主要任务是接收上层软件发来的抽象I/O要求，如read或write命令，再把它转
换为具体要求后，发送给设备控制器，启动设备去执行；反之，它也将由设备控制器发来
的信号传送给上层软件。由于驱动程序与硬件密切相关，故通常应为每一类设备配置一种
驱动程序。例如，打印机和显示器需要不同的驱动程序。
6.4.1设备驱动程序概述
1.设备驱动程序的功能
为了实现IO系统的高层与设备控制器之间的通信，设备驱动程序应具有以下功能：
(1）接收由与设备无关的软件发来的命令和参数，并将命令中的抽象要求转换为与设
192

--- Page 204 ---
第六章输入输出系统
备相关的低层操作序列。
(2）检查用户IVO请求的合法性，了解I/O设备的工作状态，传递与IVO设备操作有关
的参数，设置设备的工作方式。
(3）发出IO命令，如果设备空闲，便立即启动I/O设备，完成指定的I/O操作；如果
设备忙碌，则将请求者的请求块挂在设备队列上等待。
(4）及时响应由设备控制器发来的中断请求，并根据其中断类型，调用相应的中断处
理程序进行处理。
2.设备驱动程序的特点
设备驱动程序属于低级的系统例程，它与一般的应用程序及系统程序之间有下述明显
差异：
（1）驱动程序是实现在与设备无关的软件和设备控制器之间通信和转换的程序，具体
说，它将抽象的IVO请求转换成具体的IIO操作后传送给控制器。又把控制器中所记录的
设备状态和I/O操作完成情况，及时地反映给请求IO的进程。
应配置不同的驱动程序。但可以为相同的多个终端设置一个终端驱动程序。
（3）驱动程序与IO设备所采用的IO控制方式紧密相关，常用的I/O控制方式是中断
驱动和DMA方式。
（4）由于驱动程序与硬件紧密相关，因而其中的一部分必须用汇编语言书写。目前有
很多驱动程序的基本部分已经固化在ROM中。
（5）驱动程序应允许可重入。一个正在运行的驱动程序常会在一次调用完成前被再次
调用。
3.设备处理方式
在不同的操作系统中，所采用的设备处理方式并不完全相同。根据在设备处理时是否
设置进程，以及设置什么样的进程，而把设备处理方式分成以下三类：
（1）为每一类设备设置一个进程，专门用于执行这类设备的IVO操作。比如，为所有的
交互式终端设置一个交互式终端进程；又如，为同一类型的打印机设置一个打印进程。这
种方式比较适合于较大的系统。
（3）不设置专门的设备处理进程，而只为各类设备设置相应的设备驱动程序，供用户
或系统进程调用。这种方式目前用得较多。
6.4.2设备驱动程序的处理过程
设备驱动程序的主要任务是启动指定设备，完成上层指定的IVO工作。但在启动之前，
才向设备控制器发送一条启动命令。以下是设备驱动程序的处理过程：
(1）将抽象要求转换为具体要求。通常在每个设备控制器中都含有若干个寄存器，分
别用于暂存命令、参数和数据等。由于用户及上层软件对设备控制器的具体情况毫无了解，
193

--- Page 205 ---
计算机操作系统
因而只能发出命令(抽象的要求)，这些命令是无法传送给设备控制器的。因此，就需要将
这些抽象要求转换为具体要求。例如，将抽象要求中的盘块号转换为磁盘的盘面、磁道号
及扇区。而这一转换工作只能由驱动程序来完成，因为在OS中只有驱动程序才同时了解
抽象要求和设备控制器中的寄存器情况，也只有它才知道命令、数据和参数应分别送往哪
个寄存器。
(2）对服务请求进行校验。驱动程序在启动IO设备之前，必须先检查该用户的I/O请
求是不是该设备能够执行的。一个非法请求的典型例子是，用户试图请求从一台打印机读
入数据。如果驱动程序能检查出这类错误，便认为这次IVO请求非法，它将向IVO系统报
告IVO请求出错。IVO系统可以根据具体情况做出不同的决定。如可以停止请求进程的运行，
或者仅通知请求进程它的IVO请求有错，但仍然让它继续运行。此外，还有些设备如磁盘
和终端，它们虽然都是既可读、又可写的，但若在打开这些设备时规定的是读，则用户的
写请求必然被拒绝。
（3）检查设备的状态。启动某个设备进行I/O操作，其前提条件应是该设备正处于就绪
状态。为此，在每个设备控制器中，都配置有一个状态寄存器。驱动程序在启动设备之前，
要先把状态寄存器中的内容读入到CPU的某个寄存器中，通过测试寄存器中的不同位，来
了解设备的状态，如图6-12所示。例如，为了向某设备写入数据，此前应先检查状态寄存
器中接收就绪的状态位，看它是否处于接收就绪状态。仅当它处于接收就绪状态时，才能
启动其设备控制器，否则只能等待。
DD6DsD4DD2DDo
[TRT
DSR
DET
EMPRDYRDY
发送就绪
接收就绪
发送器空
奇偶校验错
溢出错
组帧错
检出的SYNC特征
DSR引脚的状态
图6-12状态寄存器中的格式
(4）传送必要的参数。在确定设备处于接收(发送)就绪状态后，便可向控制器的相应寄
存器传送数据及与控制本次数据传输有关的参数。例如，在某种设备控制器中配置了两个
IVO操作是接收数据还是发送数据等。另一个是方式寄存器，它用于控制本次传送数据的速
率、发送的字符长度等。如果是利用RS232C接口进行异步通信，在启动该接口之前，应
先按通信规程设定下述参数：波特率、奇偶校验方式、停止位数目及数据字节长度等。对
于较为复杂的块设备，除必须向其控制器发出启动命令外，还需传送更多的参数。
(5）启动IO设备。在完成上述各项准备工作后，驱动程序便可以向控制器中的命令寄
存器传送相应的控制命令。对于字符设备，若发出的是写命令，驱动程序便把一个字符（或
字)，传送给控制器；若发出的是读命令，则驱动程序等待接收数据，并通过读入控制器的
状态寄存器中状态字的方法来确定数据是否到达。
194

--- Page 206 ---
第六章输入输出系统
在多道程序系统中，驱动程序一旦发出I/O命令，启动了一个IO操作后，驱动程序
便把控制返回给IVO系统，把自己阻塞起来，直到中断到来时再被唤醒。具体的IVO操作
是在设备控制器的控制下进行的，因此，在设备忙于传送数据时，处理机又可以去干其它
的事情，实现了处理机与I/O设备的并行操作。
6.4.3对1/0设备的控制方式
对设备的控制，早期是使用轮询的可编程I/O方式，后来发展为使用中断的可编程I/O
方式。随着DMA控制器的出现，从以字节为单位，改为以数据块为单位进行转输，大大
地改善了块设备的IO性能。IO通道的出现，又使对IO操作的组织和数据的传送都能独
立进行，而无需CPU的干预。应当指出，在I/O控制方式的整个发展过程中，始终贯穿着
这样一条宗旨，即尽量减少主机对I/O控制的干预，把主机从繁杂的I/O控制事务中解脱
出来，以便更多地去完成数据处理任务。
1.使用轮询的可编程1/O方式
处理机对IVO设备的控制采取轮询的可编程I/O方式，即在处理机向控制器发出一条
IO指令，启动输入设备输入数据时，要同时把状态寄存器中的忙/闲标志busy置为1，然
后便不断地循环测试busy（称为轮询）。当busy=1时，表示输入机尚未输完一个字（符），处
理机应继续对该标志进行测试，直至busy=0，表明输入机已将输入数据送入控制器的数据
寄存器中。于是处理机将数据寄存器中的数据取出，送入内存指定单元中，这样便完成了
一个字（符）的I/O。接着再去启动读下一个数据，并置busy=1。图6-13(a)示出了程序I/O方
式的流程。
CPU→I0
向V/O控制器
向1/0控制器
CPU→I/0
发读命令
发读命令
CPU做其它事
读V/O控制器
读VO控制器
中断
的状态
1/O→CPU
的状态
未
VO-CPU
就
绪
检查
检查
出错
出错
状态？
状态？
就绪
就绪
从IO控制器
从1O控制
VO→CPU
VO-CPU
中读入字
器中读入字
CPU-DMA
向VO控制器
发布读块命令
向存储器
向存储器
CPU→内存
CPU→内存
CPU做其它事
中写字
中写字
中断
未完成传送
未完成
读DMA控制
传送
器的状态
完成？
完成？
DMA→CPU
完成
完成
下一条指令
下一条指令
下一条指令
(a)程序IV/O方式
(b）中断驱动1/0方式
(c)DMA方式
图6-13程序I/O和中断驱动方式的流程
195

--- Page 207 ---
计算机操作系统
在程序IO方式中，CPU的绝大部分时间都处于等待I/O设备完成数据IO的循环测
试中，造成对CPU的极大浪费。在该方式中，CPU之所以要不断地测试IO设备的状态，
操作。
2.使用中断的可编程1VO方式
当前，对I/O设备的控制，广泛采用中断的可编程IO方式，即当某进程要启动某个
行原来的任务。设备控制器于是按照该命令的要求去控制指定IVO设备。此时，CPU与I/O
设备并行操作。例如，在输入时，当设备控制器收到CPU发来的读命令后，便去控制相
应的输入设备读数据。一旦数据进入数据寄存器，控制器便通过控制线向CPU发送一中
断信号，由CPU检查输入过程中是否出错，若无错，便向控制器发送取走数据的信号，
然后再通过控制器及数据线，将数据写入内存指定单元中。图6-13(b)示出了中断驱动方
式的流程。
在IO设备输入每个数据的过程中，可使CPU与IO设备并行工作。仅当输完一个数
据时，才需CPU花费极短的时间去做些中断处理。这样可使CPU和I/O设备都处于忙碌
状态，从而提高了整个系统的资源利用率及吞吐量。例如，从终端输入一个字符的时间约
为100ms，而将字符送入终端缓冲区的时间小于0.1ms。若采用程序IO方式，CPU约有
99.9ms的时间处于忙一等待中。但采用中断驱动方式后，CPU可利用这99.9ms的时间去
做其它的事情，而仅用0.1ms的时间来处理由控制器发来的中断请求。可见，中断驱动方
式可以成百倍地提高CPU的利用率。
3.直接存储器访问方式
1）接存储器访问方式的引入
虽然中断驱动I/O比程序IVO方式更有效，但它仍是以字（节)为单位进行IO的。每当
完成一个字（节）的I/O时，控制器便要向CPU请求一次中断。换而言之，采用中断驱动I/O
方式时的CPU，是以字（节)为单位进行干预的。如果将这种方式用于块设备的IVO，显然
是极其低效的。例如，为了从磁盘中读出1KB的数据块，需要中断CPU1K次。为了进
一步减少CPU对I/O的干预，而引入了直接存储器访问方式，见图6-13(c)所示。该方式
的特点是：
（1）数据传输的基本单位是数据块，即在CPU与I/O设备之间，每次传送至少一个数
据块。
(2）所传送的数据是从设备直接送入内存的，或者相反。
(3）仅在传送一个或多个数据块的开始和结束时，才需CPU干预，整块数据的传送是
在控制器的控制下完成的。可见，DMA方式较之中断驱动方式又进一步提高了CPU与I/O
设备的并行操作程度。
2)DMA控制器的组成
DMA控制器由三部分组成：主机与DMA控制器的接口；DMA控制器与块设备的接
口；I/O控制逻辑。图6-14示出了DMA控制器的组成。这里主要介绍主机与控制器之间
的接口。
196

--- Page 208 ---
第六章输入输出系统
CPU
内存
主机—控制器接口
控制器与块设备接口
DR
1/0
MAR
控
count
制
DC
逻
辑
CR
命令
系统总线
DMA控制器
图6-14DMA控制器的组成
为了实现在主机与控制器之间成块数据的直接交换，必须在DMA控制器中，设置如
下四类寄存器：
（1）命令/状态寄存器CR，用于接收从CPU发来的I/O命令，或有关控制信息，或设
备的状态。
(2）内存地址寄存器MAR，在输入时，它存放把数据从设备传送到内存的起始目标地
址，在输出时，它存放由内存到设备的内存源地址。
（3）数据寄存器DR，用于暂存从设备到内存，或从内存到设备的数据。
(4）数据计数器DC，存放本次CPU要读或写的字(节)数。
3）DMA工作过程
当CPU要从磁盘读入一数据块时，便向磁盘控制器发送一条读命令。该命令被送入命
令寄存器CR中。同时，需要将本次要读入数据在内存的起始目标地址送入内存地址寄存
器MAR中。将要读数据的字（节)数送入数据
计数器DC中。还须将磁盘中的源地址直接送
设置MAR和DC初值
至DMA控制器的I/O控制逻辑上。然后，启
启动DMA传送命令
动DMA控制器进行数据传送。以后，CPU便
1
可去处理其它任务，整个数据传送过程由
挪用存储器周期
传送数据字
DMA控制器进行控制。当DMA控制器已从
在继续执行用户程序
的同时，准备又一次传送
磁盘中读入一个字（节）的数据，并送入数据寄
存储器地址增1
数据计数寄存器减！
存器DR后，再挪用一个存储器周期，将该字
（节)传送到MAR所指示的内存单元中。然后
否
DC=0?
便对MAR内容加1，将DC内容减1，若减1
是
后DC内容不为O，表示传送未完，便继续传
请求中断
送下一个字(节)：否则，由DMA控制器发出
中断请求。图6-15是DMA方式的工作流程。
图6-15DMA方式的工作流程图
4.VO通道控制方式
1）IO通道控制方式的引入
虽然DMA方式比起中断方式来已经显著地减少了CPU的干预，即已由以字(节)为单
一个连续的数据块。而当我们需要一次去读多个数据块且将它们分别传送到不同的内存区
197

--- Page 209 ---
计算机操作系统
域，或者相反时，则须由CPU分别发出多条IVO指令及进行多次中断处理才能完成。
IO通道方式是DMA方式的发展，它可进一步减少CPU的干预，即把对一个数据块
的读(或写)为单位的干预，减少为对一组数据块的读(或写)及有关的控制和管理为单位的干
预。同时，又可实现CPU、通道和IVO设备三者的并行操作，从而更有效地提高整个系统
的资源利用率。例如，当CPU要完成一组相关的读（或写)操作及有关控制时，只需向I/O
通道发送一条IO指令，以给出其所要执行的通道程序的首址和要访问的IO设备，通道
接到该指令后，通过执行通道程序便可完成CPU指定的IVO任务。
2）通道程序
通道是通过执行通道程序并与设备控制器共同实现对IO设备的控制的。通道程序是
由一系列通道指令（或称为通道命令）所构成的。通道指令与一般的机器指令不同，在它的
每条指令中都包含下列诸信息：
（1）操作码，它规定了指令所执行的操作，如读、写、控制等操作。
(2）内存地址，标明字符送入内存(读操作)和从内存取出(写操作)时的内存首址。
（3）计数，表示本条指令所要读（或写）数据的字节数。
（4）通道程序结束位P，用于表示通道程序是否结束。P=1表示本条指令是通道程序的
最后一条指令。
（5）记录结束标志R，R=0表示本通道指令与下一条指令所处理的数据是同属于一个记
录；R=1表示这是处理某记录的最后一条指令。
下面示出了一个由六条通道指令所构成的简单的通道程序。该程序的功能是将内存中
不同地址的数据写成多个记录。其中，前三条指令是分别将813～892单元中的80个字符
操作
P
R
计数
内存地址
WRITE
0
0
80
813
WRITE
0
0
140
1034
WRITE
0
1
60
5830
0
1
300
WRITE
2000
WRITE
0
0
50
1650
WRITE
1
1
250
2720
76.5
5与设备无关的I/O软件
为了方便用户和提高OS的可适应性与可扩展性，在现代OS的IVO系统中，都无一例
外地增加了与设备无关的IO软件，以实现设备独立性，也称为设备无关性。其基本含义
备驱动程序是与硬件紧密相关的软件。为了实现设备独立性，必须再在设备驱动程序之上
198
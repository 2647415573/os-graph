计算机操作系统 链表进行检索，以找到指定记录的物理地址。然而对于直接文件，则可根据给定的关键字 直接获得指定记录的物理地址。换而言之，关键字本身就决定了记录的物理地址。这种由 关键字到记录物理地址的转换被称为键值转换(Keytoaddress transformation)。组织直接文 件的关键在于用什么方法进行从记录值到物理地址的转换。

2.哈希（Hash)文件 这是目前应用最为广泛的一种直接文件。它利用Hash函数（或称散列函数）可将关键字 转换为相应记录的地址。但为了能实现文件存储空间的动态分配，通常由Hash函数所求得 的并非是相应记录的地址，而是指向某一目录表相应表目的指针，该表目的内容指向相应 记录所在的物理块，如图7-6所示。例如，若令K为记录键值，用A作为通过Hash函数 H的转换所形成的该记录在目录表中对应表目的位置，则有关系A=H(K)。通常，把Hash 函数作为标准函数存于系统中，供存取文件时调用。 目录表 Hash函数 键值 图7-6Hash文件的逻辑结构

7.3文件自录 通常，在现代计算机系统中，都要存储大量的文件。为了能对这些文件实施有效的管 理，必须对它们加以妥善组织，这主要是通过文件目录实现的。文件目录也是一种数据结 构，用于标识系统中的文件及其物理地址，供检索时使用。对目录管理的要求如下：

（1）实现“按名存取”。用户只须向系统提供所需访问文件的名字，便能快速准确地找 到指定文件在外存上的存储位置。这是目录管理中最基本的功能，也是文件系统向用户提 供的最基本的服务。

(2）提高对目录的检索速度。通过合理地组织目录结构加快对目录的检索速度，从而 提高对文件的存取速度。这是在设计一个大、中型文件系统时所追求的主要目标。

(3）文件共享。在多用户系统中，应允许多个用户共享一个文件。这样就只须在外存 中保留一份该文件的副本供不同用户使用，以节省大量的存储空间，并方便用户和提高文 件利用率。

(4）允许文件重名。系统应允许不同用户对不同文件采用相同的名字，以便于用户按 照自己的习惯给文件命名和使用文件。 232  第七章文件管理

7.3.1文件控制块和索引结点 一一 为了能对一个文件进行正确的存取，必须为文件设置用于描述和控制文件的数据结构， 称之为“文件控制块”。文件管理程序可借助于文件控制块中的信息对文件施以各种操作。 控制块就是一个文件目录项。通常，一个文件目录也被看做是一个文件，称为目录文件。

1.文件控制块FCB（FileControl Block) 即基本信息、存取控制信息及使用信息。 1）基本信息类 基本信息类包括：

（1）文件名，指用于标识一个文件的符号名，在每个系统中，每一个文件都必须有唯 一的名字，用户利用该名字进行存取。

（2）文件物理位置，指文件在外存上的存储位置，它包括存放文件的设备名、文件在 外存上的起始盘块号、指示文件所占用的盘块数，或字节数的文件长度。

（3）文件逻辑结构，指示文件是流式文件还是记录式文件、记录数，文件是定长记录 还是变长记录等。

(4）文件的物理结构，指示文件是顺序文件，还是链接式文件或索引文件。 2）存取控制信息类 存取控制信息类包括文件主的存取权限、核准用户的存取权限以及一般用户的存取权限。 3）使用信息类 使用信息类包括文件的建立日期和时间、文件上一次修改的日期和时间，以及当前使 用信息。这些信息包括当前已打开该文件的进程数，是否被其它进程锁住，文件在内存中 是否已被修改但尚未拷贝到盘上等。应该说明，对于不同OS的文件系统，由于功能不同， 可能只含有上述信息中的某些部分。 图7-7示出了MS-DOS中的文件控制块，其中含有文件名、文件所在的第一个盘块号、 文件属性、文件建立日期和时间及文件长度等。FCB的长度为32个字节，对360KB的软 盘，总共可包含112个FCB，共占4KB的存储空间。 第 文 扩 属 备 时 盘 一 件 展 块 块 名 名 性 用 期 数 号 图7-7MS-DOS的文件控制块

2.索引结点 1）索引结点的引入 文件目录通常是存放在磁盘上的，当文件很多时，文件目录可能要占用大量的盘块。 在查找目录的过程中，必须先将存放目录文件的第一个盘块中的目录调入内存，然后将用 户所给定的文件名，与目录项中的文件名逐一比较。若未找到指定文件，还需要将下一盘 233  计算机操作系统 块的目录项调入内存。假设目录文件所占用的盘块数为N，按此方法查找，则查找一个目 录项，平均需要调入盘块(N+1)/2次。假如一个FCB为64B，盘块大小为1KB，则每个盘 块中只能存放16个FCB。若一个文件目录中共有640个FCB，需占用40个盘块，故平均 查找一个文件需启动磁盘20次。 稍加分析可以发现，在检索目录文件的过程中，只用到了文件名，仅当找到一个目录 理地址。而其它一些对该文件进行描述的信息在检索目录时一概不用。显然，这些信息在 检索目录时不需调入内存。为此，在有的系统中，如UNIX系统，便采用了把文件名与文 件描述信息分开的办法，亦即，使文件描述信息单独形成一个称为索引结点的数据结构， 简称为i结点。在文件目录中的每个目录项仅由文件名和指向该文件所对应的i结点的指针 所构成。在UNIX系统中一个目录仅占16个字节，其中14个字节是文件名，2个字节为i 结点指针。在1KB的盘块中可做64个目录项，这样，为找到一个文件，可使平均启动磁 盘次数减少到原来的1/4，大大节省了系统开销。图7-8示出了UNIX的文件目录项。 文件名 索引结点编号 文件名1 文件名2 1314 15 图7-8UNIX的文件目录 2）磁盘索引结点 这是存放在磁盘上的索引结点。每个文件有唯一的一个磁盘索引结点，它主要包括以 下内容：

(1）文件主标识符，即拥有该文件的个人或小组的标识符；

(2）文件类型，包括正规文件、目录文件或特别文件；

(3）文件存取权限，指各类用户对该文件的存取权限；

(4）文件物理地址，每一个索引结点中含有13个地址项，即iaddr(0)～iaddr(12)，它们 以直接或间接方式给出数据文件所在盘块的编号；

(5）文件长度，指以字节为单位的文件长度；

(6）文件连接计数，表明在本文件系统中所有指向该（文件的)文件名的指针计数；

（7）文件存取时间，指出本文件最近被进程存取的时间、最近被修改的时间及索引结 点最近被修改的时间。 3）内存索引结点 这是存放在内存中的索引结点。当文件被打开时，要将磁盘索引结点拷贝到内存的索 引结点中，便于以后使用。在内存索引结点中又增加了以下内容：

（1）索引结点编号，用于标识内存索引结点；

(2）状态，指示i结点是否上锁或被修改；

（3）访问计数，每当有一进程要访问此i结点时，将该访问计数加1，访问完再减1； 234  第七章文件管理

（4）文件所属文件系统的逻辑设备号；

(5）链接指针，设置有分别指向空闲链表和散列队列的指针。

7.3.2简单的文件目录 目录结构的组织，关系到文件系统的存取速度，也关系到文件的共享性和安全性。因 此，组织好文件的目录，是设计好文件系统的重要环节。目前最简单的文件目录形式是单 级目录和两级目录。

1.单级文件目录 这是最简单的文件目录。在整个文件系统中只建立一张目录表，每个文件占一个目录项， 目录项中含文件名、文件扩展名、文件长度、文件类型、文件物理地址以及其它文件属性。 此外，为表明每个目录项是否空闲，又设置了一个状态位。单级文件目录如图7-9所示。 文件名 扩展名 文件长度 物理地址 文件类型 文件说明 状态位 文件名1 文件名2 文件名3 图7-9单级文件目录 每当要建立一个新文件时，必须先检索所有的目录项，以保证新文件名在目录中是唯 一的。然后再从目录表中找出一个空白目录项，填入新文件的文件名及其它说明信息，并 置状态位为1。删除文件时，先从目录中找到该文件的目录项，回收该文件所占用的存储 空间，然后再清除该目录项。 单级文件目录的优点是简单，但它只能实现目录管理中最基本的功能一一按名存取， 不能满足对文件目录的其它三方面的要求，具体如下：

（1）查找速度慢。对于稍具规模的文件系统，为找到一个指定的目录项要花费较多的时 间。对于一个具有N个目录项的单级目录，为检索出一个目录项，平均需查找N/2个目录项。

(2）不允许重名。在一个目录表中的所有文件，都不能与另一个文件有相同的名字。 然而，重名问题在多道程序环境下却又是难以避免的；即使在单用户环境下，当文件数超 过数百个时，也难于记忆。

(3）不便于实现文件共享。通常，每个用户都有自己的名字空间或命名习惯。因此， 应当允许不同用户使用不同的文件名来访问同一个文件。然而，单级目录却要求所有用户 都只能用同一个名字来访问同一文件。简而言之，单级目录只能满足对目录管理的四点要 求中的第一点，因而，它只适用于单用户环境。

2.两级文件目录 为了克服单级文件目录所存在的缺点，可以为每一个用户再建立一个单独的用户文件 目录UFD(UserFileDirectory)。这些文件目录具有相似的结构，它由用户所有文件的文件 控制块组成。此外，在系统中再建立一个主文件目录MFD(MasterFileDirectory)；在主文件 目录中，每个用户目录文件都占有一个目录项，其目录项中包括用户名和指向该用户目录文 件的指针。如图7-10所示，图中的主目录中示出了三个用户名，即Wang、Zhang和Gao。 235  计算机操作系统 Wang用户目录 Alpha 用户名 指向子目录指针 Alpha ！ O Test OTest Wang O Zhang Gao Zhang用户目录 Report OReport Test Test Gao用户目录 Beta O Beta O Device Device 。 Misx OMisx 图7-10两级文件目录 在两级文件目录中，如果用户希望有自己的用户文件目录UFD，可以请求系统为自己 建立一个用户文件目录；如果自己不再需要UFD，也可以请求系统管理员将它撤消。在有 了UFD后，用户可以根据自己的需要创建新文件。每当此时，OS只需检查该用户的UFD， 判定在该UFD中是否已有同名的另一个文件。若有，用户必须为新文件重新命名。若无， 便在UFD中建立一个新目录项，将新文件名及其有关属性填入目录项中，并置其状态位为 录项，在回收该文件所占用的存储空间后，将该目录项删除。两级文件目录已基本上能够 满足对文件目录的四方面的要求，现对能满足第2、3、4方面的要求作进一步的说明：

（1）提高了检索目录的速度。如果在主目录中有n个子目录，每个用户目录最多为m 个目录项，则为查找一指定的目录项，最多只需检索n+m个目录项。但如果是采用单级 目录结构，则最多需检索n×m个目录项。假定n=m，可以看出，采用两级目录可使检索 效率提高n/2倍。

(2）在不同的用户目录中，可以使用相同的文件名。只要在用户自己的UFD中，每一 个文件名都是唯一的。例如，用户Wang可以用Test来命名自己的一个测试文件；而用户 Zhang则可用Test来命名自己的一个并不同于Wang的Test的测试文件。

(3）不同用户还可使用不同的文件名访问系统中的同一个共享文件。 采用两级目录结构也存在一些问题。该结构虽然能有效地将多个用户隔开，在各用户 之间完全无关时，这种隔离是一个优点。但当多个用户之间要相互合作去完成一个大任务， 且一用户又需去访问其他用户的文件时，这种隔离便成为一个缺点，因为这种隔离会使诸 用户之间不便于共享文件。

7.3.3树形结构目录(Tree-StructuredDirectory)

1.树形目录 在现代OS中，最通用且实用的文件目录无疑是树形结构目录。它可以明显地提高对 236  第七章文件管理 目录的检索速度和文件系统的性能。主目录在这里被称为根目录，在每个文件目录中，只 能有一个根目录，每个文件和每个目录都只能有一个父目录。把数据文件称为树叶，其它 的目录均作为树的结点，或称为子目录。图7-11示出了树形结构目录。 图7-11多级目录结构 图中，用方框代表目录文件，圆圈代表数据文件。在该树形结构目录中，主(根)目录 中有三个用户的总目录项A、B和C。在B项所指出的B用户的总目录B中，又包括三个 分目录F、E和D，其中每个分目录中又包含多个文件。如B目录中的F分目录中，包含J 和N两个文件。为了提高文件系统的灵活性，应允许在一个目录文件中的目录项，既是作 为目录文件的FCB，又是数据文件的FCB，这可用目录项中的一位来指示它是属于哪一种 FCB。例如，在图7-11中，用户A的总目录中，目录项A是目录文件的FCB，而在A用 户的总目录中目录项B和D则是数据文件的FCB。

2.路径名和当前目录 1）路径名(pathname) 在树形结构目录中，从根目录到任何数据文件都只有一条唯一的通路。在该路径上，从树 的根（即主目录）开始，把全部目录文件名与数据文件名依次地用“”连接起来，即构成该数据 文件唯一的路径名。例如，在图7-11中用户B为访问文件J，应使用其路径名/B/FJ来访问。 2）当前目录（CurrentDirectory) 当一个文件系统含有许多级时，每访问一个文件，都要使用从树根开始，直到树叶（数 据文件）为止的、包括各中间节点（目录）名的全路径名。这是相当麻烦的事，同时由于一个 进程运行时所访问的文件大多仅局限于某个范围，因而非常不便。基于这一点，可为每个 进程设置一个“当前目录”，又称为“工作目录”。进程对各文件的访问都相对于“当前目 录”而进行。此时各文件所使用的路径名只需从当前目录开始，逐级经过中间的目录文件， 最后到达要访问的数据文件。把这一路径上的全部目录文件名与数据文件名用“／”连接 形成路径名，如用户B的当前目录是F，则此时文件』的相对路径名仅是J本身。这样， 把从当前目录开始直到数据文件为止所构成的路径名称为相对路径名（relativepathname)， 237  计算机操作系统 而把从树根开始的路径名称为绝对路径名（absolutepathname)。 较之两级目录而言，树形结构目录的查询速度更快，同时层次结构更加清晰，能够更 加有效地进行文件的管理和保护。在多级目录中，不同性质、不同用户的文件，可以构成 不同的目录子树。不同层次、不同用户的文件，分别呈现在系统目录树中的不同层次或不 同子树中，可以容易地赋予不同的存取权限。但是在树形结构目录中查找一个文件，需要 按路径名逐级访问中间节点，增加了磁盘访问次数，无疑影响了查询速度。目前，大多数 操作系统如UNIX、Linux和Windows系列都采用了树形文件目录。

3.目录操作

（1）创建目录。在树形目录结构中，用户可为自己建立UFD，并可再创建子目录。在 用户要创建一个新文件时，只需查看在自己的UFD及其子目录中有无与新建文件相同的文 件名，若无，便可在UFD或其某个子目录中增加一个新目录项。

(2）删除目录。对于一个已不再需要的目录，如何删除其目录项，要视情况而定。如 果所要删除的目录是空的，即在该目录中已不再有任何文件，就可简单地将该目录项删除， 或子目录，则可采用下述两种方法处理： ①不删除非空目录。当目录（文件)不空时，不能将其删除，而为了删除一个非空目录， 必须先删除目录中的所有文件，使之先成为空目录，然后再予以删除。如果目录中还包含 有子目录，还必须采取递归调用方式来将其删除，在MS-DOS中就是采用这种删除方式。 ②可删除非空目录。当要删除一目录时，如果在该目录中还包含有文件，则目录中的 所有文件和子目录也同时被删除。 上述两种方法实现起来都比较容易，第二种方法比较方便，但却比较危险。因为整个

(3）改变目录。使用绝对路径名对用户来说是比较麻烦的。用户可利用改变目录的命 令，通过指定目录的绝对或相对路径名设置当前目录。如果在使用改变目录的命令时，没 有明确地指明任何目录，通常在默认的情况下会自动地改变到主目录（与指定用户相关的最 顶层目录)。

（4）移动目录。到了一个阶段，通常都需要对目录组织进行调整，即将文件或子目录 在不同的父目录之间移动。文件或子目录经移动后，其文件的路径名将随之改变。

(5）链接(Limk)操作。对于树形结构目录，每个文件和每个目录都只允许有一个父目录， 这样不适合文件共享，但可以通过链接操作让指定文件具有多个父目录，从而方便了文件 共享。关于链接操作将在文件共享中作详细介绍。

（6）查找。当文件目录非常庞大时，要查找一个指定文件是有点困难的。因此在所有 的OS中都支持以多种方式进行查找，如可以从根目录或当前目录位置开始进行查找。在 进行搜索时，可用精确匹配或局部匹配方式等。

7.3.4目录查询技术 一一← 当用户要访问一个已存文件时，系统首先利用用户提供的文件名对目录进行查询，找 出该文件的文件控制块或对应索引结点。然后，根据FCB或索引结点中记录的文件物理地 址(盘块号），换算出文件在磁盘上的物理位置。最后，再通过磁盘驱动程序将所需文件读 238  第七章文件管理 入内存。目前，对目录进行查询的方式主要有两种：线性检索法和Hash方法。

1.线性检索法 线性检索法又称为顺序检索法。在单级目录中，利用用户提供的文件名，用顺序查找 法直接从文件目录中找到指名文件的目录项。在树形目录中，用户提供的文件名是由多个 文件分量名组成的路径名，此时需对多级目录进行查找。假定用户给定的文件路径名是 /usr/ast/mbox，则查找/usr/ast/mbox文件的过程如图7-12所示。 结点是 132号盘块是 结点26是 496号盘块是 根目录 /usr的目录 /usr的目录 /usr/ast的目录 /usr/ast的目录 26 1 1 6 bin 19 64 grants dev 132 30 erik 496 92 books 14 lib 51 jim 60 mbox 9 26 ast 81 minik 6 usr 45 bal 17 src 8 tmp 在结点6中查找 usr字段 图7-12查找/usr/ast/mbox的步骤 其查找过程说明如下： 首先，系统应先读入第一个文件分量名usr，用它与根目录文件（或当前目录文件）中各 目录项中的文件名顺序地进行比较，从中找出匹配者，并得到匹配项的索引结点号6，再 从6号索引结点中得知usr目录文件放在132号盘块中，将该盘块内容读入内存。 其次，系统再将路径名中的第二个分量名ast读入，用它与放在132号盘块中的第二级目 录文件中各目录项的文件名顺序进行比较，又找到匹配项，从中得到ast的目录文件放在26 号索引l结点中，再从26号索引结点中得知/usr/ast存放在496号盘块中，再读入496号盘块。 然后，系统又将该文件的第三分量名mbox读入，用它与第三级目录文件usr/ast中各 目录项中的文件名进行比较，最后得到/usr/ast/mbox的索引l结点号为60，即在60号索引l 结点中存放了指定文件的物理地址。目录查询操作到此结束。如果在顺序查找过程中，发 现有一个文件分量名未能找到，则应停止查找，并返回“文件未找到”信息。

2.Hash方法 在7.2.6节中曾介绍了Hash文件。如果我们建立了一张Hash索引文件目录，便可利用 Hash方法进行查询，即系统利用用户提供的文件名，并将它变换为文件目录的索引值，再 利用该索引值到目录中去查找，这样将显著地提高检索速度。 顺便指出，在现代操作系统中，通常都提供了模式匹配功能，即在文件名中使用了通 配符“*”、“？”等。对于使用了通配符的文件名，此时系统便无法利用Hash法检索目 239  计算机操作系统 录，因此，系统还是需要利用线性查找法查找目录。 在进行文件名的转换时，有可能把n个不同的文件名转换为相同的Hash值，即出现了 所谓的“冲突”。一种处理此“冲突”的有效规则是：

(1）在利用Hash法索引查找目录时，如果目录表中相应的目录项是空的，则表示系统 中并无指定文件。

（2）如果目录项中的文件名与指定文件名相匹配，则表示该目录项正是所要寻找的文 件所对应的目录项，故而可从中找到该文件所在的物理地址。

（3）如果在目录表的相应目录项中的文件名与指定文件名并不匹配，则表示发生了“冲 突”，此时须将其Hash值再加上一个常数（该常数应与目录的长度值互质)，形成新的索引 值，再返回到第一步重新开始查找。

7.4文件共享 在现代计算机系统中，必须提供文件共享手段，即指系统应允许多个用户（进程）共享 同一份文件。这样，在系统中只需保留该共享文件的一份副本。如果系统不能提供文件共 享功能，就意味着凡是需要该文件的用户，都须各自备有此文件的副本，显然这会造成对 存储空间的极大浪费。随着计算机技术的发展，文件共享的范围也在不断扩大，从单机系 统中的共享，扩展为多机系统的共享，进而又扩展为计算机网络范围的共享，甚至实现全 世界的文件共享。 早在20世纪的60和70年代，已经出现了不少实现文件共享的方法，如绕弯路法、连 访法，以及利用基本文件实现文件共享的方法：而现代的一些文件共享方法，也是在早期 这些方法的基础上发展起来的。下面我们仅介绍当前常用的两种文件共享方法，它们是在 树形结构目录的基础上经适当修改形成的，

7.4.1基于有向无循环图实现文件共享

1.有向无循环图DAG（DirectedAcyclicGraph） 在严格的树形结构目录中，每个文件只允许有一个父目录，父目录可以有效地拥有该 文件，其它用户要想访问它，必须经过其属主目录来访问该文件。这就是说，对文件的共 享是不对称的，或者说，树形结构目录是不适合文件共享的。如果允许一个文件可以有多 个父目录，即有多个属于不同用户的多个目录，同时指向同一个文件，这样虽会破坏树的 特性，但这些用户可用对称的方式实现文件共享，而不必再通过其属主目录来访问。 图7-13示出了一个有向无循环图，它允许每一个文件都可以有多个父目录。如图中的 目录D6有两个父目录D2和D1。 由上所述得知，当有多个用户要共享一个子目录或文件时，必须将共享文件或子目录 链接到多个用户的父目录中，才能方便地找到该文件。现在的问题是，如何建立父目录D5 与共享文件F8之间的链接呢？如果在文件目录中所包含的是文件的物理地址，即文件所在 盘块的盘块号，则在链接时，必须将文件的物理地址拷贝到D5目录中去。但如果以后D5 240
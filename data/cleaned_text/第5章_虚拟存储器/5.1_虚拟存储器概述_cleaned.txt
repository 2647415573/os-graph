第五章虚拟存储器 第五章虚拟存储器 虚拟存储器作为现代操作系统中存储器管理的一项重要技术，实现了内存扩充功能。 但该功能并非是从物理上实际地扩大内存的容量，而是从逻辑上实现对内存容量的扩充， 让用户所感觉到的内存容量比实际内存容量大得多。于是便可以让比内存空间更大的程序 运行，或者让更多的用户程序并发运行。这样既满足了用户的需要，又改善了系统的性能。 本章将对虚拟存储的有关概念和技术做较详细的阐述。

15.1虚拟存储器概述 部装入内存后方能运行。于是，出现了下面这样两种情况：

（1）有的作业很大，其所要求的内存空间超过了内存总容量，作业不能全部被装入内 存，致使该作业无法运行；

（2）有大量作业要求运行，但由于内存容量不足以容纳所有这些作业，只能将少数作 业装入内存让它们先运行，而将其它大量的作业留在外存上等待。 出现上述两种情况的原因都是由于内存容量不够大。一个显而易见的解决方法是从物 理上增加内存容量，但这往往会受到机器自身的限制，而且无疑要增加系统成本，因此这 种方法是受到一定限制的。另一种方法是从逻辑上扩充内存容量，这正是虚拟存储技术所 要解决的主要问题。

5.1.1常规存储管理方式的特征和局部性原理 一←

1.常规存储器管理方式的特征 具有如下两个共同的特征：

(1）一次性，是指作业必须一次性地全部装入内存后方能开始运行。在传统存储器管理 方式中，无一例外地要求先将作业全部装入内存后方能运行。正是这一特征导致了大作业 无法在小内存中运行，以及无法进一步提高系统的多道程序度，直接限制了对处理机的利 用率和系统的吞吐量的提高。事实上，许多作业在运行时，并非需要用到全部程序和数据， 如果一次性地装入其全部程序和数据，显然也是对内存空间的一种浪费。

(2）驻留性，是指作业被装入内存后，整个作业都一直驻留在内存中，其中任何部分 153  计算机操作系统 都不会被换出，直至作业运行结束。尽管运行中的进程会因IVO等原因而被阻塞，可能处 于长期等待状态，或者有的程序模块在运行过一次后就不再需要(运行)了，它们都仍将驻 留在内存中，继续占用宝贵的内存资源。 由此可以看出，上述的一次性及驻留性特征使得许多在程序运行中不用或暂时不用的 程序(数据)占据了大量的内存空间，而一些需要运行的作业又无法装入运行，显然，这是 在浪费宝贵的内存资源。现在要研究的问题是：一次性及驻留性特征是否是程序在运行时 所必需的和不可改变的。

2.局部性原理 程序运行时存在的局部性现象，很早就已被人发现，但直到1968年，PDenning才真 正指出：程序在执行时将呈现出局部性规律，即在一较短的时间内，程序的执行仅局限于 某个部分，相应地，它所访问的存储空间也局限于某个区域。他提出了下述几个论点： 的。该论点也在后来许多学者对高级程序设计语言（如FORTRAN语言、PASCAL语言及C 语言）规律的研究中被证实。

（2）过程调用将会使程序的执行轨迹由一部分区域转至另一部分区域。但经研究看出， 过程调用的深度在大多数情况下都不超过5。这就是说，程序将会在一段时间内，都局限 在这些过程的范围内运行。

（3）程序中存在许多循环结构，这些结构虽然只由少数指令构成，但是它们将被多次 执行。

（4）程序中还包括许多对数据结构的处理，如对数组进行操作，这些处理往往都局限 于很小的范围内。 局限性又表现在下述两个方面：

（1）时间局限性。如果程序中的某条指令被执行，则不久以后该指令可能再次执行： 如果某数据被访问过，则不久以后该数据可能再次被访问。产生时间局限性的典型原因是 在程序中存在着大量的循环操作。

（2）空间局限性。一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也 将被访问，即程序在一段时间内所访问的地址可能集中在一定的范围之内，其典型情况便 是程序的顺序执行。

3.虚拟存储器的基本工作情况 基于局部性原理可知，应用程序在运行之前没有必要将之全部装入内存，而仅须将那 些当前要运行的少数页面或段先装入内存便可运行，其余部分暂留在盘上。程序在运行时， 如果它所要访问的页(段)已调入内存，便可继续执行下去；但如果程序所要访问的页(段) 尚未调入内存（称为缺页或缺段)，便发出缺页（段)中断请求，此时OS将利用请求调页（段） 功能将它们调入内存，以使进程能继续执行下去。如果此时内存已满，无法再装入新的页 （段），OS还须再利用页（段）的置换功能，将内存中暂时不用的页（段）调至盘上，腾出足够的 内存空间后，再将要访问的页（段）调入内存，使程序继续执行下去。这样，便可使一个大 的用户程序在较小的内存空间中运行，也可在内存中同时装入更多的进程，使它们并发 执行。 154  第五章虚拟存储器

5.1.2虚拟存储器的定义和特征

1.虚拟存储器的定义 当用户看到自已的程序能在系统中正常运行时，他会认为，该系统所具有的内存容量 一定比自己的程序大，或者说，用户所感觉到的内存容量会比实际内存容量大得多。但用 户所看到的大容量只是一种错觉，是虚的，故人们把这样的存储器称为虚拟存储器。 综上所述，所谓虚拟存储器，是指具有请求调入功能和置换功能，能从逻辑上对内存 容量加以扩充的一种存储器系统。其逻辑容量由内存容量和外存容量之和所决定，其运行 速度接近于内存速度，而每位的成本却又接近于外存。可见，，虚拟存储技术是一种性能非 常优越的存储器管理技术，故被广泛地应用于大、中、小型机器和微型机中。

2.虚拟存储器的特征 与传统的存储器管理方式比较，虚拟存储器具有以下三个重要特征：

（1）多次性。多次性是相对于传统存储器管理方式的一次性而言的，是指一个作业中 的程序和数据无需在作业运行时一次性地全部装入内存，而是允许被分成多次调入内存运 行，即只需将当前要运行的那部分程序和数据装入内存即可开始运行。以后每当要运行到 尚未调入的那部分程序时，再将它调入。正是由于虚拟存储器的多次性特征，才使它具有从 逻辑上扩大内存的功能。无疑，多次性是虚拟存储器最重要的特征，它是任何其它的存储管 理方式所不具有的。因此，我们也可以认为虚拟存储器是具有多次性特征的存储器管理系统。

（2）对换性。对换性是相对于传统存储器管理方式的常驻性而言，是指一个作业中的 程序和数据，无须在作业运行时一直常驻内存，而是允许在作业的运行过程中进行换进、 换出，亦即，在进程运行期间，充许将那些暂不使用的代码和数据从内存调至外存的对换 调至外存，待它们重又具备运行条件时再调入内存。换进和换出能有效地提高内存利用率。 可见，虚拟存储器具有对换性特征，也正是由于这一特征，才使得虚拟存储器得以正常运 行。试想，如果虚拟存储器不具有换出功能，即不能把那些在存储器中暂时不运行的进程 或页面（段）换至外存，不仅不能充分地利用内存，而且还会使在换入时，因无足够的内存 空间，而经常以失败告终。

(3）虚拟性。虚拟性是指能够从逻辑上扩充内存容量，使用户所看到的内存容量远大 于实际内存容量。这样，就可以在小的内存中运行大的作业，或者能提高多道程序度。它 不仅能有效地改善内存的利用率，还可提高程序执行的并发程度，从而可以增加系统的吞 吐量。这是虚拟存储器所表现出来的最重要的特征，也是实现虚拟存储器的最重要的目标。 正是由于它具有这一特征，才使得虚拟存储器目前已成为在大、中、小及微机上最广泛采 用的存储器管理方式。 值得说明的是，虚拟性是以多次性和对换性为基础的，或者说，仅当系统允许将作业 分多次调入内存，并能将内存中暂时不运行的程序和数据换至盘上时，才有可能实现虚拟 存储器：而多次性和对换性显然又必须建立在离散分配的基础上。

5.1.3虚拟存储器的实现方法 在虚拟存储器中，允许将一个作业分多次调入内存。如果采用连续分配方式时，要求 155  计算机操作系统 个作业的内存空间，以便能将该作业分先后地多次装入内存。这不仅会使相当一部分内存 空间都处于暂时或“永久”的空闲状态，造成内存资源的严重浪费，而且无法、也无意义 再从逻辑上扩大内存容量。所以，虚拟存储器的实现，都毫无例外地建立在离散分配存储 管理方式的基础上。目前，所有的虚拟存储器都是采用下述方式之一实现的。

1.分页请求系统 分页请求系统是在分页系统的基础上增加了请求调页功能和页面置换功能所形成的页 式虚拟存储系统。它允许用户程序只装入少数页面的程序（及数据）即可启动运行。以后， 再通过调页功能及页面置换功能陆续地把即将运行的页面调入内存，同时把暂不运行的页 面换出到外存上。置换时以页面为单位。为了能实现请求调页和页面置换功能，系统必须 提供必要的硬件支持和实现请求分页的软件。 1）硬件支持 主要的硬件支持有：

（1）请求分页的页表机制。它是在纯分页的页表机制上增加若干项而形成的，作为请 求分页的数据结构。

（2）缺页中断机构。每当用户程序要访问的页面尚未调入内存时，便产生一缺页中断， 以请求OS将所缺的页调入内存。

（3）地址变换机构。它同样是在纯分页地址变换机构的基础上发展形成的。 2）实现请求分页的软件 这里包括有用于实现请求调页的软件和实现页面置换的软件。它们在硬件的支持下， 将程序正在运行时所需的页面（尚未在内存中的）调入内存，再将内存中暂时不用的页面从 内存置换到磁盘上。

2.请求分段系统 请求分段系统是在分段系统的基础上，增加了请求调段及分段置换功能后所形成的段 式虚拟存储系统。它允许用户程序只要装入少数段（而非所有的段）的程序和数据即可启动 运行。以后通过调段功能和段的置换功能将暂不运行的段调出，再调入即将运行的段。置 换是以段为单位进行的。为了实现请求分段，系统同样需要必要的硬件和软件支持。 1)硬件支持 主要的硬件支持有：

（1）请求分段的段表机制。它是在纯分段的段表机制上增加若干项而形成的，作为请 求分段的数据结构。

(2）缺页中断机构。每当用户程序要访问的段尚未调入内存时，便产生一缺段中断， 以请求OS将所缺的段调入内存。

(3）地址变换机构。它同样是在纯分段地址变换机构的基础上发展形成的。 2）软件支持 这里包括有用于实现请求调段的软件和实现段置换的软件。它们在硬件的支持下，先 的）调入内存。虚拟存储器在实现上是具有一定难度的。相对于请求分段系统，因为请求分 156  第五章虚拟存储器 系统换进换出的基本单位是段，其长度是可变的，分段的分配类似于动态分区方式，它在 内存分配和回收上都比较复杂。 目前，有不少虚拟存储器是建立在段页式系统基础上的，通过增加请求调页和页面置 换功能形成了段页式虚拟存储器系统，而且把实现虚拟存储器所需支持的硬件集成在处理 器芯片上。例如，早在20世纪80年代中期，Intel80386处理器芯片便已具备了支持段页 式虚拟存储器的功能，以后推出的80486、80586以及P2、P3、P4等芯片中，都无一例外 地具有支持段页式虚拟存储器的功能。 /5.2请求分页存储管理方式 请求分页系统是建立在基本分页基础上的，为了能支持虚拟存储器功能，而增加了请 求调页功能和页面置换功能。相应地，每次调入和换出的基本单位都是长度固定的页面， 这使得请求分页系统在实现上要比请求分段系统简单（后者在换进和换出时是可变长度的 段）。因此，请求分页便成为目前最常用的一种实现虚拟存储器的方式。

5.2.1请求分页中的硬件支持 一·一令 为了实现请求分页，系统必须提供一定的硬件支持。计算机系统除了要求一定容量的 内存和外存外，还需要有请求页表机制、缺页中断机构以及地址变换机构。

1.请求页表机制 在请求分页系统中需要的主要数据结构是请求页表，其基本作用仍然是将用户地址空 间中的逻辑地址映射为内存空间中的物理地址。为了满足页面换进换出的需要，在请求页 表中又增加了四个字段。这样，在请求分页系统中的每个页表应含以下诸项： 页号 物理块号 状态位P 访问字段A 修改位M 外存地址 现对其中各字段说明如下：

(1）状态位(存在位)P：由于在请求分页系统中，只将应用程序的一部分调入内存，还 有一部分仍在外存磁盘上，故须在页表中增加一个存在位字段。由于该字段仅有一位，故 又称位字。它用于指示该页是否已调入内存，供程序访问时参考。

(2）访问字段A：用于记录本页在一段时间内被访问的次数，或记录本页最近已有多 长时间未被访问，提供给置换算法（程序)在选择换出页面时参考。

(3）修改位M：标识该页在调入内存后是否被修改过。由于内存中的每一页都在外存 上保留一份副本，因此，在置换该页时，若未被修改，就不需再将该页写回到外存上，以 减少系统的开销和启动磁盘的次数；若已被修改，则必须将该页重写到外存上，以保证外 存中所保留的副本始终是最新的。简而言之，M位供置换页面时参考。

(4）外存地址：用于指出该页在外存上的地址，通常是物理块号，供调入该页时参考。

2.缺页中断机构 在请求分页系统中，每当所要访问的页面不在内存时，便产生一缺页中断，请求OS 157
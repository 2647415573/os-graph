第五章虚拟存储器 系统换进换出的基本单位是段，其长度是可变的，分段的分配类似于动态分区方式，它在 内存分配和回收上都比较复杂。 目前，有不少虚拟存储器是建立在段页式系统基础上的，通过增加请求调页和页面置 换功能形成了段页式虚拟存储器系统，而且把实现虚拟存储器所需支持的硬件集成在处理 器芯片上。例如，早在20世纪80年代中期，Intel80386处理器芯片便已具备了支持段页 式虚拟存储器的功能，以后推出的80486、80586以及P2、P3、P4等芯片中，都无一例外 地具有支持段页式虚拟存储器的功能。 /5.2请求分页存储管理方式 请求分页系统是建立在基本分页基础上的，为了能支持虚拟存储器功能，而增加了请 求调页功能和页面置换功能。相应地，每次调入和换出的基本单位都是长度固定的页面， 这使得请求分页系统在实现上要比请求分段系统简单（后者在换进和换出时是可变长度的 段）。因此，请求分页便成为目前最常用的一种实现虚拟存储器的方式。

5.2.1请求分页中的硬件支持 一·一令 为了实现请求分页，系统必须提供一定的硬件支持。计算机系统除了要求一定容量的 内存和外存外，还需要有请求页表机制、缺页中断机构以及地址变换机构。

1.请求页表机制 在请求分页系统中需要的主要数据结构是请求页表，其基本作用仍然是将用户地址空 间中的逻辑地址映射为内存空间中的物理地址。为了满足页面换进换出的需要，在请求页 表中又增加了四个字段。这样，在请求分页系统中的每个页表应含以下诸项： 页号 物理块号 状态位P 访问字段A 修改位M 外存地址 现对其中各字段说明如下：

(1）状态位(存在位)P：由于在请求分页系统中，只将应用程序的一部分调入内存，还 有一部分仍在外存磁盘上，故须在页表中增加一个存在位字段。由于该字段仅有一位，故 又称位字。它用于指示该页是否已调入内存，供程序访问时参考。

(2）访问字段A：用于记录本页在一段时间内被访问的次数，或记录本页最近已有多 长时间未被访问，提供给置换算法（程序)在选择换出页面时参考。

(3）修改位M：标识该页在调入内存后是否被修改过。由于内存中的每一页都在外存 上保留一份副本，因此，在置换该页时，若未被修改，就不需再将该页写回到外存上，以 减少系统的开销和启动磁盘的次数；若已被修改，则必须将该页重写到外存上，以保证外 存中所保留的副本始终是最新的。简而言之，M位供置换页面时参考。

(4）外存地址：用于指出该页在外存上的地址，通常是物理块号，供调入该页时参考。

2.缺页中断机构 在请求分页系统中，每当所要访问的页面不在内存时，便产生一缺页中断，请求OS 157  计算机操作系统 将所缺之页调入内存。缺页中断作为中断，它们同样需要经历诸如保护CPU环境、分析中 断原因、转入缺页中断处理程序进行处理，以及在中断处理完成后再恢复CPU环境等几个 步骤。但缺页中断又是一种特殊的中断，它与一般的中断相比有着明显的区别，主要表现 在下面两个方面：

（1）在指令执行期间产生和处理中断信号。通常， 页面 CPU都是在一条指令执行完后，才检查是否有中断请 B: 求到达。若有，便去响应，否则，继续执行下一条指 令。然而，缺页中断是在指令执行期间，若发现所要 5 访问的指令或数据不在内存时，便立即产生和处理缺 A: 页中断信号，以便能及时将所缺之页面调入内存。

(2）一条指令在执行期间可能产生多次缺页中 3 断。在图5-1中示出了一个例子。如在执行一条指令 指令 2 copyA copyAtoB时，可能要产生6次缺页中断，其中指令 toB 本身跨了两个页面，A和B又分别各是一个数据块， 也都跨了两个页面。基于这些特征，系统中的硬件机 图5-1涉及6次缺页中断的指令 构应能保存多次中断时的状态，并保证最后能返回到 中断前产生缺页中断的指令处继续执行。

5 165 159

3.地址变换机构 请求分页系统中的地址变换机构是在分页系统地址变换机构的基础上，为实现虚拟存 储器，再增加了某些功能所形成的，如产生和处理缺页中断，以及从内存中换出一页的功 能等等。图5-2示出了请求分页系统中的地址变换过程。 程序请求访问一页 开始） 是 保留CPU现场 页号>页表长度？ 越界中断 否 从外存中找到缺页 CPU检索快表 内存满否？ 否 页表项在快表中？ 是 选择一页换出 否 访问页表 香 该页被修改否？ 否 页在内存？ 是 将该页写回外存 是 修改快表 OS命令CPU从外存读缺页 修改访问位和修改位 启动IO硬件 形成物理地址 将一页从外存换入内存 （地址变换结束 修改页表 图5-2请求分页中的地变换过程 158  第五章虚拟存储器 在进行地址变换时，首先检索快表，试图从中找出所要访问的页。若找到，便修改页 表项中的访问位，供置换算法选换出页面时参考。对于写指令，还须将修改位置成“1”， 表示该页在调入内存后已被修改。然后利用页表项中给出的物理块号和页内地址形成物理 地址。地址变换过程到此结束。 如果在快表中未找到该页的页表项，则应到内存中去查找页表，再从找到的页表项中 的状态位P来了解该页是否已调入内存。若该页已调入内存，这时应将该页的页表项写入 快表。当快表已满时，则应先调出按某种算法所确定的页的页表项，然后再写入该页的页 表项；若该页尚未调入内存，这时应产生缺页中断，请求OS从外存把该页调入内存。

5.2.2请求分页中的内存分配 在为进程分配内存时，将涉及到三个问题：第一，为保证进程能正常运行，所需要的 最小物理块数的确定；第二，在为每个进程分配物理块时，应采取什么样的分配策略，即 所分配的物理块是固定的，还是可变的；第三，为不同进程所分配的物理块数，是采取平 均分配算法，还是根据进程的大小按比例分配。

1.最小物理块数的确定 一个显而易见的事实是，随着为每个进程所分配的物理块的减少，将使进程在执行中 的缺页率上升，从而会降低进程的执行速度。为使进程能有效地工作，应为它分配一定数 目的物理块，但这并不是最小物理块数的概念。 最小物理块数是指能保证进程正常运行所需的最小物理块数，当系统为进程分配的物 理块数少于此值时，进程将无法运行。至于进程应获得的最少物理块数，与计算机的硬件 结构有关，取决于指令的格式、功能和寻址方式。对于某些简单的机器，若是单地址指令， 且采用直接寻址方式，则所需的最少物理块数为2。其中，一块是用于存放指令的页面， 另一块则是用于存放数据的页面。如果该机器允许间接寻址，则至少要求有三个物理块。 对于某些功能较强的机器，其指令长度可能是两个或多于两个字节，因而其指令本身有可 能跨两个页面，且源地址和目标地址所涉及的区域也都可能跨两个页面。正如前面所介绍 的在缺页中断机构中要发生6次中断的情况一样，对于这种机器，至少要为每个进程分配 6个物理块，以装入6个页面。

2.内存分配策略 在请求分页系统中，可采取两种内存分配策略，即固定和可变分配策略。在进行置换 时，也可采取两种策略，即全局置换和局部置换。于是可组合出以下三种适用的策略。 1）固定分配局部置换（FixedAllocation，LocalReplacement) 所谓固定分配，是指为每个进程分配一组固定数目的物理块，在进程运行期间不再改 变。所谓局部置换，是指如果进程在运行中发现缺页，则只能从分配给该进程的n个页面 中选出一页换出，然后再调入一页，以保证分配给该进程的内存空间不变。采用该策略时， 为每个进程分配多少物理块是根据进程类型（交互型或批处理型等）或根据程序员、程序管 理员的建议来确定的。实现这种策略的困难在于：应为每个进程分配多少个物理块难以确 定。若太少，会频繁地出现缺页中断，降低了系统的吞吐量。若太多，又必然使内存中驻 159  计算机操作系统 时，会花费更多的时间。 2)可变分配全局置换(VariableAllocation，GlobalReplacement) 所谓可变分配，是指先为每个进程分配一定数目的物理块，在进程运行期间，可根据 情况做适当的增加或减少。所谓全局置换，是指如果进程在运行中发现缺页，则将OS所 保留的空闲物理块（一般组织为一个空闲物理块队列）取出一块分配给该进程，或者以所有 进程的全部物理块为标的，选择一块换出，然后将所缺之页调入。这样，分配给该进程的 内存空间就随之增加。可变分配全局置换这可能是最易于实现的一种物理块分配和置换策 略，已用于若干个OS中。在采用这种策略时，凡产生缺页（中断）的进程，都将获得新的物 理块，仅当空闲物理块队列中的物理块用完时，OS才能从内存中选择一页调出。被选择调 出的页可能是系统中任何一个进程中的页，因此这个被选中的进程拥有的物理块会减少， 这将导致其缺页率增加。 3）可变分配局部置换（VariableAllocation，LocalReplacement) 该策略同样是基于进程的类型或根据程序员的要求，为每个进程分配一定数目的物理 块，但当某进程发现缺页时，只允许从该进程在内存的页面中选择一页换出，这样就不会 影响其它进程的运行。如果进程在运行中频繁地发生缺页中断，则系统须再为该进程分配 若干附加的物理块，直至该进程的缺页率减少到适当程度为止。反之，若一个进程在运行 过程中的缺页率特别低，则此时可适当减少分配给该进程的物理块数，但不应引起其缺页 率的明显增加。

3.物理块分配算法 在采用固定分配策略时，如何将系统中可供分配的所有物理块分配给各个进程，可采 用下述几种算法：

（1）平均分配算法，即将系统中所有可供分配的物理块平均分配给各个进程。例如， 当系统中有100个物理块，有5个进程在运行时，每个进程可分得20个物理块。这种方式 貌似公平，但由于未考虑到各进程本身的大小，会造成实际上的不公平。假设系统平均分 配给每个进程20个物理块，这样，一个进程只有10页，闲置了10个物理块，而另外一个 进程有200页，也仅被分配了20块，显然，后者必然会有很高的缺页率。

(2）按比例分配算法，即根据进程的大小按比例分配物理块。如果系统中共有n个进 程，每个进程的页面数为S，则系统中各进程页面数的总和为： s=∑s; 又假定系统中可用的物理块总数为m，则每个进程所能分到的物理块数为b可由下式计算： b;=s xm 这里，b应该取整，它必须大于最小物理块数。

(3）考虑优先权的分配算法。在实际应用中，为了照顾到重要的、紧迫的作业能尽快 地完成，应为它分配较多的内存空间。通常采取的方法是把内存中可供分配的所有物理块 分成两部分：一部分按比例地分配给各进程；另一部分则根据各进程的优先权进行分配， 160  第五章虚拟存储器 为高优先进程适当地增加其相应份额。在有的系统中，如重要的实时控制系统，则可能是 完全按优先权为各进程分配其物理块的。

5.2.3页面调入策略 为使进程能够正常运行，必须事先将要执行的那部分程序和数据所在的页面调入内存。 现在的问题是：

（1）系统应在何时调入所需页面；

(2）系统应从何处调入这些页面；

(3）是如何进行调入的。

1.何时调入页面 为了确定系统将进程运行时所缺的页面调入内存的时机，可采取预调页策略或请求调 页策略，现分述如下。

(1）预调页策略。如果进程的许多页是存放在外存的一个连续区域中，一次调入若干 个相邻的页会比一次调入一页更高效些。但如果调入的一批页面中的大多数都未被访问， 则又是低效的。于是便考虑采用一种以预测为基础的预调页策略，将那些预计在不久之后 便会被访问的页面预先调入内存。如果预测较准确，那么这种策略显然是很有吸引力的。 但遗憾的是，目前预调页的成功率仅约50%。 但预调页策略又因其特有的长处取得了很好的效果。首先可用于在第一次将进程调入 内存时，此时可将程序员指出的那些页先调入内存。其次是，在采用工作集的系统中，每 个进程都具有一张表，表中记录有运行时的工作集，每当程序被调度运行时，将工作集中 的所有页调入内存。关于工作集的概念将在5.4节中介绍。

(2）请求调页策略。当进程在运行中需要访问某部分程序和数据时，若发现其所在的 页面不在内存，便立即提出请求，由OS将其所需页面调入内存。由请求调页策略所确定 调入的页是一定会被访问的，再加之请求调页策略比较易于实现，故在目前的虚拟存储器 中，大多采用此策略。但这种策略每次仅调入一页，故须花费较大的系统开销，增加了磁

2.从何处调入页面 将请求分页系统中的外存分为两部分：用于存放文件的文件区和用于存放对换页面的 对换区。通常，由于对换区是采用连续分配方式，而文件区是采用离散分配方式，所以对 换区的数据存取（磁盘I/O）速度比文件区的高。这样，每当发生缺页请求时，系统应从何处 将缺页调入内存，可分成如下三种情况进行：

（1）系统拥有足够的对换区空间，这时可以全部从对换区调入所需页面，以提高调页 速度。为此，在进程运行前，便须将与该进程有关的文件从文件区拷贝到对换区。

(2）系统缺少足够的对换区空间，这时凡是不会被修改的文件，都直接从文件区调入； 而当换出这些页面时，由于它们未被修改，则不必再将它们重写到磁盘（换出），以后再调 入时，仍从文件区直接调入。但对于那些可能被修改的部分，在将它们换出时便须调到对 换区，以后需要时再从对换区调入。

(3）UNIX方式。由于与进程有关的文件都放在文件区，故凡是未运行过的页面，都应 161  计算机操作系统 从文件区调入。而对于曾经运行过但又被换出的页面，由于是被放在对换区，因此在下次 调入时应从对换区调入。由于UNIX系统允许页面共享，因此，某进程所请求的页面有可 能已被其它进程调入内存，此时也就无需再从对换区调入。

3.页面调入过程 每当程序所要访问的页面未在内存时（存在位为“O”），便向CPU发出一缺页中断，中 断处理程序首先保留CPU环境，分析中断原因后转入缺页中断处理程序。该程序通过查找 页表得到该页在外存的物理块后，如果此时内存能容纳新页，则启动磁盘IO，将所缺之页 调入内存，然后修改页表。如果内存已满，则须先按照某种置换算法，从内存中选出一页 准备换出：如果该页未被修改过（修改位为“0”），可不必将该页写回磁盘；但如果此页已 被修改（修改位为“1”），则必须将它写回磁盘，然后再把所缺的页调入内存，并修改页表 中的相应表项，置其存在位为“1”，并将此页表项写入快表中。在缺页调入内存后，利用 修改后的页表形成所要访问数据的物理地址，再去访问内存数据。整个页面的调入过程对 用户是透明的。

4.缺页率 假设一个进程的逻辑空间为n页，系统为其分配的内存物理块数为m（m≤n)。如果 在进程的运行过程中，访问页面成功（即所访问页面在内存中）的次数为S，访问页面失败 （即所访问页面不在内存中，需要从外存调入）的次数为F，则该进程总的页面访问次数为 A=S+F，那么该进程在其运行过程中的缺页率即为 F A 通常，缺页率受到以下几个因素的影响：

（1）页面大小。页面划分较大，则缺页率较低；反之，缺页率较高。

(2）进程所分配物理块的数目。所分配的物理块数目越多，缺页率越低；反之则越高。

(3）页面置换算法。算法的优劣决定了进程执行过程中缺页中断的次数，因此缺页率 是衡量页面置换算法的重要指标。

（4）程序固有特性。程序本身的编制方法对缺页中断次数有影响，根据程序执行的局 部性原理，程序编制的局部化程度越高，相应执行时的缺页程度越低。 事实上，在缺页中断处理时，当由于空间不足，需要置换部分页面到外存时，选择被 置换页面还需要考虑到置换的代价，如页面是否被修改过。没有修改过的页面可以直接放 弃，而修改过的页面则必须进行保存，所以处理这两种情况时的时间也是不同的。假设被 置换的页面被修改的概率是β，其缺页中断处理时间为t，被置换页面没有被修改的缺页中 断时间为tb，那么，缺页中断处理时间的计算公式为 t=βxta+(1-β)xtb /5.3页面置换算法 在进程运行过程中，若其所要访问的页面不在内存，而需把它们调入内存，但内存已 无空闲空间时，为了保证该进程能正常运行，系统必须从内存中调出一页程序或数据送到 162
计算机操作系统 驱动程序 逻辑设备名 物理设备名 逻辑设备名 系统设备表指针 入口地址 /dev/tty 1024 /dev/tty 3 /dev/printer 5 2046 /dev/printer 5 ： (a)表一 (b)表二 图6-19逻辑设备表

2.逻辑设备表的设置问题 在系统中可采取两种方式设置逻辑设备表： 第一种方式，是在整个系统中只设置一张LUT。由于系统中所有进程的设备分配情况 都记录在同一张LUT中，因而不允许在LUT中具有相同的逻辑设备名，这就要求所有用 户都不使用相同的逻辑设备名。在多用户环境下这通常是难以做到的，因而这种方式主要 用于单用户系统中。 第二种方式，是为每个用户设置一张LUT。每当用户登录时，系统便为该用户建立一 个进程，同时也为之建立一张LUT，并将该表放入进程的PCB中。由于通常在多用户系统 中都配置了系统设备表，故此时的逻辑设备表可以采用图6-19(b)中的格式。 用户层的I/O软件

6.6 一般而言，大部分的I/O软件都放在操作系统内部，但仍有一小部分在用户层，其中 包括与用户程序链接在一起的库函数，以及完全运行于内核之外的假脱机系统等。

6.6.1系统调用与库函数

1.系统调用 一方面，为使诸进程能有条不素地使用IVO设备，且能保护设备的安全性，不允许运 行在用户态的应用进程去直接调用运行在核心态(系统态)的OS过程。但另一方面，应用进 程在运行时，又必须取得OS所提供的服务，否则，应用程序几乎无法运行。为了解决此 矛盾，OS在用户层中引I入了一个中介过程一系统调用，应用程序可以通过它间接调用 OS中的IO过程，对IO设备进行操作。 系统中会有许多系统调用，它们的实现方法 用户态 内核态 是基本相同的。下面简单说明系统调用的执行过 用户程序 程。当应用程序需要执行某种IVO操作时，在应 系统调用 系统调用 用程序中必须使用相应的系统调用。当OS捕获 调用 命令 到应用程序中的该系统调用后，便将CPU的状 态从用户态转换到核心态，然后转向操作系统中 相应过程，由该过程完成所需的IO操作。执行 返回 完成后，系统又将CPU状态从核心态转换到用 户态，返回到应用程序继续执行。图6-20示出 图6-20系统调用的执行过程 204  第六章输入输出系统 了系统调用的执行过程。 事实上，由OS向用户提供的所有功能，用户进程都必须通过系统调用来获取，或者 说，系统调用是应用程序取得OS所有服务的唯一途径。在早期的操作中，系统调用是以 汇编语言形式提供的，所以只有在用汇编语言编写的程序中，才能直接使用系统调用，这 对用户是非常不方便的，后来在C语言中，首先提供了与系统调用相对应的库函数。

2.库函数 在C语言以及UNIX系统中，系统调用(如read)与各系统调用所使用的库函数（如read) 之间几乎是一一对应的。而微软定义了一套过程，称为Win32API的应用程序接口 （ApplicationProgramInterface），程序员利用它们取得Os服务，该接口与实际的系统调用 并不一一对应。用户程序通过调用对应的库函数使用系统调用，这些库函数与调用程序连 接在一起，被嵌入在运行时装入内存的二进制程序中。 在C语言中提供了多种类型的库函数，对于IVO方面，主要是对文件和设备进行读/ 写的库函数，以及控制/检查设备状态的库函数。显然这些库函数的集合也应是I/O系统的 组成部分。而且我们可以这样来看待内核和库函数之间的关系：内核提供了OS的基本功 能，而库函数扩展了OS内核，使用户能方便取得操作系统的服务。在许多现代OS中，系 统调用本身已经采用C语言编写，并以函数形式提供，所以在使用C语言编写的用户程序 中，可以直接使用这些系统调用。 另外，操作系统在用户层中还提供了一些非常有用的程序，如下面将要介绍的假脱机 系统，以及在网络传输文件时常使用的守护进程等，它们是运行在内核之外的程序，但它 们仍属于IO系统。

6.6.2假脱机（Spooling）系统 ← 如果说，通过多道程序技术可将一台物理CPU虚拟为多台逻辑CPU，从而允许多个 用户共享一台主机，那么，通过假脱机技术，则可将一台物理IO设备虚拟为多台逻辑I/O 设备，这样也就允许多个用户共享一台物理I/O设备。

1.假脱机技术 在20世纪50年代，为了缓和CPU的高速性与IVO设备低速性间的矛盾，而引I入了脱 机输入、脱机输出技术。该技术是利用专门的外围控制机，先将低速IO设备上的数据传 送到高速磁盘上，或者相反。这样当处理机需要输入数据时，便可以直接从磁盘中读取数 据，极大地提高了输入速度。反之，在处理机需要输出数据时，也可以很快的速度把数据 先输出到磁盘上，处理机便可去做自己的事情。 事实上，当系统中引入了多道程序技术后，完全可以利用其中的一道程序，来模拟脱 机输入时的外围控制机功能，把低速IVO设备上的数据传送到高速磁盘上。再用另一道程 序模拟脱机输出时外围控制机的功能，把数据从磁盘传送到低速输出设备上。这样，便可 在主机的直接控制下，实现以前的脱机输入、输出功能。此时的外围操作与CPU对数据的 处理同时进行，我们把这种在联机情况下实现的同时外围操作的技术称为SPOOLing (SimultaneausPeriphernalOperatingOnLine）技术，或称为假脱机技术。 205  计算机操作系统

2.SPOOLing的组成 如前所述，SPOOLing技术是对脱机输入/输出系统的模拟，相应地，如图6-21(a)所示， SPOOLing系统建立在通道技术和多道程序技术的基础上，以高速随机外存（通常为磁盘） 为后援存储器。SPOOLing的工作原理如图6-21(b)所示。 输入井 输入设备1 输出设备1 通 A 道 道 输入设备n 输出设备n 输出井 通道 输入进程 主机 输出进程 (a)SPOOLing系统的组成 输入进程 作业1输入 输入 输入 输入设备 缓冲区1 缓冲区2 作业n输入 井管理 内存 内存 程序 输 作业1输出 输出 输出 输出设备 .*. 缓冲区1 缓冲区2 作业n输出 运行的作业 输出进程 (a)SPOOLing的工作原理 假脱机 文件队列 口□口 空盘块队列 □□□□ 共享打印机 打印缓冲区 满盘块队列 假脱机 内存 打印进程 假脱机 硬盘 管理进程 ()假脱机打印机系统的组成 图6-21SPOOLing系统组成及工作原理 SPOOLing系统主要由以下四部分构成： 206  第六章输入输出系统

(1）输入井和输出井。这是在磁盘上开辟出来的两个存储区域。输入井模拟脱机输入 时的磁盘，用于收容I/O设备输入的数据。输出井模拟脱机输出时的磁盘，用于收容用户 程序的输出数据。输入/输出井中的数据一般以文件的形式组织管理，我们把这些文件称为 井文件。一个文件仅存放某一个进程的输入(或者输出)数据，所有进程的数据输入(或输出) 文件链接成为一个输入（或输出）队列。 盘之间速度不匹配的矛盾。输入缓冲区用于暂存由输入设备传送的数据，之后再传送到输 入井。输出缓冲区用于暂存从输出井传送的数据，之后再传送到输出设备。

（3）输入进程和输出进程。输入进程也称为预输入进程，用于模拟脱机输入时的外围 控制机，将用户要求的数据从输入设备传送到输入缓冲区，再存放到输入井。当CPU需要 输入设备时，直接从输入井读入内存。输出进程也称为缓输出进程，用于模拟脱机输出时 的外围控制机，把用户要求输入的数据从内存传送并存放到输出井，待输出设备空闲时， 再将输出井中的数据经过输出缓冲区输出至输出设备上。

（4）井管理程序。用于控制作业与磁盘井之间信息的交换。当作业执行过程中向某台 设备发出启动输入或输出操作请求时，由操作系统调用井管理程序，由其控制从输入井读 取信息或将信息输出至输出井。

3.SPOOLing系统的特点

（1）提高了I/O的速度。这里，对数据所执行的IVO操作，已从对低速I/O设备执行的 I/O操作演变为对磁盘缓冲区中数据的存取，如同脱机输入输出一样，提高了I/O速度，缓 和了CPU与低速I/O设备之间速度不匹配的矛盾。

（2）将独占设备改造为共享设备。因为在假脱机打印机系统中，实际上并没为任何进 程分配设备，而只是在磁盘缓冲区中为进程分配一个空闲盘块和建立一张IVO请求表。这 样，便把独占设备改造为共享设备。

(3）实现了虚拟设备功能。宏观上，虽然是多个进程在同时使用一台独占设备，而对 于每一个进程而言，它们都会认为自己是独占了一个设备。当然，该设备只是逻辑上的设 备。假脱机打印机系统实现了将独占设备变换为若干台对应的逻辑设备的功能。

4.假脱机打印机系统 打印机是经常用到的输出设备，属于独占设备。利用假脱机技术可将它改造为一台可 供多个用户共享的打印设备，从而提高设备的利用率，也方便了用户。共享打印机技术已 被广泛地用于多用户系统和局域网络中。假脱机打印系统主要有以下三部分：

（1）磁盘缓冲区。它是在磁盘上开辟的一个存储空间，用于暂存用户程序的输出数据， 在该缓冲区中可以设置几个盘块队列，如空盘块队列、满盘块队列等。

(2）打印缓冲区。用于缓和CPU和磁盘之间速度不匹配的矛盾，设置在内存中，暂存 从磁盘缓冲区送来的数据，以后再传送给打印设备进行打印。 据建立一个假脱机文件，并把它放入假脱机文件队列中，由假脱机打印进程依次对队列中 的文件进行打印。 图6-21（c)示出了假脱机打印机系统的组成。 207  计算机操作系统 每当用户进程发出打印输出请求时，假脱机打印机系统并不是立即把打印机分配给该 用户进程，而是由假脱机管理进程完成两项工作：①在磁盘缓冲区中为之申请一个空闲盘 块，并将要打印的数据送入其中暂存；②为用户进程申请一张空白的用户请求打印表，并 将用户的打印要求填入其中，再将该表挂到假脱机文件队列上。在这两项工作完成后，虽 然还没有进行任何实际的打印输出，但对于用户进程而言，其打印请求已经得到满足，打 印输出任务已经完成。 真正的打印输出是假脱机打印进程负责的，当打印机空闲时，该进程首先从假脱机文 内存缓冲区，再交付打印机进行打印。一个打印任务完成后，假脱机打印进程将再次查看 假脱机文件队列，若队列非空，则重复上述的工作，直至队列为空。此后，假脱机打印进 程将自己阻塞起来，仅当再次有打印请求时，才被重新唤醒运行。 由此可见，利用假脱机系统向用户提供共享打印机的概念是：对每个用户而言，系统 并非即时执行其程序输出数据的真实打印操作，而只是即时将数据输出到缓冲区，这时的 数据并未真正被打印，只是让用户感觉系统已为他打印；真正的打印操作，是在打印机空 一个时间片，没有使用专门的外围机；以上的过程是对用户屏蔽的，用户是不可见的。

5.守护进程（daemon） 前面是利用假脱机系统来实现打印机共享的一种方案，人们对该方案进行了某些修改， 如取消该方案中的假脱机管理进程，为打印机建立一个守护进程，由它执行一部分原来由 假脱机管理进程实现的功能，如为用户在磁盘缓冲区中申请一个空闲盘块，并将要打印的 数据送入其中，将该盘块的首址返回给请求进程。另一部分由请求进程自己完成，每个要 求打印的进程首先生成一份要求打印的文件，其中包含对打印的要求和指向装有打印输出 数据盘块的指针等信息，然后将用户请求打印文件放入假脱机文件队列（目录）中。 守护进程是允许使用打印机的唯一进程。所有需要使用打印机进行打印的进程都需将 一份要求打印的文件放在假脱机文件队列（目录）中。如果守护进程正在睡眠，便将它唤醒， 由它按照目录中第一个文件中的说明进行打印，打印完成后，再按照目录中第二个文件中 的说明进行打印，如此逐份文件地进行打印，直到目录中的全部文件打印完毕，守护进程 无事可做，又去睡眠。等待用户进程再次发来打印请求。 除了打印机守护进程之外，还可能有许多其它的守护进程，如服务器守护进程和网络 守护进程等。事实上，凡是需要将独占设备改造为可供多个进程共享的设备时，都要为该 设备配置一个守护进程和一个假脱机文件队列（目录）。同样，守护进程是允许使用该独占 设备的唯一进程，所有其它进程都不能直接使用该设备，只能将对该设备的使用要求写入 一份文件中，放在假脱机目录中。由守护进程按照目录中的文件依次来完成诸进程对该设 备的请求，这样就把一台独占设备改造为可为多个进程共享的设备。

6.7缓冲区管理 在现代操作系统中，几乎所有的IVO设备在与处理机交换数据时都用了缓冲区。缓冲 208
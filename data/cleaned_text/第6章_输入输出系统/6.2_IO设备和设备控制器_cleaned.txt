/6.21/0设备和设备控制器 IO设备一般是由执行IO操作的机械部分和执行控制I/O的电子部件组成。通常将这 两部分分开，执行IO操作的机械部分就是一般的I/O设备，而执行控制IO的电子部件则 称为设备控制器或适配器（adapter)。在微型机和小型机中的控制器常做成印刷电路卡形式， 因而也常称为控制卡、接口卡或网卡，可将它插入计算机的扩展槽中。在有的大、中型计 算机系统中，还配置了I/O通道或IO处理机。

6.2.11/0设备 一

1.I/O设备的类型 I/O设备的类型繁多，除了能将它们分为块设备和字符设备、独占设备和共享设备外， 还可从设备使用特性上分为存储设备和IO设备；从设备的传输速率上又分为高速设备、 中速共享设备和高速共享设备。下面对这两种分类进行介绍。 1）按使用特性分类 第一类是存储设备，也称外存、辅存，是用以存储信息的主要设备。该类设备存取速 度较内存慢，但容量却大得多，价格也便宜。第二类就是IO设备，它又可分为输入设备、 输出设备和交互式设备。输入设备用来接收外部信息，如键盘、鼠标、扫描仪、视频摄像 交互式设备则是指集成的上述两类设备，主要是显示器，用于同步显示用户命令以及命令 执行的结果。 2）按传输速率分类 按传输速度的高低，可将I/O设备分为三类。第一类是低速设备，其传输速率仅为每 秒钟几个字节至数百个字节。典型的低速设备有键盘、鼠标器。第二类是中速设备，其传 输速率在每秒钟数千个字节至数十万个字节。典型的中速设备有行式打印机、激光打印机 等。第三类是高速设备，其传输速率在数十万字节至千兆字节。典型的高速设备有磁带机、 磁盘机、光盘机等。

2.设备与控制器之间的接口 IVO设备 通常，设备并不是直接与CPU进行通信， 至设备数据信号线 信号 而是与设备控制器通信，因此，在I/O设备中 缓冲转换器 控制器 数据 应含有与设备控制器间的接口，在该接口中有 状态信号线 控制逻辑 三种类型的信号（见图6-3所示），各对应一条 控制信号线 信号线。

（1）数据信号线。这类信号线用于在设备 图6-3设备与控制器间的接口 和设备控制器之间传送数据信号。对输入设备 而言，由外界输入的信号经转换器转换后，所形成的数据通常先送入缓冲器中，当数据量 达到一定的比特（字符）数后，再从缓冲器通过一组数据信号线传送给设备控制器，如图6-3 183  计算机操作系统 所示。对输出设备而言，则是将从设备控制器经过数据信号线传送来的一批数据先暂存于 缓冲器中，经转换器作适当转换后，再逐个字符地输出。

(2）控制信号线。这是作为由设备控制器向IVO设备发送控制信号时的通路。该信号规 定了设备将要执行的操作，如读操作（指由设备向控制器传送数据）或写操作（从控制器接收 数据），或执行磁头移动等操作。

(3）状态信号线。该信号线用于传送指示设备当前状态的信号。设备的当前状态有正 在读（或写）；设备已读（写）完成，并准备好新的数据传送。

6.2.2设备控制器 设备控制器的主要功能是，控制一个或多个IVO设备，以实现IO设备和计算机之间 的数据交换。它是CPU与IVO设备之间的接口，接收从CPU发来的命令，去控制IIO设备 工作，使处理机能够从繁杂的设备控制事务中解脱出来。设备控制器是一个可编址的设备， 当它仅控制一个设备时，它只有一个唯一的设备地址；若控制器可连接多个设备，则应含 控制字符设备的控制器，另一类是用于控制块设备的控制器。

1.设备控制器的基本功能

（1）接收和识别命令。设备控制器能接收并识别处理机发来的多种命令。在控制器中 具有相应的控制寄存器，用来存放接收的命令和参数，并对所接收的命令进行译码。例如， 磁盘控制器可以接收CPU发来的read、write、format等15条不同的命令，而且有些命 令还带有参数。相应地，在磁盘控制器中有多个寄存器和命令译码器等。

(2）数据交换。设备控制器可实现CPU与控制器之间、控制器与设备之间的数据交换 对于前者，是通过数据总线，由CPU并行地把数据写入控制器，或从控制器中并行地读出 数据。对于后者，是设备将数据输入到控制器，或从控制器传送给设备。为此，在控制器 中须设置数据寄存器。

（3）标识和报告设备的状态。控制器应记下设备的状态供CPU了解。例如，仅当该设 备处于发送就绪状态时，CPU才能启动控制器从设备中读出数据。为此，在控制器中应设 置一状态寄存器，用其中的每一位反映设备的某一种状态。当CPU将该寄存器的内容读入 后，便可了解该设备的状态。

(4）地址识别。就像内存中的每一个单元都有一个地址一样，系统中的每一个设备也 都有一个地址。设备控制器必须能够识别其所控制的每个设备的地址。此外，为使CPU能 向(或从)寄存器中写入(或读出)数据，这些寄存器都应具有唯一的地址。控制器应能正确识 别这些地址。为此，在控制器中应配置地址译码器。

（5）数据缓冲区。由于IO设备的速率较低，而CPU和内存的速率却很高，故在控制 器中必须设置一缓冲区。在输出时，用此缓冲区暂存由主机高速传来的数据，然后才以与 IVO设备所匹配的速率将缓冲器中的数据传送给IVO设备。在输入时，缓冲区则用于暂存从 IO设备送来的数据，待接收到一批数据后，再将缓冲区中的数据高速地传送给主机。

（6）差错控制。对于由IO设备传送来的数据，设备控制器还兼管进行差错检测。若发 现传送中出现了错误，通常是将差错检测码置位，并向CPU报告，于是CPU将本次传送 来的数据作废，并重新进行一次传送。这样便可保证数据输入的正确性。 184  第六章输入输出系统

2.设备控制器的组成 由于设备控制器位于CPU与设备之间，它既要与CPU通信，又要与设备通信，还应 具有按照CPU所发来的命令去控制设备工作的功能，因此，现有的大多数控制器都是由以 下三部分组成：

（1）设备控制器与处理机的接口。该接口用于实现CPU与设备控制器之间的通信，在 该接口中共有三类信号线：数据线、地址线和控制线。数据线通常与两类寄存器相连接： ①第一类是数据寄存器，在控制器中可以有一个或多个数据寄存器，用于存放从设备送来 的数据（输入），或从CPU送来的数据（输出）。②第二类是控制/状态寄存器，在控制器中可 以有一个或多个这类寄存器，用于存放从CPU送来的控制信息或设备的状态信息。

(2）设备控制器与设备的接口。在一个设备控制器上，可以连接一个或多个设备。相 应的，在控制器中便有一个或多个设备接口。在每个接口中都存在数据、控制和状态三种

(3）I/O逻辑。I/O逻辑用于实现对设备的控制。它通过一组控制线与处理机交互，处 理机利用该逻辑向控制器发送IVO命令。每当CPU要启动一个设备时，一方面将启动命令 发送给控制器，另一方面又同时通过地址线把地址发送给控制器，由控制器的I/O逻辑对 收到的地址进行译码，再根据所译出的命令对所选设备进行控制。 设备控制器的组成示于图6-4中。 CPU与控制器接口 控制器与设备接口 控制器 数据 数据线 数据寄存器 与设备 一状态 接口1 控制 控制/状态 寄存器 地址线 控制器 数据 1O逻辑 与设备 状态 控制线 接口i 控制 图6-4设备控制器的组成

6.2.3内存映像VO 一← 驱动程序将抽象I/O命令转换出的一系列具体的命令、参数等数据装入设备控制器的 相应寄存器，由控制器来执行这些命令，具体实施对IVO设备的控制。这一工作可用如下 两种方法完成：

1.利用特定的I/0指令 在早期的计算机中，包括大型计算机，为实现CPU和设备控制器之间的通信，为每个 控制寄存器分配一个I1/0端口，这是一个8位或16位的整数，如图6-5（a）所示。另外还设 置了一些特定的IO指令。例如，为了将CPU寄存器中的内容复制到控制器寄存器中，所 需使用的特定I/O指令可表示如下： io-storecpu-reg,dev-no, dev-reg 185  计算机操作系统 其中，cpu-reg是CPU的某个寄存器；dev-no是指定的设备，即控制器地址；dev-reg 指定 控制器中的寄存器。如果是将CPU寄存器中的内容存入内存的某个单元(k)中，将使用下面 的指令： Store cpu-reg, k 该方法的主要缺点是，访问内存和访问设备需要两种不同的指令。

2.内存映像1/O 在这种方式中，在编址上不再区分内存单元地址和设备控制器中的寄存器地址，都采 用k。当k值处于0～n-1范围时，被认为是内存地址，若k大于等于n时，被认为是某个 控制器的寄存器地址。由图6-5（b）可以看出，当k=n时，表示设备控制器0的第1个寄存 器opcode的地址。因此，如果要想将CPU寄存器中的内容传送到控制器0的第1个寄存 器opcode，只需要用下面的一般存储指令： Store cpu-reg, n 内存映像IV/O方式统一了对内存和对控制器的访问方法，这无疑将简化IO的编程。 地址 地址 0 0 内存 内存 n- n-1 dev_o opcode opcode Operand 0 设备 Operand 0 设备 n+2 Operand 1 控制器0 Operand1 控制器0 ： dev_1 opcode opcode Operand O 设备 Operand0 设备 Operand1 控制器1 Operand 1 控制器1 (a)采用特定的指令形式 (b)内存映像I/O形式 图6-5设备寻址形式

6.2.41/0通道

1.1V/0通道设备的引入 虽然在CPU与IO设备之间增加了设备控制器后，已能大大减少CPU对IVO的干预， 但当主机所配置的外设很多时，CPU的负担仍然很重。为此，在CPU和设备控制器之间又 增设了I/O通道（VOChannel)。其主要目的是为了建立独立的IO操作，不仅使数据的传送 能独立于CPU，而且也希望有关对I/O操作的组织、管理及其结束处理尽量独立，以保证 CPU有更多的时间去进行数据处理；或者说，其目的是使一些原来由CPU处理的IO任务 转由通道来承担，从而把CPU从繁杂的IVO任务中解脱出来。在设置了通道后，CPU只需 186  第六章输入输出系统 向通道发送一条IO指令。通道在收到该指令后，便从内存中取出本次要执行的通道程序， 然后执行该通道程序，仅当通道完成了规定的IVO任务后，才向CPU发中断信号。 实际上，IVO通道是一种特殊的处理机。它具有执行IO指令的能力，并通过执行通道 (IV/O)程序来控制IO操作。但I/O通道又与一般的处理机不同，主要表现在以下两个方面： 一是其指令类型单一，这是由于通道硬件比较简单，其所能执行的命令，主要局限于与I/O 操作有关的指令；二是通道没有自己的内存，通道所执行的通道程序是放在主机的内存中 的，换言之，是通道与CPU共享内存。

2.通道类型 前已述及，通道是用于控制外围设备（包括字符设备和块设备）的。由于外围设备的类 型较多，且其传输速率相差甚大，因而使通道具有多种类型。这里，根据信息交换方式的 不同，可把通道分成以下三种类型。 1）字节多路通道（ByteMultiplexorChannel) 这是一种按字节交叉方式工作的通道。它通常都含有许多非分配型子通道，其数量可 从几十到数百个，每一个子通道连接一台I/O设备，并控制该设备的I/O操作。这些子通 道按时间片轮转方式共享主通道。当第一个子通道控制其I/O设备完成一个字节的交换后， 便立即腾出主通道，让给第二个子通道使用；当第二个子通道也完成一个字节的交换后， 同样也把主通道让给第三个子通道：依此类推。当所有子通道轮转一周后，重又返回来由 第一个子通道去使用字节多路主通道。这样，只要字节多路通道扫描每个子通道的速率足 够快，而连接到子通道上的设备的速率又不是太高，便不致丢失信息。 图6-6示出了字节多路通道的工作原理。它所含有的多个子通道为A，B，C，D，E，， N，分别通过控制器各与一台设备相连。假定这些设备的速率相近，且都同时向主机传 送数据。设备A所传送的数据流为A1，A2，A3，“；设备B所传送的数据流为B1，B2， B3，；·……·把这些数据流合成后（通过主通道)送往主机的数据流为A1，B1，C，D，， A2, B2， C2， D2，…….，A3， B3，C3，D3，…。 设备 AA子通道A 控制器A O BB·子通道B 控制器B O AB,C...ABC2. CiC.子通道C 控制器C O 控制器D O O NN.子通道N 控制器E O O 图6-6字节多路通道的工作原理 2）数组选择通道（BlockSelectorChannel) 字节多路通道不适于连接高速设备，这推动了按数组方式进行数据传送的数组选择通 道的形成。这种通道虽然可以连接多台高速设备，但由于它只含有一个分配型子通道，在 一段时间内只能执行一道通道程序，控制一台设备进行数据传送，致使当某台设备占用了 该通道后，便一直由它独占，即使是它无数据传送，通道被闲置，也不允许其它设备使用 187  计算机操作系统 该通道，直至该设备传送完毕释放该通道。可见，这种通道的利用率很低。 3）数组多路通道(BlockMultiplexorChannel) 数组选择通道虽有很高的传输速率，但它却每次只允许一个设备传输数据。数组多路 通道是将数组选择通道传输速率高和字节多路通道能使各子通道(设备)分时并行操作的优 点相结合而形成的一种新通道。它含有多个非分配型子通道，因而这种通道既具有很高的 数据传输速率，又能获得令人满意的通道利用率。也正因此，才使该通道能被广泛地用于 连接多台高、中速的外围设备，其数据传送是按数组方式进行的。

3.“瓶颈”问题 由于通道价格昂贵，致使机器中所设置的通道数量势必较少，这往往又使它成了I/O 的瓶颈，进而造成整个系统吞吐量的下降。例如，在图6-7中，假设设备1至设备4是四 个磁盘，为了启动磁盘4，必须用通道1和控制器2；但若这两者已被其它设备占用，必然 无法启动磁盘4。类似地，若要启动盘1和盘2，由于它们都要用到通道1，因而也不可能 启动。这些就是由于通道不足所造成的“瓶颈”现象。 设备1 控制器1 通道1 设备2 控制器2 设备3 存储器 设备4 设备5 控制器3 通道2 设备6 控制器4 设备7 图6-7单通路I/O系统 6-8所示。换言之，就是把一个设备连接到多个控制器上，而一个控制器又连接到多个通道上。 图中的设备1、2、3和4，都有4条通往存储器的通路。例如，通过控制器1和通道1到存储 器；也可通过控制器2和通道1到存储器。多通路方式不仅解决了“瓶颈”问题，而且提高 了系统的可靠性，因为个别通道或控制器的故障不会使设备和存储器之间没有通路。 设备1 通道1 控制器1 设备2 存储器 设备3 通道2 控制器2 设备4 图6-8多通路IO系统 188  第六章输入输出系统

16.3中断机构和中断处理程序 NE 对于操作系统中的IO系统，本章采取从低层向高层的介绍方法，从本节开始首先介 绍中断处理程序。中断在操作系统中有着特殊重要的地位，它是多道程序得以实现的基础， 没有中断，就不可能实现多道程序，因为进程之间的切换是通过中断来完成的。另一方面， 中断也是设备管理的基础，为了提高处理机的利用率和实现CPU与IVO设备并行执行，也 必需有中断的支持。中断处理程序是IO系统中最低的一层，它是整个I/O系统的基础。

6.3.1中断简介

1.中断和陷入 1）中断 中断是指CPU对IO设备发来的中断信号的一种响应。CPU暂停正在执行的程序，保 留CPU环境后，自动地转去执行该IVO设备的中断处理程序。执行完后，再回到断点，继 续执行原来的程序。IO设备可以是字符设备，也可以是块设备、通信设备等。由于中断是 由外部设备引起的，故又称外中断。 2）陷入 另外还有一种由CPU内部事件所引起的中断，例如进程在运算中发生了上溢或下溢， 又如程序出错，如非法指令、地址越界，以及电源故障等。通常把这类中断称为内中断或 陷入（trap)。与中断一样，若系统发现了有陷入事件，CPU也将暂停正在执行的程序，转去 执行该陷入事件的处理程序。中断和陷入的主要区别是信号的来源，即是来自CPU外部， 还是CPU内部。

2.中断向量表和中断优先级 1）中断向量表 为了处理上的方便，通常是为每种设备配以相应的中断处理程序，并把该程序的入口 地址放在中断向量表的一个表项中，并为每一个设备的中断请求规定一个中断号，它直接 对应于中断向量表的一个表项中。当IVO设备发来中断请求信号时，由中断控制器确定该 请求的中断号，根据该设备的中断号去查找中断向量表，从中取得该设备中断处理程序的 入口地址，这样便可以转入中断处理程序执行。 2）中断优先级 然而实际情况是：经常会有多个中断信号源，每个中断源对服务要求的紧急程度并不 相同，例如，键盘终端的中断请求的紧急程度不如打印机，而打印机中断请求的紧急程度 又不如磁盘等。为此，系统就需要为它们分别规定不同的优先级。

3.对多中断源的处理方式 对于多中断信号源的情况，当处理机正在处理一个中断时，又来了一个新的中断请求， 信号。对于这种情况，可有两种处理方式：屏蔽(禁止)中断与嵌套中断。 189
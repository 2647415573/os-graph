第十一章多媒体操作系统 3）预留排序 应如何确定对预留的排序。有两种预留排序策略：

（1）按先来先服务策略排序，先到达的请求进程优先获得服务。

(2）按优先级排序，根据进程的优先级大小依次为所有请求进程进行服务。

111.4多媒体实时调度 的特性，如数据量大、数据速率高、要求能保证SRT任务的截止时间等，对多媒体实时调 度算法做进一步的介绍。

11.4.1最简单的实时调度方法 在多媒体服务器中，将为所播放的每一部数字电影建立一个进程。其主要任务是，不 断接收从硬盘上传送来的帧，经适当处理后，便送往屏幕。最简单的实时调度方法是，假 定所要播放的电影都具有相同的类型，如都是采用相同的制式、分辨率和压缩比的彩色数 字电影。这样，为这些电影所建立的进程可具有相同的周期和处理时间。因此，可将它们 按FCFS原则排成一个进程就绪队列，并采用定时轮转的策略来调度和运行它们。 在这样的情况下，进程调度的实现十分简单。设置系统中的定时器，每隔40ms嘀嗒 一次，让所有的进程在此时间内依次运行一次。首先选择就绪队列的队首进程运行，当它 只要系统中的进程数目不超过规定值，便能使所有进程在40ms内都执行一次。等到下一 次嘀嗒时，又重新调度队首进程运行，如此不断地循环执行。这样就能保证每部电影一帧 接一帧地正常播放。 事实上，这种最简单的实时调度方法只能用于要求不高的场合，即所播放的电影具有 相同的类型。但现实情况要复杂得多，电影的类型不同，每部电影可能采用了不同的制式、 色彩、分辨率和压缩比等。这将使不同电影的每一帧其大小相差甚多，进而导致每个进程 用于处理每部电影时，所需要的CPU时间会相差很大。此外，点播数字电影的用户数目经 常发生变化，而且还可能有许多用户点播同一部电影。这种简单的调度方法是很难满足实 际需要的。显然，此时需要一种能用于同时播放多部不同数字电影和动画的实时调度方法。 下面我们先介绍在多媒体中用得较多的速率单调调度算法。

11.4.2速率单调调度（RateMonotonicScheduling，RMS）算法 RMS算法是一个静态的、优先级驱动的算法，适用于抢占式优先级调度方式以及实时 任务是周期性的情况。在采用该算法时，系统中的进程应满足如下条件：

(1）在系统中允许同时存在周期性进程和非周期性进程，所有周期性任务具有固定的 周期。

(2）所有的进程之间相互独立，互不依赖。

(3）对于周期性进程而言，所有进程在一个周期中，所需完成的工作量是相同的，而 361  计算机操作系统 且任务还必须在周期内完成，不会影响到下一个周期的任务。 由于该调度算法主要是照顾周期性进程，而对于非周期性进程则仅以忙里偷闲的方式 来处理，故非周期性进程不应设有最终时限的限制。

1.优先级的确定 在利用速率单调调度算法进行实时调度的系统中，代理进程将根据各个进程的请求速 率（周期时间的倒数），分配给每一个进程一个静态优先级，在整个运行期间不变。该优先 级的大小与它的重要程度无关，只取决于进程的请求速率，请求速率最高的任务将获得最 高的优先级。实际上，进程的优先级大小就等于进程的运行频（速）率。 例如，有两个任务A和B，它们的周期分别是50ms和25ms，即它们的运行频率分 优先级与运行速率的关系是一个单调递增的函数，故把该算法称为速率单调调度算法。在 运行期间调度程序总是优先调度优先级最高的就绪进程，如有必要，还可抢占正在运行的 进程的处理机。

2.调度算法能否有效调度的衡量 在一个实时系统中，需要对调度算法是否能有效调度进行衡量，该衡量标准是依据调 其中T是进程P的周期时间，C是进程P所需的处理机时间总量，U;=C/T;是进程P的 处理机使用率。显然，在实时系统中必须保持多个进程的处理机使用率的总和不能超过1， 1对应于处理机的总使用率，也就是调度上限，只有这样才有可能成功地进行调度，亦即 应保持下面的不等式成立： (11.1) T T T, 周期2 周期！ 处理 处理 空闲 任务P，执行时间C 时间 任务P，周期T; 图11-2周期性任务的时序图 应当注意，上面的表达式忽略了处理机的调度和进程的切换时间，在实际应用中，调 度上限应取比1小的数，且随着处理机数目的增加而减小。LinandLayiand证明了对于任 何周期性进程系统，如果能保持下面不等式成立，就可以保证RMS算法正确工作。 ≤n（21-1) (11.2) TT T 在上式中，当n=1时，n（2lm-1)=1。n=2时n(2l/m-1)=0.828。n=3时，n（2lm-1)= 362  第十一章多媒体操作系统

0.779，随着n的增加，n(2lm-1)的值将逐渐减小，调度上限n(2"m-1)将收敛于0.693。假 如有三个周期性进程：进程P的C=20，T=100，U=0.2，进程P2的C2=40，T2=150， U2=0.267，进程P3的C=100，T=350，U3=0.286。这三个进程的总使用率为0.2+0.267+

0.286=0.753，它小于上界0.779，因此可以使用RMS调度算法进行调度。 由于大多数实时系统都会有部分软实时任务或非实时任务，系统管理员可以赋予非实 时任务较低的优先级，而让它仅在处理机已处理完实时任务的空闲时间来运行。值得一提 的是，RMS算法在广泛的应用中已经发现，公式（11.2)中的上限值偏于保守，处理机的总 使用率能达到90%

3.RMS算法实例 假如系统中有三个周期性进程，进程A每30ms运行一次，每次执行10ms：进程B 每40ms运行一次，每次执行15ms；进程C每50ms运行一次，每次执行5ms；图11-3 中的上面三行分别示出了A、B、C三个进程的周期和执行时间。由于优先级反比于进程的 周期，因此A、B、C三个进程的优先级分别为33、25和20。在t=0ms时，三个进程都处 于就绪状态，调度程序首先调度进程A运行；在t=10ms时，A运行完成，选择运行B； 在t=25ms时，B运行完成，选择运行C；在t=30ms时，C运行完成，此时A、B和C三 个进程都运行了一次，而又该A第二次运行。又花了30ms，到t=60ms时，A、B和C三 个进程又都运行了一次。到t=70ms时，系统变为空闲，到t=80ms时，B开始运行； 然而到了t=90ms时，B尚未运行完成，A又变为就绪状态，于是它抢占B而运行，到 t=100ms时，A完成后B再继续运行。图11-3中的第四行示出了用RMS算法进行调度时 的情况。 AA1 A2 A3 A4 A5 B BI B2 B4 C 网 四 RMS A1 A2 B2 A3 A4 e A5B4 EDF A2 B3 A1 A3 A5B4 110120130 20 30 40 50 60 70 80 90 100 140 10 时间(ms) 图11-3RMS实时调度例子

11.4.3EDF算法与RMS调度算法的比较 一← 在第三章中，我们已经介绍了最早截止时间优先（EDF）调度算法，该算法是否可用作视 频服务器中的调度？把它与RMS算法比较，哪一种算法更好，各有何优缺点？这些将是本 章要阐述的问题。

1.用RMS算法调度失败举例 现在我们来看另外一个例子：现有三个进程A、B和C，它们的周期与前例相同，只 是在此将进程A每次的运行时间由10ms增加至15ms，进程B和C每次的运行时间不变。 363  计算机操作系统 对于RMS算法，由于优先级只与周期有关，而与进程每次运行的时间多少无关，因此这三 个进程的优先级仍为33、25和20。调度程序先调度A运行，在t=15时调度B运行，在t=30 时进程A再次就绪，故调度A运行，在t=45时B又再次就绪，由于它的优先级高于进程C， 因此又调度B运行，等到t=60进程B结束时，进程C已错过其最后期限，RMS调度失败。

15.15.5 何以会失败呢？我们来计算处理机的利用率，它们为

0.975，而三个进 304050 程所允许的最大利用率仅为0.780。那么用EDF算法是否可以使这三个进程正常运行呢？我 们通过一个例子来说明。

2.用EDF算法调度成功举例 在采用EDF算法进行调度时，由图11-4可以看出，前30ms时与RMS一样。在t=30 时，A2和C1都处于就绪态，如果按RMS算法，由于进程A的优先级高于C，此时应调 运行。在t=35时，A才再次运行，t=50时调度B运行。当t=90时，A第四次就绪，A与 正在运行的B最后时限同为120，基于不是必要就不抢占的原则，仍让B继续运行。在该 例中，直到t=150，处理机一直处于忙碌状态。 A A1 A2 A3 A4 A5 B B2 B4 C RMS A1 B1 A2 B2 失败 A EDF B1 A2 B2A3 B3A4A5B4 10 20 30 40 50 6070 8090100110120 130140 时间/ms 图11-4用RMS和EDF进行调度 使用EDF算法比用EDF算法可能需要付出更多的系统开销。在一个实际的视频服务 器中，应采用何种调度算法需要视具体情况而定。如果系统中的多个实时进程的处理机总 利用率低于RMS调度上限的限制时，可以选用RMS算法，否则应选用EDF算法。

3.RMS与EDF算法的比较

（1）处理机的利用率。在利用RMS算法时，处理机的利用率存在着一个上限。它随进 程数的增加而减小，逐渐趋于最低的上限为0.693。然而对于EDF算法，并不存在这样严 格的限制，因而该算法可以达到100%的处理机利用率。事实上，对于任意一组任务，只要 用静态优先级调度算法能够调度的，这一组任务也必定可用EDF算法来调度。

(2）算法复杂度。RMS算法比较简单，计算出的每一个进程的优先级，在任务运行期 间通常不会改变。而EDF算法的开销较大，因为它所依据的是动态优先级，它会不断地改 变，每次调度时都需要先计算所有进程截止时间的大小，再从中选择最小的。

(3）调度的稳定性。RMS算法易于保证调度的稳定性，因为RMS算法在调度时所依 364  据的优先级是静态的。因此只需要赋予重要进程较高的优先级，使之在进程整个运行期间 都能保证优先获得处理机。然而对于EDF算法，由于所依据的截止时间是动态的，截止时 间在运行期间不断变化，因此很难使最重要进程的截止时间得到保证。

11.5媒体服务器的特征和接纳控制 目前尚无专门的多媒体文件服务器，只能利用当前的通用文件服务器，再适当增加有 关处理多媒体方面的功能，其最主要的任务是保证SRT任务的实时性。我们在对新增功能 做较详细的介绍前，有必要先介绍多媒体文件和服务器的特征。

11.5.1媒体服务器的特征

1.多媒体文件的多种媒体性 如前所述，一部数字电影是由多种媒体文件组成的。其中包含了一个视频文件、若干种 语言的音频文件，以及不同国家文字的文本文件，图11-5示出了一部电影所包含的文件，而 且在播放时，这些媒体数据流之间还必须保持同步。例如，在播放一部数字电影时，图像画 面和相应的声音或滚动字幕应当同时出现，即使图像画面、声音或字幕之间出现了很小的不 同步，也会使播放失败。因此，媒体服务器需要具有保持多种媒体数据流同步的能力。 帧 12°34

6789..10 英语 音频 法语 音频 德语 音频 英语 11213|4]5]6]7]8]9.].10 字幕 法语 -123-45678910 字幕 快进 快倒 图11-5一部电影所包含的多种媒体的文件

2.拉型和推型文件服务器 在传统的服务器中，进程要访问一个文件时，应先用open系统调用将文件打开，然后 再用read系统调用把文件中的数据读出。如果把这种方式也用于多媒体文件系统中，则用 户每发出一个read系统调用命令时，服务器便送出一帧数据，如图11-6(a)所示。该方式一 方面要求用户必须以精确的时间间隔不断发出read命令，读出一顿数据；另一方面要求服务 器每个周期都能及时地提供数据。可见，该方式不仅麻烦，而且也很难满足实时性要求。通 常把传统文件服务器称为拉型服务器。因为它需要用户不断发出命令，把数据“拉”过来。 365
计算机操作系统 第九章·操作系统接口 操作系统作为计算机系统资源的管理者，对系统中的所有硬件和软件资源进行统一的 管理和操纵。无论是用户（程序）或OS的外层软件，凡是涉及到系统资源的有关操作，都必 须作为服务请求提交给OS，由它来完成。为了使用户能方便地使用计算机，操作系统提供 了相应的用户接口，帮助用户快速、有效、安全、可靠地操纵计算机系统中的各类资源， 完成相关的处理。一般地，操作系统向用户提供了两类接口，即用户接口和程序接口。值 得说明的是，在Intermet广为流行的今天，OS又增加了一种面向网络的网络用户接口。 AAAAAAAAAAAAAAAA

79.1用户接口 在当今几乎所有的OS中，都向用户提供了用户接口，允许用户在终端上键入命令，或 向OS提交作业书来取得OS的服务，并控制自己程序的运行。一般地，用户接口又可进一 步分为三种类型：字符显示式联机用户接口、图形化联机用户接口和脱机用户接口。其中脱 机用户接口已在第一章和第六章中作了较详细的阐述，故在本节中只介绍前两种用户接口。

9.1.1字符显示式联机用户接口 一 不同的OS，其联机用户接口是不同的，即它们的命令形式和用法各不相同，甚至在同 和图形化联机用户接口两类。 字符显示式联机用户接口又称为联机命令接口，是指用户通过命令语言实现对作业的 所需的命令，由终端处理程序接收该命令，并在用户终端屏幕上以字符显示方式反馈用户 输入的命令信息、命令执行及执行结果信息。 所谓命令语言，就是以命令为基本单位，指示操作系统完成特定的功能，由诸多命令 组成了命令集，完整的命令集包含了操作系统提供给用户可使用的全部功能。而命令是由 一组命令动词和参数组成的，具有规定的词法、语法、语义和表达形式，用户在终端键盘 上以命令行的形式输入，并提交给系统。不同操作系统所提供的命令语言在词法、语法、 语义及表达形式等方面各不相同。通常，命令语言可分成两种方式：

1.命令行方式 该方式是以行为单位，输入和显示不同的命令。每行长度一般不超过256个字符，一 般情况下，以回车符作为一个命令的结束标记。通常，命令的执行采用的是间断式的串行 278  T 处理完成后系统发出新的命令输入提示符，用户才可以继续输入下一条命令。 在许多操作系统中也提供了命令的并行执行方式。例如，当两条命令的执行是不相关 的情况下，即用户对一条命令的执行结果并不急需，而且该命令的执行可能需要耗费较长时 间时，用户可以在该命令的结尾输入特定的标记，将该命令作为后台命令处理，这样，用户 不必等待该条命令执行完毕，即可继续输入下一条命令，系统便可对两条命令进行并行处理。 一般而言，对新用户来说，命令行方式十分繁琐，难以记忆，但对有经验的用户而言， 命令行方式用起来快捷便当、十分灵活，所以，至今许多操作员仍常使用这种命令方式。 简单命令的一般形式为： Command arg1 arg2 .". argn 其中Command是命令名，又称命令动词，其余为该命令所带的执行参数，有些命令可以 没有参数。

2.批命令方式 在操作命令的实际使用过程中，经常遇到需要对多条命令的连续使用、或对若干条命 令的重复使用、或对不同命令进行选择性使用的情况，如果用户每次都采用命令行方式将 命令一条条由键盘输入，既浪费时间，又容易出错。因此，操作系统都支持一种称为批命 令的特别命令方式，允许用户预先把一系列命令组织在一种称为批命令文件的文件中，一次 建立，多次执行。使用这种方式可减少用户输入命令的次数，既节省了时间，减少了出错概 率，又方便了用户。通常批命令文件都有特殊的文件扩展名，如MS-DOS系统的.BAT文件。 为此，操作系统还提供了一套控制子命令，以增强对命令文件使用的支持。用户可以 使用这些子命令和形式参数书写批命令文件，使得这样的批命令文件可以执行不同的命令 序列，从而增强了命令接口的处理能力。如UNIX和Linux中的Shell不仅是一种交互型命 令解释程序，也是一种命令级程序设计语言解释系统，它允许用户使用Shell简单命令、位 置参数和控制流语句编制带形式参数的批命令文件，称做Shell文件或Shell过程，Shell 可以自动解释和执行该文件或过程中的命令。

9.1.2图形化联机用户接口

1..

1.图形用户接口GUI（GraphicsUserInterface）的引[入 虽然用户可以通过命令行方式和批命令方式，取得操作系统的服务，并控制自已的作 业运行，但却要牢记各种命令的动词和参数，必须严格按规定的格式输入命令，而且不同 操作系统所提供的命令语言的词法、语法、语义及表达形式是不一样的，这样既不方便又 花费时间。于是，图形化用户接口GUI（GraphicsUserInterface)便应运而生。 1981年，Xer0x公司在Star8010工作站操作系统中首次推出了图形用户接口，1983年， Apple公司又在AppleLisa机和Macintosh机上的操作系统中成功使用GUI，之后，还有 Microsoft公司的Windows、IBM公司的OS/2、UNIX和Linux使用的X-Window等都使用 了GUI。它已成为近年来最为流行的联机用户接口形式，并制订了国际GUI标准。20世纪 90年代以后推出的主流OS都提供了GUI。

2.使用WIMP技术 GUI采用了图形化的操作界面，使用WIMP技术，该技术将窗口(Window）、图标(Icon)、 279  计算机操作系统 菜单(Menu)、鼠标(Pointingdevice)和面向对象技术等集成在一起，引入形象的各种图标， 将系统的各项功能、各种应用程序和文件直观、逼真地表示出来，形成一个图文并茂的视 窗操作环境。在有了GUI后，在桌面上显示了许多常用的图标，每一个图标对应于一个应 用程序，用户为了启动相应的应用程序，已完全不用像以前那样键入复杂的命令和文件名， 只需双击命令的图标即可。用户还可以轻松地通过选择窗口、菜单、对话框和滚动条，完 成对他们的作业和文件的各种控制与操作。由于GUI的可视性，使许多日常任务更加直观， 再加上简单的约定，使对计算机的操作变得非常容易。

3.Windows的GUI简介 以Microsoft公司的Windows操作系统为例，在系统初始化后，OS为终端用户生成了 一个运行explorer.exe的进程，它运行一个具有窗口界面的命令解释程序，该窗口是一个特 释程序会产生一个新进程，由新进程弹出一个新窗口，并运行该应用程序，该新窗口的菜 单栏或图标栏会显示应用程序的子命令。用户可进一步选择并点击子命令，如果该子命令 需要用户输入参数，则会弹出一个对话窗口，指导用户进行命令参数的输入，完成后用户 点击“确定”按钮，命令进入执行处理过程。 在Windows系统中，采用的是事件驱动控制方式，用户通过动作来产生事件，以驱动 程序工作。事件实质就是发送给应用程序的一个消息。用户的按键或点击鼠标等动作都会 产生一个事件，通过中断系统引出事件驱动控制程序工作，对事件进行接收、分析、处理 和清除。各种命令和系统中所有的资源，如文件、目录、打印机、磁盘、各种系统应用程 序等，都可以定义为一个菜单、一个按钮或一个图标。所有的程序都拥有窗口界面，窗口 中所使用的滚动条、按钮、编辑框、对话框等各种操作对象，都采用统一的图形显示方式 和操作方法。用户可以通过鼠标（或键盘）点击操作，选择所需要的菜单、图标或按钮，从 而达到控制系统、运行某个程序、执行某个操作（命令）的目的。 由于图形用户接口有着非常明显的优点，致使现在多数OS，特别是面向非程序员和无 经验用户的系统，都使用GUI作为上层的OS接口。但联机命令接口也并未过时，而且还 深受高级用户和程序员的欢迎。这是因为使用联机命令可以对资源进行更多和更深入的控 制，它可在一个命令行中包含多条命令，系统能连续地执行这些命令，并且还可将命令语 言变成强大的编程语言，编制出复杂的脚本。因此在UNIX、Linux和其它的OS中仍继续 支持联机命令接口shell，当然它们也可以使用图形用户接口。

9.1.3.联机命令的类型 一一一一 在联机命令接口中，OS向用户提供了几十条甚至上百条的联机命令。根据这些命令 所完成功能的不同，可把它们分成以下几类：系统访问类、磁盘操作类、文件操作类、目 录操作类、通信类，以及其它命令。现分述如下：

1.系统访问类 在多用户系统中，为了保证系统的安全性，都毫无例外地设置注册命令Login。凡要 在多用户系统的终端上上机的用户，都必须先在系统管理员处获得一合法的注册名和口令。 以后，每当用户在接通其所用终端的电源后，便由系统直接调用，并在屏幕上显示出以下 280  第九章操作系统接口 的注册命令： Login: /提示用户键入自己的注册名 当用户键入正确的注册名并按下回车键后，屏幕上又会出现： Password：-：/提示用户键入自己的口令 用户在键入口令时，系统将关闭掉回送显示，以使口令不在屏幕上显示出来。如果键 入的口令正确而使注册成功时，屏幕上会立即出现系统提示符（所用符号随系统而异），表 示用户可以开始键入命令。如果用户多次（通常不超过三次）键入的注册名或口令都有错， 系统将解除与用户的联接。

2.文件操作命令 每个操作系统都提供了一组文件操作命令。在微机OS中的文件操作命令有：

（1）显示文件命令type，用于将指定文件内容显示在屏幕上。

(2）拷贝文件命令copy，用于实现文件的拷贝。

(3）文件比较命令comp，该命令用于对两个指定文件进行比较，两文件可以在同一个 或不同的驱动器上。 的名字。

（5）删除文件命令erase，该命令用于删除一个或一组文件，例如，当参数路径名为 *.BAK时，表示删除指定目录下的所有其扩展名为.Bak的文件。

3.目录操作命令 对目录进行操作的命令有：

（1）建立子目录命令mkdir，用于建立指定名字的新目录。

（2）显示目录命令dir，显示指定磁盘中的目录项。

（3）删除子目录命令rmdir，用于删除指定的子目录文件，但不能删除普通文件，而且

（4）显示目录结构命令tree，显示指定盘上的所有目录路径及其层次关系。

（5）改变当前目录命令chdir，将当前目录改变为由路径名参数给定的目录。用“”作 参数时，表示应返回到上一级目录下。

4.其它命令

（1）输入输出重定向命令。在有的OS中定义了两个标准I/O设备。通常，命令的输入 取自标准输入设备，即键盘；而命令的输出通常是送往标准输出设备，即显示终端。如果 在命令中设置输出重定向“>”符，其后接文件名或设备名，表示将命令的输出改向，送到 指定文件或设备上。类似地，若在命令中设置输入重定向“<”符，则不再是从键盘而是从 重定向符左边参数所指定的文件或设备上取得输入信息。

（2）管道连接。这是指把第一条命令的输出信息作为第二条命令的输入信息；类似地， 又可把第二条命令的输出信息作为第三条命令的输入信息。这样，由两个（含两条）以上的 命令可形成一条管道。在MS-DOS和UNIX中，都用“”作为管道符号。其一般格式为： Command1ICommand2l..ICommandn;

(3）过滤命令。在UNIX及MS-DOS中，都有过滤命令，用于读取指定文件或标准输 281  计算机操作系统 入，从中找出由参数指定的模式，然后把所有包含该模式的行都打印出来。例如，MS-DOS 中用命令 find/N“erase”（路径名） 可对由路径名指定的输入文件逐行检索，把含有字符串“erase”的行输出。其中，N是选 择开关，表示输出含有指定字串的行。如果不用N而用C，则表示只输出含有指定字串的 行数；若用V，则表示输出不含指定字串的行。

（4）批命令。为了能连续地使用多条键盘命令，或多次反复地执行指定的若干条命令， 而又免去每次重敲这些命令的麻烦，可以提供一个特定文件。在MS-DOS中提供了一种特 殊文件，其后缀名用“BAT”；在UNIX系统中称为命令文件。它们都是利用一些键盘命令 构成一个程序，一次建立供多次使用。在MS-DOS中用batch命令去执行由指定或默认驱 动器的工作目录上指定文件中所包含的一些命令。 /9.2Shell命令语言 在Linux系统中，Shell是命令语言、命令解释器（程序）及程序设计语言的统称，其特 点如下：

（1）作为命令语言，它拥有自己内建的Shell命令集，可以为用户提供使用操作系统的 接口，用户利用该接口与机器交互。

（2）作为一种程序设计语言，它支持绝大多数在高级语言中能见到的程序元素，如函 数、变量、数组和程序控制结构。同时，Shell作为一种编程语言，还具有简单易学的特点， 任何在提示符中能键入的命令，都能放到一个可执行的Shell程序中，用户可利用多条Shell 命令构成一个文件（或称为Shell过程）。

（3）作为一个命令解释器（程序），Shell可对输入的命令解释执行。 下面对Shell命令语言做扼要的介绍。

9.2.1简单命令简介 在Shell命令语言中提供了许多不同形式的命令，并充许在一条命令行中有多个命令。 如果在一条命令行中仅有一个命令，就把它称为简单命令。实际上，一条简单命令便是一 个能完成某种功能的目标程序的名字。

1.简单命令的格式 简单命令的格式比较自由，包括命令名字符的个数及用于分隔命令名、选项、各参数 间的空格数等，都是任意的。在UNIX和Linux系统中都规定，命令由小写字母构成，命 令可带有参数表，用于给出执行命令时的附加信息，每个参数是一个单词。命令名与参数 表之间还可使用一种称为选项的自变量，用减号开始，后跟一个或多个字母、数字。一条 命令可有多个选项，用于改变命令执行动作的类型。命令的格式如下： $ Command -option argument list 例如： $ ls file1 file2 282
计算机操作系统 shell未重定向标准输入，则shell和后台进程将会同时从终端读入。这时，用户从终端键入 的字符可能被发送到一个进程或另一个进程，并不能预测哪个进程将得到该字符。因此， 对所有在后台运行的命令的标准输入，都必须加以重定向，从而使从终端键入的所有字符 都被送到Shell进程。用户可使用ps、wait及Kil命令去了解和控制后台进程的运行。

179.3联机命令接口的实现 为了实现人机交互，在系统中必须配置相应的软件来实现人机交互。首先需要在微机 或终端上配置相应的键盘终端处理程序，它的最基本功能是接收用户从终端键入的命令和 数据，将它们暂存在字符缓冲区中；其次需要配置的是命令解释程序，该软件最基本的功 能是对所键入的命令进行识别，然后再转入相应的命令处理程序去执行。

9.3.1键盘终端处理程序 -: 在微机或终端上所配置的键盘终端处理程序应具有下述几方面的功能：①接收用户从 终端上打入的字符；②字符缓冲，用于暂存所接收的字符；③回送显示；④屏幕编辑； ③特殊字符处理。

1.字符接收功能 为了实现人机交互，键盘终端处理程序必须能够接收从终端输入的字符，并将之传送 给用户程序。有两种方式可实现字符接收功能：

（1）面向字符方式。驱动程序只接收从终端打入的字符，并且不加修改地将它传送给 用户程序。这通常是一串未加工的ASCII码。但大多数的用户并不喜欢这种方式。

(2）面向行方式。终端处理程序将所接收的字符暂存在行缓冲中，并可对行内字符进 行编辑。仅在收到行结束符后，才将一行正确的信息送命令解释程序。在有的计算机中， “30”放入IVO寄存器，此时，终端处理程序必须参照某种表格将键码转换成ASCII码。

2.字符缓冲功能 为了能暂存从终端键入的字符，以降低中断处理器的频率，在终端处理程序中，还必 须具有字符缓冲功能。字符缓冲可采用以下两种方式之一：

（1）专用缓冲方式。系统为每个终端设置一个缓冲区，暂存用户键入的一批字符。缓 100个终端时，要求有20KB的缓冲区。但专用缓冲方式可使终端处理程序简化。图9-1(a) 示出了专用缓冲方式。

（2）公用缓冲方式。系统只设置一个由多个缓冲区构成的公用缓冲池，而没有为每个 终端设置专用缓冲区。其中的每个缓冲区大小相同，如为20个字符，再将所有的空缓冲区 链接成一个空缓冲区链。当终端有数据输入时，可先向空缓冲区链申请一空缓冲区，来接 收输入字符；当该缓冲区装满后，再申请一空缓冲区。这样，直至全部输入完毕，并利用 链接指针将这些装有输入数据的缓冲区链接成一条输入链。每当该输入链中一个缓冲区内的 288  第九章：操作系统接口 字符被全部传送给用户程序后，便将该缓冲区从输入链中移出，再重新链入空缓冲区链中。 显然，利用公用缓冲池方式可有效地提高缓冲的利用率。图9-1(b)示出了公用缓冲池方式。 终端 终端 公用缓冲池 主机 主机 (a) (b) 图9-1两种缓冲方式

3.回送显示 回送显示（回显）是指每当用户从键盘输入一个字符后，终端处理程序便将该字符送往 屏幕显示。有些终端的回显由硬件实现，其速度较快，但往往会引起麻烦。如当用户键入 口令时，为防止口令被盗用，显然不该有回显。此外，用硬件实现回显也缺乏灵活性，因 而近年来多改用软件来实现回显，这样可以做到在用户需要时才回显。用软件实现回显， 还可方便地进行字符变换，如将键盘输入的小写英文字母变成大写，或相反。驱动程序在 将输入的字符送往屏幕回显时，应打印在正确的位置上；当光标走到一行的最后一个位置 后，便应返回到下一行的开始位置。例如，当所键入的字符数目超过一行的80个（字符）时， 应自动地将下一个字符打印到下一行的开始位置。

4.屏幕编辑 为此，在终端处理程序中，还应能实现屏幕编辑功能，包括能提供若干个编辑键。常用的 编辑键有：

(1）删除字符键。它允许将用户刚键入的字符删除。在有的系统中是利用退格键即 Bakespace(Ctrl+H)键。当用户敲击该键时，处理程序并不将刚键入的字符送入字符队列， 而是从字符队列中移出其前的一个字符。

(2）删除一行键。该键用于将刚输入的一行删去。

（3）插入键。利用该键在光标处可插入一个字符或一行正文。

（4）移动光标键。在键盘上有用于对光标进行上、下、左、右移动的键。

(5）屏幕上卷或下移键等。

5.特殊字符处理 终端处理程序必须能对若干特殊字符进行及时处理，这些字符是：

（1）中断字符。当程序在运行中出现异常情况时，用户可通过键入中断字符的办法来 中止当前程序的运行。在许多系统中是利用Break或Delete或Cul+C键作为中断字符。对中 断字符的处理比较复杂。当终端处理程序收到用户键入的中断字符后，将向该终端上的所有 进程发送一个要求进程终止的软中断信号，这些进程收到该软中断信号后，便进行自我终止。 289  计算机操作系统

(2）停止上卷字符。用户键入此字符后，终端处理程序应使正在上卷的屏幕暂停上卷， 以便用户仔细观察屏幕内容。在有的系统中，是利用Ctrl+S键来停止屏幕上卷的。

(3）恢复上卷字符。有的系统利用Ctrl+Q键使停止上卷的屏幕恢复上卷。终端处理程 序收到该字符后，便恢复屏幕的上卷功能。 上述的Ctrl+S与Ctrl+Q两字符并不被存储，而是被用去设置终端数据结构中的某个标 志。每当终端试图输出时，都须先检查该标志，若该标志已被设置，便不再把字符送至屏幕。

9.3.2MS-DOS解释程序 一 为了方便与用户交互，通常把命令解释程序放在用户层，以用户态方式运行。我们通 过两个具体例子来说明命令解释程序的主要功能和实现方法。本小节先介绍MS-DOS中的 命令解释程序COMMAND.COM，下一小节介绍UNIX的命令解释程序Shell。

1.命令解释程序的作用 在联机操作方式下，终端处理程序把用户键入的信息送键盘缓冲区中保存。一旦用户 键入回车符，便立即把控制权交给命令解释程序。显然，对于不同的命令，应有能完成特 定功能的命令处理程序与之对应。可见，命令解释程序的主要作用是在屏幕上给出提示符， 请用户键入命令，然后读入该命令，识别命令，再转到相应命令处理程序的入口地址，把 控制权交给该处理程序去执行，并将处理结果送屏幕上显示。若用户键入的命令有错，而 命令解释程序未能予以识别，或在执行中间出现问题时，则应显示出某一出错信息。

2.命令解释程序的组成 MS-DOS是1981年由Microsoft公司开发的、-配置在微机上的OS。随着微机的发展， MS-DOS的版本也在不断升级，由开始时的1.0版本升级到1994年的6.X版本。在此期间， 它已是事实上的16位微机OS的标准。我们以MS-DOS操作系统中的COMMAND.COM 处理程序为例来说明命令解释程序的组成。它包括以下三部分：

（1）常驻部分。这部分包括一些中断服务子程序。例如，正常退出中断INT20，它用 于在用户程序执行完毕后退回操作系统：驻留退出中断INT27，用这种方式，退出程序可 驻留在内存中；还有用于处理和显示标准错误信息的INT24等。常驻部分还包括这样的程 序：当用户程序终止后，它检查暂存部分是否已被用户程序覆盖，若已被覆盖，便重新将 暂存部分调入内存。

(2）初始化部分。它跟随在常驻内存部分之后，在启动时获得控制权。这部分还包括 对AUTOEXEC.BAT文件的处理程序，并决定应用程序装入的基地址。每当系统接电或重 新启动后，由处理程序找到并执行AUTOEXEC.BAT文件。由于该文件在用完后不再被需 要，因而它将被第一个由COMMAND.COM装入的文件所覆盖。

(3）暂存部分。这部分主要是命令解释程序，并包含了所有的内部命令处理程序、批 文件处理程序，以及装入和执行外部命令的程序。它们都驻留在内存中，但用户程序可以 使用并覆盖这部分内存，在用户程序结束时，常驻程序又会将它们重新从磁盘调入内存， 恢复暂存部分。

3.命令解释程序的工作流程 系统在接通电源或复位后，初始化部分获得控制权，对整个系统完成初始化工作，并 290  第九章操作系统接口 自动执行AUTOEXEC.BAT文件，之后便把控制权交给暂存部分。暂存部分首先读入键盘 缓冲区中的命令，判别其文件名、扩展名及驱动器名是否正确。若发现有错，在给出出错 信息后返回；若无错，再识别该命令。一种简单的识别命令的方法是基于一张表格，其中 的每一表目都由命令名及其处理程序的入口地址两项组成。如果暂存部分在该表中能找到 键入的命令，且是内部命令，便可以直接从对应表项中获得该命令处理程序的入口地址， 然后把控制权交给该处理程序去执行该命令。如果发现键入的命令不属于内部命令而是外 部命令，则暂存部分还须为之建立命令行；再通过执行系统调用exec来装入该命令的处理程 序，并得到其基地址；最后把控制权交给该程序去执行相应的命令。图9-2示出了MS-DOS 的COMMAND.COM的工作流程。 十 输入命令行 否 命令合法否？ 是 是内部命令？ 从外存调入外部命令执行 是 DIR命令 Type命令 Date命令 处理程序 处理程序 处理程序 处理程序 L 显示提示符 J 图9-2COMMAND.COM的工作流程

9.3.3Shell解释程序 一+ 在UNIX或Linux系统中，Shell是作为操作系统的最外层（也称为外壳），是用户及应 用程序与操作系统的接口，它是命令语言、命令解释程序及程序设计语言的统称。Shell作 为一个命令解释程序，用于对从标准输入或文件中读入的命令进行解释执行。例如，当用 户在提示符下输入命令或其它程序向Linux传递命令时，都需经过Shell的解释，或称为识 别，然后再传递给内核中相应的处理程序，由该程序去完成相应的操作。

1.Shell命令的特点 前面我们介绍了MS-DOS的命令解释程序，它非常简单。而Shell命令解释程序就复 杂得多，这主要是因为Shell命令的类型多而复杂所致。主要表现如下：

（1）一条命令行中含有多个命令。如果在一条命令行中仅有一个命令，那么命令解释 程序便可以利用简单的命令表找到该命令的命令处理程序。然而在Shell的一条命令行中， 可能含有多个不同的命令，由于每一条命令对应了一个处理程序，故在对一个命令行进行 解释后，应产生多个命令处理程序（进程）。

(2）具有不同的分隔符。在一条命令行中的每个命令之间都采取不同的分隔符。如利 用“；”分隔符时，要求命令行中命令应顺序执行；如用“&”分隔符时，要求命令行中前 面的命令放在后台执行；如利用“I”分隔符时，要求把前一条命令的输出作为后一条命令 291  计算机操作系统 的输入。换言之，这些分隔符确定了这些命令的执行顺序和方式。

2.二叉树结构的命令行树 隔符类型的不同，并按照一定的规律构成二叉树结构的命令行树。采用它的好处是，它能 够很好地表示出命令行中所有命令的执行顺序和方式。下面通过简单的例子来说明如何建 立二叉树结构的命令行树。 1）命令表型结点 Shell命令解释程序按命令行语句的结构顺序进行检查，每当遇到“；”及“&”分隔符 右子树。例如下面的命令行所构成的命令树如图9-3所示： Command 1;Command 2;&Command3 由于每一条命令对应了一个处理进程，故在执行命 左子树 右子树 令树时，对应于每一条命令都需要为之创建一个进程， 由此为命令树生成一个对应的进程树。在具体执行时， Command1 & 对于“；”型结点，先递归地执行其左子树，待其左子数 执行完后，再执行其右子树。对于“&”型结点，可在 Command2 Command3 启动了左子结点执行后，无须等待它执行完毕，便可转 去执行其右子结点。 图9-3命令表型结点及其左、右子树 2）管道文件型结点 当Shell命令解释程序遇到管道算符“T”时，先为之建立一个管道文件型结点，再将 分隔符左面部分构成该结点的左子树，右面部分构成 右子树。例如对下面的命令行所构成的命令树如图9-4 所示： Command11Command21Command3 3）简单命令型结点 Commandl 对于简单命令，在命令行中仅有一条命令，它是 属于可以立即执行的命令，系统无需为它建立二叉树 结构的命令行树。当命令解释程序读入键盘缓冲区中 Command2 Command3 的命令后，若判定它是简单命令，再进一步确定是否 是内部命令。Shell解释程序本身提供了内部命令的可图9-4管道文件型结点及其左、右子树 执行程序，因此若是内部命令，Shell便立即执行，此时Shell也不需要为该命令创建新进 程。如果不是内部命令也非特殊命令，Shell将认为该命令是一个可执行文件，于是将为它 创建一个新进程，并作为Shell的子进程执行，直到子进程运行完毕，又恢复Shell运行。

3.Linux命令解释程序的工作流程 在Linux系统中，系统初启后，内核为每个终端用户建立一个进程，去执行Shell解释 程序。它的执行过程基本上按如下步骤进行：

(1）读取用户由键盘输入的命令行。用户键入的信息送入键盘缓冲区中保存。一旦用 户键入回车符，表示本次命令已结束，于是系统立即把控制权交给命令解释程序。它首先 292  第九章操作系统接口 从缓冲区中读取用户输入的命令。 看命令行中的命令，对命令和分隔符进行分析，建立相应的二叉树结构命令行树。并以命 令名作为文件名，将其它参数改造为系统调用execve内部处理所要求的形式。

(3）建立相应的子进程。终端进程调用fork，为二叉树结构命令行中的每一条命令建立 相应的子进程。

（4）等待子进程完成。对于“；”型结点，需在其左子树执行完成后，才可继续处理下 一条命令。故终端进程本身需要调用系统调用Wait40来等待子进程完成。当子进程运行时 调用execve（），子进程根据文件名（即命令名)到目录中查找有关文件，将它调入内存，执行 这个程序；当子进程完成处理后终止，向父进程（终端进程）报告，此时终端进程醒来，在 做必要的判别等工作后，继续处理下一条命令重复上述处理过程。

（5）对于“&”型结点，在启动其左子结点执行后，因它是后台命令，不需要等待，因 此终端进程不用系统调用Wait4（），而是再执行其右子树。 Shell基本执行过程及父子进程之间的关系如图9-5所示。 终端进程 子进程 读入命令行 调度到 execve(）更换 进程映像 子进程 分离命令名， 按execveO的 要求放置参数 运行命令对应的 可执行文件 id-forkO ExitO终止 创建子进程 放弃CPU 子进程 id=0? #0 =0 父进程 无 子进程终止 有“&”？ 向父进程报告 有 WaitO等待 子进程终止 发提示符“S” 图9-5Shell基本执行过程及父子进程之间的关系 系统调用的概念和类型 程序接口，是OS专门为用户程序设置的，提供给程序员在编程时使用，也是用户程 序取得OS服务的唯一途径。它是由一组系统调用（systemcall)组成，因而，也可以说，系 293
计算机操作系统 录机，它能播放和刻录CD、VCD光盘。②COMBO刻录机，它能播放DVD光盘，但只 能刻录CD、VCD光盘。③DVD 刻录机，它能播放和刻录CD、VCD和DVD光盘。 /8.5数据一致性控制 在实际应用中，经常会在多个文件中都含有同一个数据。所谓数据一致性问题是指， 保存在多个文件中的同一数据，在任何情况下都必需能保证相同。例如，当我们发现某种 商品的进价有错时，我们必须同时修改流水账，付费账、分类账及总账等一系列文件中的 该商品的价格，方能保证数据的一致性。但如果在修改进行到中途时系统突然发生故障， 在现代OS中都配置了能保证数据一致性的软件。

8.5.1事务 一一

1.事务的定义 事务是用于访问和修改各种数据项的一个程序单位。事务也可以被看做是一系列相关 读和写操作。被访问的数据可以分散地存放在同一文件的不同记录中，也可放在多个文件 中。只有对分布在不同位置的同一数据所进行的读和写（含修改）操作全部完成时，才能以 托付操作(CommitOperation)，也称为提交操作，结束事务，确认事务的变化。其后其它的 进程或用户才将可以查看到事务变化后的新数据。但是，只要这些操作中有一个读、写或 修改操作失败，便必须执行天折操作(AbortOperation)，也称为回滚操作或取消操作。这些 读或写操作的失败可能是由于逻辑错误，也可能是系统故障所导致的。 一个被天折的事务，通常已执行了一些操作，因而可能已对某些数据做了修改。为使 天折的事务不会引起数据的不一致性，需将该事务内刚被修改的数据项恢复成原来的情况， 使系统中各数据项与该事务未执行时的数据项内容完全相同。此时，可以说该事务“已被 退回”（rolledback)。不难看出，一个事务在对一批数据执行修改操作时，应该是要么全部 特性，就是我们在第二章中曾讲过的“原子操作”，即事务具有原子性（Atomic)。 作为单个程序单元执行的一系列操作，并不是都可以成为事务，也就是说，如果定义 其为事务，则必须同时满足四个属性，即事务属性ACID。除了上述的原子性外，事务还应 具备的属性是：①）一致性（Consistent)，即事务在完成时，必须使所有的数据都保持一致状 态：②）隔离性（Isolated)，即对一个事务对数据所作的修改，必须与任何其它与之并发事务 相隔离，换言之，一个事务查看数据时数据所处的状态，要么是另一并发事务修改它之前 的状态，要么是另一事务修改它之后的状态，而不会是任何中间状态的数据；③持久性 (Durable)，即事务完成之后，它对于系统的影响是永久性的。

2.事务记录（TransactionRecord） 为了实现上述的原子修改，通常须借助于称为事务记录的数据结构来实现。这些数据 结构被放在一个非常可靠的存储器（又称稳定存储器）中，用来记录在事务运行时数据项修 改的全部信息，故文称为运行记录(Log)。该记录中包括有下列字段： 272  第八章磁盘存储器的管理 ·事务名：用于标识该事务的唯一名字； ·数据项名：它是被修改数据项的唯一名字； ·旧值：修改前数据项的值； ·新值：修改后数据项将具有的值。 在事务记录表中的每一记录描述了在事务运行中的重要事务操作，如修改操作、开始 事务、托付事务或天折事务等。在一个事务T；开始执行时，《T；开始）记录被写入事务记 录表中；在T;执行期间，在T的任何写（修改)操作之前，须先写一适当的新记录到事务记 录表中；当T进行托付时，再把一个（T托付）记录写入事务记录表中。

3.恢复算法 由于一组被事务T修改的数据以及它们被修改前和修改后的值都能在事务记录表中找 到，因此，利用事务记录表系统能处理任何故障而不致使故障造成非易失性存储器中信息 的丢失。恢复算法可利用以下两个过程：

(1）undo（Ti>。该过程把所有被事务T;修改过的数据恢复为修改前的值。

(2）redo（T>。该过程能把所有被事务T修改过的数据设置为新值。 如果系统发生故障，系统应对以前所发生的事务进行清理。通过查找事务记录表，可 以把尚未清理的事务分成两类。一类是其所包含的各类操作都已完成的事务。确定为这一 类事务的依据是，在事务记录表中，既包含了（T；开始）记录，又包含了《T托付）记录。 此时系统利用redo（T;）过程把所有已被修改的数据设置成新值。另一类是其所包含的各 个操作并未全部完成的事务。对于事务T，如果在Log表中只有〈T;开始）记录而无（T; 托付）记录，则此T;便属于这类事务。此时，系统便利用undo（T）过程将所有已被修改 的数据恢复为修改前的值。

8.5.2检查点

1.检查点（CheckPoints）的作用 如前所述，当系统发生故障时，必须去检查整个Log表，以确定哪些事务需要利用redo <T）过程去设置新值，而哪些事务文需要利用undo《T）过程去恢复数据的l旧值。由于 在系统中可能存在着许多并发执行的事务，因而在事务记录表中就会有许多事务执行操作 的记录。随着时间的推移，记录的数据也会愈来愈多。因此，一旦系统发生敌障，在事务 记录表中的记录清理起来就非常费时。 引入检查点的主要目的是，使对事务记录表中事务记录的清理工作经常化，即每隔一 定时间便做一次下述工作：首先是将驻留在易失性存储器（内存）中的当前事务记录表中的 所有记录输出到稳定存储器中；其次是将驻留在易失性存储器中的所有已修改数据输出到 稳定存储器中；然后是将事务记录表中的（检查点）记录输出到稳定存储器中；最后是每 当出现一个（检查点）记录时，系统便执行上小节所介绍的恢复操作，即利用redo和undo 过程实现恢复功能。 录前的《T；托付）记录。在这种情况下，所有被T修改过的数据或者是在检查点前已写入 稳定存储器，或者是作为检查点记录自身的一部分写入稳定存储器中。因此，以后在系统 出现故障时，就不必再执行redo操作了。 273  计算机操作系统

2.新的恢复算法 在引入检查点后，可以大大减少恢复处理的开销。因为在发生故障后，并不需要对事 务记录表中的所有事务记录进行处理，而只需对最后一个检查点之后的事务记录进行处理。 因此，恢复例程首先查找事务记录表，确定在最近检查点以前开始执行的最后的事务Ti。 在找到这样的事务后，再返回去搜索事务记录表，便可找到第一个检查点记录，恢复例程 便从该检查点开始返回搜索各个事务的记录，并利用redo和undo过程对它们进行处理。 如果把所有在事务T以后开始执行的事务表示为事务集T，则新的恢复操作要求是： 对所有在T中的事务Tk，如果在事务记录表中出现了（Tk托付）记录，则执行redo《Tk） 操作；反之，即如果在事务记录表中并未出现《Tk托付）记录，则执行undo《Tk）操作。

8.5.3并发控制（ConcurrentControl) ：→ 在多用户系统和计算机网络环境下，可能有多个用户在同时执行事务。由于事务具有 才允许另一事务执行，即各事务对数据项的修改是互斥的。人们把这种特性称为顺序性， 而把用于实现事务顺序性的技术称为并发控制。该技术在应用数据库系统中已被广泛采 用，现也广泛应用于OS中。虽然可以利用第二章所介绍的信号量机制来保证事务处理 的顺序性，但在数据库系统和文件服务器中应用得最多的，还是较简单的且较灵活的同步 机制—锁。

1.利用互厅锁实现“顺序性” 实现顺序性的一种最简单的方法，是设置一种用于实现互斥的锁，简称为互斥锁 (ExclusiveLock)。在利用互斥锁实现顺序性时，应为每一个共享对象设置一把互斥锁。当 某一事务T要去访问某对象时，应先获得该对象的互斥锁。若成功，便用该锁将该对象锁 住，于是事务T便可对该对象执行读或写操作；而其它事务由于未能获得该锁，因而不能 访问该对象。如果T需要对一批对象进行访问，则为了保证事务操作的原子性，T应先获 得这一批对象的互斥锁，以将这些对象全部锁住。如果成功，便可对这一批对象执行读或 写操作；操作完成后又将所有这些锁释放。但如果在这一批对象中的某一个对象已被其它 事物锁住，则此时T应对此前已被T锁住的其它对象进行开锁，宣布此次事务运行失败， 但不致引起数据的变化。

2.利用互厅锁和共享锁实现顺序性 利用互斥锁实现顺序性的方法简单易行。目前有不少系统都是采用这种方法来保证事 务操作的顺序性，但这却存在着效率不高的问题。因为一个共享文件虽然只允许一个事务 去写，但却允许多个事务同时去读；而在利用互斥锁来锁住文件后，则只允许一个事务去 读。为了提高运行效率而又引入了另一种形式的锁——共享锁(SharedLock)。共享锁与互 斥锁的区别在于：互斥锁仅允许一个事务对相应对象执行读或写操作，而共享锁则允许多 个事务对相应对象执行读操作，但不允许其中任何一个事务对对象执行写操作。 在为一个对象设置了互斥锁和共享锁的情况下，如果事务T要对Q执行读操作，则只 需去获得对象Q的共享锁。如果对象Q已被互斥锁锁住，则T;必须等待；否则，便可获 得共享锁而对Q执行读操作。如果T要对Q执行写操作，则T;还须去获得Q的互斥锁。 274  第八章磁盘存储器的管理 若失败，须等待；否则，可获得互斥锁而对Q执行写操作。利用共享锁和互斥锁来实现顺 序性的方法非常类似于我们在第二章中所介绍的读者一写者问题的解法。

8.5.4重复数据的数据一致性问题 一 为了保证数据的安全性，最常用的做法是把关键文件或数据结构复制多份，分别存储 在不同的地方，当主文件(数据结构)失效时，还有备份文件(数据结构)可以使用，不会造成 数据丢失，也不会影响系统工作。显然，主文件（数据结构)中的数据应与各备份文件中的 对应数据相一致。此外，还有些数据结构(如空闲盘块表)在系统运行过程中总是不断地对 它进行修改，因此，同样应保证不同处的同一数据结构中数据的一致性。

1.重复文件的一致性 我们以UNIX类型的文件系统为例来说明如何保证重复文件的一致性问题。对于通常 的UNIX文件目录，其每个目录项中含有一个ASCII码的文件名和一个索引结点号，后者 指向一个索引结点。当有重复文件时，一个目录项可由一个文件名和若干个索引结点号组 成，每个索引结点号都是指向各自的索引结点。图8-18示出了UNIX类型的目录和具有重 复文件的目录。 文件名 i结点 文件名 结点 文件1 17 文件1 1719 40 文件2 22 文件2 22 72 16 文件3 12 文件3 12 30 29 文件4 84 文件484 15 66 (a)不允许有重复文件的目录 (b)允许有重复文件的目录 图8-18UNIX类型的目录 在有重复文件时，如果一个文件拷贝被修改，则必须也同时修改其它几个文件拷贝， 以保证各相应文件中数据的一致性。这可采用两种方法来实现：第一种方法是当一个文件 被修改后可查找文件目录，以得到其它几个拷贝的索引结点号，再从这些索引结点中找到 各拷贝的物理位置，然后对这些拷贝做同样的修改；第二种方法是为新修改的文件建立几 个拷贝，并用新拷贝去取代原来的文件拷贝。

2.链接数一致性检查 在UNIX类型的文件目录中，其每个目录项内都含有一个索引结点号，用于指向该文 件的索引结点。对于一个共享文件，其索引结点号会在目录中出现多次。例如，当有5个 用户（进程）共享某文件时，其索引结点号会在目录中出现5次；另一方面，在该共享文件 的索引结点中有一个链接计数count，用来指出共享本文件的用户（进程）数。在正常情况下 这两个数据应该一致，否则就会出现数据不一致性差错。 为了检查这种数据不一致性差错，需要配置一张计数器表，此时应是为每个文件建立 一个表项，其中含有该索引结点号的计数值。在进行检查时，从根目录开始查找，每当在 目录中遇到该索引结点号时，便在该计数器表中相应文件的表项上加1。当把所有目录都 检查完后，便可将该计数器表中每个表项中的索引结点号计数值与该文件索引结点中的链 275  计算机操作系统 接计数count值加以比较，如果两者一致，表示是正确的；否则，便是发生了链接数据不 一致的错误。 如果索引结点中的链接计数count值大于计数器表中相应索引结点号的计数值，则即 删除。这种错误的后果是使一些已无用户需要的文件仍驻留在磁盘上，浪费了存储空间。 当然这种错误的性质并不严重。解决的方法是用计数器表中的正确的计数值去为count重 新赋值。反之，如果出现count值小于计数器表中索引结点号计数值的情况时，就有潜在 的危险。假如有两个用户共享一个文件，但是count值仍为1，这样，只要其中有一个用户 不再需要此文件时，count值就会减为0，从而使系统将此文件删除，并释放其索引结点及 文件所占用的盘块，导致另一共享此文件的用户所对应的目录项指向了一个空索引结点， 最终是使该用户再无法访问此文件。如果该索引结点很快又被分配给其它文件，则又会带 来潜在的危险。解决的方法是将count值置为正确值。

1.目前常用的外存有哪几种组织方式？

2.由连续组织方式所形成的顺序文件的主要优缺点是什么？它主要应用于何种场合？

3.在链接式文件中常用哪种链接方式？为什么？

4.在文件分配表中为什么要引入“簇”的概念？以“簇”为基本的分配单位有什么好处？

5.简要说明为什么要从FAT12发展为FAT16？又进一步要发展为FAT32？

6.试解释逻辑簇号和虚拟簇号这两个名词，NTFS是如何将它们映射到文件的物理地 址上的？

7.在MS-DOS中有两个文件A和B，A占用11、12、16和14四个盘块；B占用13、 18和20三个盘块。试画出在文件A和B中各盘块间的链接情况及FAT的情况。

8.NTFS文件系统中的文件所采用的是什么样的物理结构？

9.假定一个文件系统的组织方式与MS-DOS相似，在FAT中可有64K个指针，磁盘 的盘块大小为512B，试问该文件系统能否指引一个512MB的磁盘？

10.为了快速访问，又易于更新，当数据为以下形式时，应选用何种文件组织方式？

(1）不经常更新，经常随机访问；

(2）经常更新，经常按一定顺序访问；

(3）经常更新，经常随机访问。

11.在UNIX中，如果一个盘块的大小为1KB，每个盘块号占4个字节，即每块可放 256个地址。请转换下列文件的字节偏移量为物理地址：

(1) 9999;(2) 18000; (3) 420000。

12.什么是索引文件？为什么要引入多级索引？

13.试说明增量式索引组织方式。

14.有一计算机系统利用图8-19所示的位示图来管理空闲盘块。盘块的大小为1KB， 现要为某文件分配两个盘块，试说明盘块的具体分配过程。 276